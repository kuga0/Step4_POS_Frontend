/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/quagga";
exports.ids = ["vendor-chunks/quagga"];
exports.modules = {

/***/ "(ssr)/./node_modules/quagga/lib/quagga.js":
/*!*******************************************!*\
  !*** ./node_modules/quagga/lib/quagga.js ***!
  \*******************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory(__webpack_require__(/*! get-pixels */ \"(ssr)/./node_modules/get-pixels/node-pixels.js\"), __webpack_require__(/*! ndarray */ \"(ssr)/./node_modules/ndarray/ndarray.js\"), __webpack_require__(/*! ndarray-linear-interpolate */ \"(ssr)/./node_modules/ndarray-linear-interpolate/interp.js\"));\n\telse {}\n})(this, function(__WEBPACK_EXTERNAL_MODULE_164__, __WEBPACK_EXTERNAL_MODULE_165__, __WEBPACK_EXTERNAL_MODULE_166__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __nested_webpack_require_916__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_916__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__nested_webpack_require_916__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__nested_webpack_require_916__.c = installedModules;\n/******/\n/******/ \t// identity function for calling harmony imports with the correct context\n/******/ \t__nested_webpack_require_916__.i = function(value) { return value; };\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__nested_webpack_require_916__.d = function(exports, name, getter) {\n/******/ \t\tif(!__nested_webpack_require_916__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__nested_webpack_require_916__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__nested_webpack_require_916__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__nested_webpack_require_916__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__nested_webpack_require_916__.p = \"/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __nested_webpack_require_916__(__nested_webpack_require_916__.s = 167);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports) {\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nmodule.exports = isObject;\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __nested_webpack_require_4141__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _array_helper = __nested_webpack_require_4141__(3);\n\nvar _array_helper2 = _interopRequireDefault(_array_helper);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction BarcodeReader(config, supplements) {\n    this._row = [];\n    this.config = config || {};\n    this.supplements = supplements;\n    return this;\n}\n\nBarcodeReader.prototype._nextUnset = function (line, start) {\n    var i;\n\n    if (start === undefined) {\n        start = 0;\n    }\n    for (i = start; i < line.length; i++) {\n        if (!line[i]) {\n            return i;\n        }\n    }\n    return line.length;\n};\n\nBarcodeReader.prototype._matchPattern = function (counter, code, maxSingleError) {\n    var i,\n        error = 0,\n        singleError = 0,\n        sum = 0,\n        modulo = 0,\n        barWidth,\n        count,\n        scaled;\n\n    maxSingleError = maxSingleError || this.SINGLE_CODE_ERROR || 1;\n\n    for (i = 0; i < counter.length; i++) {\n        sum += counter[i];\n        modulo += code[i];\n    }\n    if (sum < modulo) {\n        return Number.MAX_VALUE;\n    }\n    barWidth = sum / modulo;\n    maxSingleError *= barWidth;\n\n    for (i = 0; i < counter.length; i++) {\n        count = counter[i];\n        scaled = code[i] * barWidth;\n        singleError = Math.abs(count - scaled) / scaled;\n        if (singleError > maxSingleError) {\n            return Number.MAX_VALUE;\n        }\n        error += singleError;\n    }\n    return error / modulo;\n};\n\nBarcodeReader.prototype._nextSet = function (line, offset) {\n    var i;\n\n    offset = offset || 0;\n    for (i = offset; i < line.length; i++) {\n        if (line[i]) {\n            return i;\n        }\n    }\n    return line.length;\n};\n\nBarcodeReader.prototype._correctBars = function (counter, correction, indices) {\n    var length = indices.length,\n        tmp = 0;\n    while (length--) {\n        tmp = counter[indices[length]] * (1 - (1 - correction) / 2);\n        if (tmp > 1) {\n            counter[indices[length]] = tmp;\n        }\n    }\n};\n\nBarcodeReader.prototype._matchTrace = function (cmpCounter, epsilon) {\n    var counter = [],\n        i,\n        self = this,\n        offset = self._nextSet(self._row),\n        isWhite = !self._row[offset],\n        counterPos = 0,\n        bestMatch = {\n        error: Number.MAX_VALUE,\n        code: -1,\n        start: 0\n    },\n        error;\n\n    if (cmpCounter) {\n        for (i = 0; i < cmpCounter.length; i++) {\n            counter.push(0);\n        }\n        for (i = offset; i < self._row.length; i++) {\n            if (self._row[i] ^ isWhite) {\n                counter[counterPos]++;\n            } else {\n                if (counterPos === counter.length - 1) {\n                    error = self._matchPattern(counter, cmpCounter);\n\n                    if (error < epsilon) {\n                        bestMatch.start = i - offset;\n                        bestMatch.end = i;\n                        bestMatch.counter = counter;\n                        return bestMatch;\n                    } else {\n                        return null;\n                    }\n                } else {\n                    counterPos++;\n                }\n                counter[counterPos] = 1;\n                isWhite = !isWhite;\n            }\n        }\n    } else {\n        counter.push(0);\n        for (i = offset; i < self._row.length; i++) {\n            if (self._row[i] ^ isWhite) {\n                counter[counterPos]++;\n            } else {\n                counterPos++;\n                counter.push(0);\n                counter[counterPos] = 1;\n                isWhite = !isWhite;\n            }\n        }\n    }\n\n    // if cmpCounter was not given\n    bestMatch.start = offset;\n    bestMatch.end = self._row.length - 1;\n    bestMatch.counter = counter;\n    return bestMatch;\n};\n\nBarcodeReader.prototype.decodePattern = function (pattern) {\n    var self = this,\n        result;\n\n    self._row = pattern;\n    result = self._decode();\n    if (result === null) {\n        self._row.reverse();\n        result = self._decode();\n        if (result) {\n            result.direction = BarcodeReader.DIRECTION.REVERSE;\n            result.start = self._row.length - result.start;\n            result.end = self._row.length - result.end;\n        }\n    } else {\n        result.direction = BarcodeReader.DIRECTION.FORWARD;\n    }\n    if (result) {\n        result.format = self.FORMAT;\n    }\n    return result;\n};\n\nBarcodeReader.prototype._matchRange = function (start, end, value) {\n    var i;\n\n    start = start < 0 ? 0 : start;\n    for (i = start; i < end; i++) {\n        if (this._row[i] !== value) {\n            return false;\n        }\n    }\n    return true;\n};\n\nBarcodeReader.prototype._fillCounters = function (offset, end, isWhite) {\n    var self = this,\n        counterPos = 0,\n        i,\n        counters = [];\n\n    isWhite = typeof isWhite !== 'undefined' ? isWhite : true;\n    offset = typeof offset !== 'undefined' ? offset : self._nextUnset(self._row);\n    end = end || self._row.length;\n\n    counters[counterPos] = 0;\n    for (i = offset; i < end; i++) {\n        if (self._row[i] ^ isWhite) {\n            counters[counterPos]++;\n        } else {\n            counterPos++;\n            counters[counterPos] = 1;\n            isWhite = !isWhite;\n        }\n    }\n    return counters;\n};\n\nBarcodeReader.prototype._toCounters = function (start, counter) {\n    var self = this,\n        numCounters = counter.length,\n        end = self._row.length,\n        isWhite = !self._row[start],\n        i,\n        counterPos = 0;\n\n    _array_helper2.default.init(counter, 0);\n\n    for (i = start; i < end; i++) {\n        if (self._row[i] ^ isWhite) {\n            counter[counterPos]++;\n        } else {\n            counterPos++;\n            if (counterPos === numCounters) {\n                break;\n            } else {\n                counter[counterPos] = 1;\n                isWhite = !isWhite;\n            }\n        }\n    }\n\n    return counter;\n};\n\nObject.defineProperty(BarcodeReader.prototype, \"FORMAT\", {\n    value: 'unknown',\n    writeable: false\n});\n\nBarcodeReader.DIRECTION = {\n    FORWARD: 1,\n    REVERSE: -1\n};\n\nBarcodeReader.Exception = {\n    StartNotFoundException: \"Start-Info was not found!\",\n    CodeNotFoundException: \"Code could not be found!\",\n    PatternNotFoundException: \"Pattern could not be found!\"\n};\n\nBarcodeReader.CONFIG_KEYS = {};\n\nexports.default = BarcodeReader;\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\n/**\n * Checks if `value` is classified as an `Array` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array, else `false`.\n * @example\n *\n * _.isArray([1, 2, 3]);\n * // => true\n *\n * _.isArray(document.body.children);\n * // => false\n *\n * _.isArray('abc');\n * // => false\n *\n * _.isArray(_.noop);\n * // => false\n */\nvar isArray = Array.isArray;\n\nmodule.exports = isArray;\n\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.default = {\n    init: function init(arr, val) {\n        var l = arr.length;\n        while (l--) {\n            arr[l] = val;\n        }\n    },\n\n    /**\n     * Shuffles the content of an array\n     * @return {Array} the array itself shuffled\n     */\n    shuffle: function shuffle(arr) {\n        var i = arr.length - 1,\n            j,\n            x;\n        for (i; i >= 0; i--) {\n            j = Math.floor(Math.random() * i);\n            x = arr[i];\n            arr[i] = arr[j];\n            arr[j] = x;\n        }\n        return arr;\n    },\n\n    toPointList: function toPointList(arr) {\n        var i,\n            j,\n            row = [],\n            rows = [];\n        for (i = 0; i < arr.length; i++) {\n            row = [];\n            for (j = 0; j < arr[i].length; j++) {\n                row[j] = arr[i][j];\n            }\n            rows[i] = \"[\" + row.join(\",\") + \"]\";\n        }\n        return \"[\" + rows.join(\",\\r\\n\") + \"]\";\n    },\n\n    /**\n     * returns the elements which's score is bigger than the threshold\n     * @return {Array} the reduced array\n     */\n    threshold: function threshold(arr, _threshold, scoreFunc) {\n        var i,\n            queue = [];\n        for (i = 0; i < arr.length; i++) {\n            if (scoreFunc.apply(arr, [arr[i]]) >= _threshold) {\n                queue.push(arr[i]);\n            }\n        }\n        return queue;\n    },\n\n    maxIndex: function maxIndex(arr) {\n        var i,\n            max = 0;\n        for (i = 0; i < arr.length; i++) {\n            if (arr[i] > arr[max]) {\n                max = i;\n            }\n        }\n        return max;\n    },\n\n    max: function max(arr) {\n        var i,\n            max = 0;\n        for (i = 0; i < arr.length; i++) {\n            if (arr[i] > max) {\n                max = arr[i];\n            }\n        }\n        return max;\n    },\n\n    sum: function sum(arr) {\n        var length = arr.length,\n            sum = 0;\n\n        while (length--) {\n            sum += arr[length];\n        }\n        return sum;\n    }\n};\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __nested_webpack_require_13303__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _merge2 = __nested_webpack_require_13303__(28);\n\nvar _merge3 = _interopRequireDefault(_merge2);\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };\n\nvar _barcode_reader = __nested_webpack_require_13303__(1);\n\nvar _barcode_reader2 = _interopRequireDefault(_barcode_reader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction EANReader(opts, supplements) {\n    opts = (0, _merge3.default)(getDefaulConfig(), opts);\n    _barcode_reader2.default.call(this, opts, supplements);\n}\n\nfunction getDefaulConfig() {\n    var config = {};\n\n    Object.keys(EANReader.CONFIG_KEYS).forEach(function (key) {\n        config[key] = EANReader.CONFIG_KEYS[key].default;\n    });\n    return config;\n}\n\nvar properties = {\n    CODE_L_START: { value: 0 },\n    CODE_G_START: { value: 10 },\n    START_PATTERN: { value: [1, 1, 1] },\n    STOP_PATTERN: { value: [1, 1, 1] },\n    MIDDLE_PATTERN: { value: [1, 1, 1, 1, 1] },\n    EXTENSION_START_PATTERN: { value: [1, 1, 2] },\n    CODE_PATTERN: { value: [[3, 2, 1, 1], [2, 2, 2, 1], [2, 1, 2, 2], [1, 4, 1, 1], [1, 1, 3, 2], [1, 2, 3, 1], [1, 1, 1, 4], [1, 3, 1, 2], [1, 2, 1, 3], [3, 1, 1, 2], [1, 1, 2, 3], [1, 2, 2, 2], [2, 2, 1, 2], [1, 1, 4, 1], [2, 3, 1, 1], [1, 3, 2, 1], [4, 1, 1, 1], [2, 1, 3, 1], [3, 1, 2, 1], [2, 1, 1, 3]] },\n    CODE_FREQUENCY: { value: [0, 11, 13, 14, 19, 25, 28, 21, 22, 26] },\n    SINGLE_CODE_ERROR: { value: 0.70 },\n    AVG_CODE_ERROR: { value: 0.48 },\n    FORMAT: { value: \"ean_13\", writeable: false }\n};\n\nEANReader.prototype = Object.create(_barcode_reader2.default.prototype, properties);\nEANReader.prototype.constructor = EANReader;\n\nEANReader.prototype._decodeCode = function (start, coderange) {\n    var counter = [0, 0, 0, 0],\n        i,\n        self = this,\n        offset = start,\n        isWhite = !self._row[offset],\n        counterPos = 0,\n        bestMatch = {\n        error: Number.MAX_VALUE,\n        code: -1,\n        start: start,\n        end: start\n    },\n        code,\n        error;\n\n    if (!coderange) {\n        coderange = self.CODE_PATTERN.length;\n    }\n\n    for (i = offset; i < self._row.length; i++) {\n        if (self._row[i] ^ isWhite) {\n            counter[counterPos]++;\n        } else {\n            if (counterPos === counter.length - 1) {\n                for (code = 0; code < coderange; code++) {\n                    error = self._matchPattern(counter, self.CODE_PATTERN[code]);\n                    if (error < bestMatch.error) {\n                        bestMatch.code = code;\n                        bestMatch.error = error;\n                    }\n                }\n                bestMatch.end = i;\n                if (bestMatch.error > self.AVG_CODE_ERROR) {\n                    return null;\n                }\n                return bestMatch;\n            } else {\n                counterPos++;\n            }\n            counter[counterPos] = 1;\n            isWhite = !isWhite;\n        }\n    }\n    return null;\n};\n\nEANReader.prototype._findPattern = function (pattern, offset, isWhite, tryHarder, epsilon) {\n    var counter = [],\n        self = this,\n        i,\n        counterPos = 0,\n        bestMatch = {\n        error: Number.MAX_VALUE,\n        code: -1,\n        start: 0,\n        end: 0\n    },\n        error,\n        j,\n        sum;\n\n    if (!offset) {\n        offset = self._nextSet(self._row);\n    }\n\n    if (isWhite === undefined) {\n        isWhite = false;\n    }\n\n    if (tryHarder === undefined) {\n        tryHarder = true;\n    }\n\n    if (epsilon === undefined) {\n        epsilon = self.AVG_CODE_ERROR;\n    }\n\n    for (i = 0; i < pattern.length; i++) {\n        counter[i] = 0;\n    }\n\n    for (i = offset; i < self._row.length; i++) {\n        if (self._row[i] ^ isWhite) {\n            counter[counterPos]++;\n        } else {\n            if (counterPos === counter.length - 1) {\n                sum = 0;\n                for (j = 0; j < counter.length; j++) {\n                    sum += counter[j];\n                }\n                error = self._matchPattern(counter, pattern);\n\n                if (error < epsilon) {\n                    bestMatch.error = error;\n                    bestMatch.start = i - sum;\n                    bestMatch.end = i;\n                    return bestMatch;\n                }\n                if (tryHarder) {\n                    for (j = 0; j < counter.length - 2; j++) {\n                        counter[j] = counter[j + 2];\n                    }\n                    counter[counter.length - 2] = 0;\n                    counter[counter.length - 1] = 0;\n                    counterPos--;\n                } else {\n                    return null;\n                }\n            } else {\n                counterPos++;\n            }\n            counter[counterPos] = 1;\n            isWhite = !isWhite;\n        }\n    }\n    return null;\n};\n\nEANReader.prototype._findStart = function () {\n    var self = this,\n        leadingWhitespaceStart,\n        offset = self._nextSet(self._row),\n        startInfo;\n\n    while (!startInfo) {\n        startInfo = self._findPattern(self.START_PATTERN, offset);\n        if (!startInfo) {\n            return null;\n        }\n        leadingWhitespaceStart = startInfo.start - (startInfo.end - startInfo.start);\n        if (leadingWhitespaceStart >= 0) {\n            if (self._matchRange(leadingWhitespaceStart, startInfo.start, 0)) {\n                return startInfo;\n            }\n        }\n        offset = startInfo.end;\n        startInfo = null;\n    }\n};\n\nEANReader.prototype._verifyTrailingWhitespace = function (endInfo) {\n    var self = this,\n        trailingWhitespaceEnd;\n\n    trailingWhitespaceEnd = endInfo.end + (endInfo.end - endInfo.start);\n    if (trailingWhitespaceEnd < self._row.length) {\n        if (self._matchRange(endInfo.end, trailingWhitespaceEnd, 0)) {\n            return endInfo;\n        }\n    }\n    return null;\n};\n\nEANReader.prototype._findEnd = function (offset, isWhite) {\n    var self = this,\n        endInfo = self._findPattern(self.STOP_PATTERN, offset, isWhite, false);\n\n    return endInfo !== null ? self._verifyTrailingWhitespace(endInfo) : null;\n};\n\nEANReader.prototype._calculateFirstDigit = function (codeFrequency) {\n    var i,\n        self = this;\n\n    for (i = 0; i < self.CODE_FREQUENCY.length; i++) {\n        if (codeFrequency === self.CODE_FREQUENCY[i]) {\n            return i;\n        }\n    }\n    return null;\n};\n\nEANReader.prototype._decodePayload = function (code, result, decodedCodes) {\n    var i,\n        self = this,\n        codeFrequency = 0x0,\n        firstDigit;\n\n    for (i = 0; i < 6; i++) {\n        code = self._decodeCode(code.end);\n        if (!code) {\n            return null;\n        }\n        if (code.code >= self.CODE_G_START) {\n            code.code = code.code - self.CODE_G_START;\n            codeFrequency |= 1 << 5 - i;\n        } else {\n            codeFrequency |= 0 << 5 - i;\n        }\n        result.push(code.code);\n        decodedCodes.push(code);\n    }\n\n    firstDigit = self._calculateFirstDigit(codeFrequency);\n    if (firstDigit === null) {\n        return null;\n    }\n    result.unshift(firstDigit);\n\n    code = self._findPattern(self.MIDDLE_PATTERN, code.end, true, false);\n    if (code === null) {\n        return null;\n    }\n    decodedCodes.push(code);\n\n    for (i = 0; i < 6; i++) {\n        code = self._decodeCode(code.end, self.CODE_G_START);\n        if (!code) {\n            return null;\n        }\n        decodedCodes.push(code);\n        result.push(code.code);\n    }\n\n    return code;\n};\n\nEANReader.prototype._decode = function () {\n    var startInfo,\n        self = this,\n        code,\n        result = [],\n        decodedCodes = [],\n        resultInfo = {};\n\n    startInfo = self._findStart();\n    if (!startInfo) {\n        return null;\n    }\n    code = {\n        code: startInfo.code,\n        start: startInfo.start,\n        end: startInfo.end\n    };\n    decodedCodes.push(code);\n    code = self._decodePayload(code, result, decodedCodes);\n    if (!code) {\n        return null;\n    }\n    code = self._findEnd(code.end, false);\n    if (!code) {\n        return null;\n    }\n\n    decodedCodes.push(code);\n\n    // Checksum\n    if (!self._checksum(result)) {\n        return null;\n    }\n\n    if (this.supplements.length > 0) {\n        var ext = this._decodeExtensions(code.end);\n        if (!ext) {\n            return null;\n        }\n        var lastCode = ext.decodedCodes[ext.decodedCodes.length - 1],\n            endInfo = {\n            start: lastCode.start + ((lastCode.end - lastCode.start) / 2 | 0),\n            end: lastCode.end\n        };\n        if (!self._verifyTrailingWhitespace(endInfo)) {\n            return null;\n        }\n        resultInfo = {\n            supplement: ext,\n            code: result.join(\"\") + ext.code\n        };\n    }\n\n    return _extends({\n        code: result.join(\"\"),\n        start: startInfo.start,\n        end: code.end,\n        codeset: \"\",\n        startInfo: startInfo,\n        decodedCodes: decodedCodes\n    }, resultInfo);\n};\n\nEANReader.prototype._decodeExtensions = function (offset) {\n    var i,\n        start = this._nextSet(this._row, offset),\n        startInfo = this._findPattern(this.EXTENSION_START_PATTERN, start, false, false),\n        result;\n\n    if (startInfo === null) {\n        return null;\n    }\n\n    for (i = 0; i < this.supplements.length; i++) {\n        result = this.supplements[i].decode(this._row, startInfo.end);\n        if (result !== null) {\n            return {\n                code: result.code,\n                start: start,\n                startInfo: startInfo,\n                end: result.end,\n                codeset: \"\",\n                decodedCodes: result.decodedCodes\n            };\n        }\n    }\n    return null;\n};\n\nEANReader.prototype._checksum = function (result) {\n    var sum = 0,\n        i;\n\n    for (i = result.length - 2; i >= 0; i -= 2) {\n        sum += result[i];\n    }\n    sum *= 3;\n    for (i = result.length - 1; i >= 0; i -= 2) {\n        sum += result[i];\n    }\n    return sum % 10 === 0;\n};\n\nEANReader.CONFIG_KEYS = {\n    supplements: {\n        'type': 'arrayOf(string)',\n        'default': [],\n        'description': 'Allowed extensions to be decoded (2 and/or 5)'\n    }\n};\n\nexports.default = EANReader;\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __nested_webpack_require_23799__) {\n\nvar freeGlobal = __nested_webpack_require_23799__(38);\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\nmodule.exports = root;\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports) {\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return value != null && typeof value == 'object';\n}\n\nmodule.exports = isObjectLike;\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports) {\n\nmodule.exports = clone\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nfunction clone(a) {\n    var out = new Float32Array(2)\n    out[0] = a[0]\n    out[1] = a[1]\n    return out\n}\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __nested_webpack_require_25182__) {\n\nvar Symbol = __nested_webpack_require_25182__(11),\n    getRawTag = __nested_webpack_require_25182__(117),\n    objectToString = __nested_webpack_require_25182__(144);\n\n/** `Object#toString` result references. */\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n  return (symToStringTag && symToStringTag in Object(value))\n    ? getRawTag(value)\n    : objectToString(value);\n}\n\nmodule.exports = baseGetTag;\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.default = {\n    drawRect: function drawRect(pos, size, ctx, style) {\n        ctx.strokeStyle = style.color;\n        ctx.fillStyle = style.color;\n        ctx.lineWidth = 1;\n        ctx.beginPath();\n        ctx.strokeRect(pos.x, pos.y, size.x, size.y);\n    },\n    drawPath: function drawPath(path, def, ctx, style) {\n        ctx.strokeStyle = style.color;\n        ctx.fillStyle = style.color;\n        ctx.lineWidth = style.lineWidth;\n        ctx.beginPath();\n        ctx.moveTo(path[0][def.x], path[0][def.y]);\n        for (var j = 1; j < path.length; j++) {\n            ctx.lineTo(path[j][def.x], path[j][def.y]);\n        }\n        ctx.closePath();\n        ctx.stroke();\n    },\n    drawImage: function drawImage(imageData, size, ctx) {\n        var canvasData = ctx.getImageData(0, 0, size.x, size.y),\n            data = canvasData.data,\n            imageDataPos = imageData.length,\n            canvasDataPos = data.length,\n            value;\n\n        if (canvasDataPos / imageDataPos !== 4) {\n            return false;\n        }\n        while (imageDataPos--) {\n            value = imageData[imageDataPos];\n            data[--canvasDataPos] = 255;\n            data[--canvasDataPos] = value;\n            data[--canvasDataPos] = value;\n            data[--canvasDataPos] = value;\n        }\n        ctx.putImageData(canvasData, 0, 0);\n        return true;\n    }\n};\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __nested_webpack_require_27539__) {\n\nvar listCacheClear = __nested_webpack_require_27539__(131),\n    listCacheDelete = __nested_webpack_require_27539__(132),\n    listCacheGet = __nested_webpack_require_27539__(133),\n    listCacheHas = __nested_webpack_require_27539__(134),\n    listCacheSet = __nested_webpack_require_27539__(135);\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nmodule.exports = ListCache;\n\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __nested_webpack_require_28471__) {\n\nvar root = __nested_webpack_require_28471__(5);\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __nested_webpack_require_28671__) {\n\nvar eq = __nested_webpack_require_28671__(17);\n\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\nfunction assocIndexOf(array, key) {\n  var length = array.length;\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n  return -1;\n}\n\nmodule.exports = assocIndexOf;\n\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __nested_webpack_require_29244__) {\n\nvar isArray = __nested_webpack_require_29244__(2),\n    isKey = __nested_webpack_require_29244__(128),\n    stringToPath = __nested_webpack_require_29244__(152),\n    toString = __nested_webpack_require_29244__(163);\n\n/**\n * Casts `value` to a path array if it's not one.\n *\n * @private\n * @param {*} value The value to inspect.\n * @param {Object} [object] The object to query keys on.\n * @returns {Array} Returns the cast property path array.\n */\nfunction castPath(value, object) {\n  if (isArray(value)) {\n    return value;\n  }\n  return isKey(value, object) ? [value] : stringToPath(toString(value));\n}\n\nmodule.exports = castPath;\n\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __nested_webpack_require_29899__) {\n\nvar isKeyable = __nested_webpack_require_29899__(129);\n\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\nfunction getMapData(map, key) {\n  var data = map.__data__;\n  return isKeyable(key)\n    ? data[typeof key == 'string' ? 'string' : 'hash']\n    : data.map;\n}\n\nmodule.exports = getMapData;\n\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports) {\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  length = length == null ? MAX_SAFE_INTEGER : length;\n  return !!length &&\n    (typeof value == 'number' || reIsUint.test(value)) &&\n    (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __nested_webpack_require_31142__) {\n\nvar getNative = __nested_webpack_require_31142__(22);\n\n/* Built-in method references that are verified to be native. */\nvar nativeCreate = getNative(Object, 'create');\n\nmodule.exports = nativeCreate;\n\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports) {\n\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\nfunction eq(value, other) {\n  return value === other || (value !== value && other !== other);\n}\n\nmodule.exports = eq;\n\n\n/***/ }),\n/* 18 */\n/***/ (function(module, exports, __nested_webpack_require_32263__) {\n\nvar baseIsArguments = __nested_webpack_require_32263__(94),\n    isObjectLike = __nested_webpack_require_32263__(6);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Built-in value references. */\nvar propertyIsEnumerable = objectProto.propertyIsEnumerable;\n\n/**\n * Checks if `value` is likely an `arguments` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n *  else `false`.\n * @example\n *\n * _.isArguments(function() { return arguments; }());\n * // => true\n *\n * _.isArguments([1, 2, 3]);\n * // => false\n */\nvar isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {\n  return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&\n    !propertyIsEnumerable.call(value, 'callee');\n};\n\nmodule.exports = isArguments;\n\n\n/***/ }),\n/* 19 */\n/***/ (function(module, exports, __nested_webpack_require_33358__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports._dimensionsConverters = exports.ERODE = exports.DILATE = exports.Tracer = undefined;\nexports.imageRef = imageRef;\nexports.computeIntegralImage2 = computeIntegralImage2;\nexports.computeIntegralImage = computeIntegralImage;\nexports.thresholdImage = thresholdImage;\nexports.computeHistogram = computeHistogram;\nexports.sharpenLine = sharpenLine;\nexports.determineOtsuThreshold = determineOtsuThreshold;\nexports.otsuThreshold = otsuThreshold;\nexports.computeBinaryImage = computeBinaryImage;\nexports.cluster = cluster;\nexports.dilate = dilate;\nexports.erode = erode;\nexports.subtract = subtract;\nexports.bitwiseOr = bitwiseOr;\nexports.countNonZero = countNonZero;\nexports.topGeneric = topGeneric;\nexports.grayArrayFromImage = grayArrayFromImage;\nexports.grayArrayFromContext = grayArrayFromContext;\nexports.grayAndHalfSampleFromCanvasData = grayAndHalfSampleFromCanvasData;\nexports.computeGray = computeGray;\nexports.loadImageArray = loadImageArray;\nexports.halfSample = halfSample;\nexports.hsv2rgb = hsv2rgb;\nexports._computeDivisors = _computeDivisors;\nexports.calculatePatchSize = calculatePatchSize;\nexports._parseCSSDimensionValues = _parseCSSDimensionValues;\nexports.computeImageArea = computeImageArea;\n\nvar _cluster = __nested_webpack_require_33358__(52);\n\nvar _cluster2 = _interopRequireDefault(_cluster);\n\nvar _array_helper = __nested_webpack_require_33358__(3);\n\nvar _array_helper2 = _interopRequireDefault(_array_helper);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar vec2 = {\n    clone: __nested_webpack_require_33358__(7)\n};\nvar vec3 = {\n    clone: __nested_webpack_require_33358__(81)\n};\n\n/**\n * @param x x-coordinate\n * @param y y-coordinate\n * @return ImageReference {x,y} Coordinate\n */\nfunction imageRef(x, y) {\n    var that = {\n        x: x,\n        y: y,\n        toVec2: function toVec2() {\n            return vec2.clone([this.x, this.y]);\n        },\n        toVec3: function toVec3() {\n            return vec3.clone([this.x, this.y, 1]);\n        },\n        round: function round() {\n            this.x = this.x > 0.0 ? Math.floor(this.x + 0.5) : Math.floor(this.x - 0.5);\n            this.y = this.y > 0.0 ? Math.floor(this.y + 0.5) : Math.floor(this.y - 0.5);\n            return this;\n        }\n    };\n    return that;\n};\n\n/**\n * Computes an integral image of a given grayscale image.\n * @param imageDataContainer {ImageDataContainer} the image to be integrated\n */\nfunction computeIntegralImage2(imageWrapper, integralWrapper) {\n    var imageData = imageWrapper.data;\n    var width = imageWrapper.size.x;\n    var height = imageWrapper.size.y;\n    var integralImageData = integralWrapper.data;\n    var sum = 0,\n        posA = 0,\n        posB = 0,\n        posC = 0,\n        posD = 0,\n        x,\n        y;\n\n    // sum up first column\n    posB = width;\n    sum = 0;\n    for (y = 1; y < height; y++) {\n        sum += imageData[posA];\n        integralImageData[posB] += sum;\n        posA += width;\n        posB += width;\n    }\n\n    posA = 0;\n    posB = 1;\n    sum = 0;\n    for (x = 1; x < width; x++) {\n        sum += imageData[posA];\n        integralImageData[posB] += sum;\n        posA++;\n        posB++;\n    }\n\n    for (y = 1; y < height; y++) {\n        posA = y * width + 1;\n        posB = (y - 1) * width + 1;\n        posC = y * width;\n        posD = (y - 1) * width;\n        for (x = 1; x < width; x++) {\n            integralImageData[posA] += imageData[posA] + integralImageData[posB] + integralImageData[posC] - integralImageData[posD];\n            posA++;\n            posB++;\n            posC++;\n            posD++;\n        }\n    }\n};\n\nfunction computeIntegralImage(imageWrapper, integralWrapper) {\n    var imageData = imageWrapper.data;\n    var width = imageWrapper.size.x;\n    var height = imageWrapper.size.y;\n    var integralImageData = integralWrapper.data;\n    var sum = 0;\n\n    // sum up first row\n    for (var i = 0; i < width; i++) {\n        sum += imageData[i];\n        integralImageData[i] = sum;\n    }\n\n    for (var v = 1; v < height; v++) {\n        sum = 0;\n        for (var u = 0; u < width; u++) {\n            sum += imageData[v * width + u];\n            integralImageData[v * width + u] = sum + integralImageData[(v - 1) * width + u];\n        }\n    }\n};\n\nfunction thresholdImage(imageWrapper, threshold, targetWrapper) {\n    if (!targetWrapper) {\n        targetWrapper = imageWrapper;\n    }\n    var imageData = imageWrapper.data,\n        length = imageData.length,\n        targetData = targetWrapper.data;\n\n    while (length--) {\n        targetData[length] = imageData[length] < threshold ? 1 : 0;\n    }\n};\n\nfunction computeHistogram(imageWrapper, bitsPerPixel) {\n    if (!bitsPerPixel) {\n        bitsPerPixel = 8;\n    }\n    var imageData = imageWrapper.data,\n        length = imageData.length,\n        bitShift = 8 - bitsPerPixel,\n        bucketCnt = 1 << bitsPerPixel,\n        hist = new Int32Array(bucketCnt);\n\n    while (length--) {\n        hist[imageData[length] >> bitShift]++;\n    }\n    return hist;\n};\n\nfunction sharpenLine(line) {\n    var i,\n        length = line.length,\n        left = line[0],\n        center = line[1],\n        right;\n\n    for (i = 1; i < length - 1; i++) {\n        right = line[i + 1];\n        //  -1 4 -1 kernel\n        line[i - 1] = center * 2 - left - right & 255;\n        left = center;\n        center = right;\n    }\n    return line;\n};\n\nfunction determineOtsuThreshold(imageWrapper, bitsPerPixel) {\n    if (!bitsPerPixel) {\n        bitsPerPixel = 8;\n    }\n    var hist,\n        threshold,\n        bitShift = 8 - bitsPerPixel;\n\n    function px(init, end) {\n        var sum = 0,\n            i;\n        for (i = init; i <= end; i++) {\n            sum += hist[i];\n        }\n        return sum;\n    }\n\n    function mx(init, end) {\n        var i,\n            sum = 0;\n\n        for (i = init; i <= end; i++) {\n            sum += i * hist[i];\n        }\n\n        return sum;\n    }\n\n    function determineThreshold() {\n        var vet = [0],\n            p1,\n            p2,\n            p12,\n            k,\n            m1,\n            m2,\n            m12,\n            max = (1 << bitsPerPixel) - 1;\n\n        hist = computeHistogram(imageWrapper, bitsPerPixel);\n        for (k = 1; k < max; k++) {\n            p1 = px(0, k);\n            p2 = px(k + 1, max);\n            p12 = p1 * p2;\n            if (p12 === 0) {\n                p12 = 1;\n            }\n            m1 = mx(0, k) * p2;\n            m2 = mx(k + 1, max) * p1;\n            m12 = m1 - m2;\n            vet[k] = m12 * m12 / p12;\n        }\n        return _array_helper2.default.maxIndex(vet);\n    }\n\n    threshold = determineThreshold();\n    return threshold << bitShift;\n};\n\nfunction otsuThreshold(imageWrapper, targetWrapper) {\n    var threshold = determineOtsuThreshold(imageWrapper);\n\n    thresholdImage(imageWrapper, threshold, targetWrapper);\n    return threshold;\n};\n\n// local thresholding\nfunction computeBinaryImage(imageWrapper, integralWrapper, targetWrapper) {\n    computeIntegralImage(imageWrapper, integralWrapper);\n\n    if (!targetWrapper) {\n        targetWrapper = imageWrapper;\n    }\n    var imageData = imageWrapper.data;\n    var targetData = targetWrapper.data;\n    var width = imageWrapper.size.x;\n    var height = imageWrapper.size.y;\n    var integralImageData = integralWrapper.data;\n    var sum = 0,\n        v,\n        u,\n        kernel = 3,\n        A,\n        B,\n        C,\n        D,\n        avg,\n        size = (kernel * 2 + 1) * (kernel * 2 + 1);\n\n    // clear out top & bottom-border\n    for (v = 0; v <= kernel; v++) {\n        for (u = 0; u < width; u++) {\n            targetData[v * width + u] = 0;\n            targetData[(height - 1 - v) * width + u] = 0;\n        }\n    }\n\n    // clear out left & right border\n    for (v = kernel; v < height - kernel; v++) {\n        for (u = 0; u <= kernel; u++) {\n            targetData[v * width + u] = 0;\n            targetData[v * width + (width - 1 - u)] = 0;\n        }\n    }\n\n    for (v = kernel + 1; v < height - kernel - 1; v++) {\n        for (u = kernel + 1; u < width - kernel; u++) {\n            A = integralImageData[(v - kernel - 1) * width + (u - kernel - 1)];\n            B = integralImageData[(v - kernel - 1) * width + (u + kernel)];\n            C = integralImageData[(v + kernel) * width + (u - kernel - 1)];\n            D = integralImageData[(v + kernel) * width + (u + kernel)];\n            sum = D - C - B + A;\n            avg = sum / size;\n            targetData[v * width + u] = imageData[v * width + u] > avg + 5 ? 0 : 1;\n        }\n    }\n};\n\nfunction cluster(points, threshold, property) {\n    var i,\n        k,\n        cluster,\n        point,\n        clusters = [];\n\n    if (!property) {\n        property = \"rad\";\n    }\n\n    function addToCluster(newPoint) {\n        var found = false;\n        for (k = 0; k < clusters.length; k++) {\n            cluster = clusters[k];\n            if (cluster.fits(newPoint)) {\n                cluster.add(newPoint);\n                found = true;\n            }\n        }\n        return found;\n    }\n\n    // iterate over each cloud\n    for (i = 0; i < points.length; i++) {\n        point = _cluster2.default.createPoint(points[i], i, property);\n        if (!addToCluster(point)) {\n            clusters.push(_cluster2.default.create(point, threshold));\n        }\n    }\n    return clusters;\n};\n\nvar Tracer = exports.Tracer = {\n    trace: function trace(points, vec) {\n        var iteration,\n            maxIterations = 10,\n            top = [],\n            result = [],\n            centerPos = 0,\n            currentPos = 0;\n\n        function trace(idx, forward) {\n            var from,\n                to,\n                toIdx,\n                predictedPos,\n                thresholdX = 1,\n                thresholdY = Math.abs(vec[1] / 10),\n                found = false;\n\n            function match(pos, predicted) {\n                if (pos.x > predicted.x - thresholdX && pos.x < predicted.x + thresholdX && pos.y > predicted.y - thresholdY && pos.y < predicted.y + thresholdY) {\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n\n            // check if the next index is within the vec specifications\n            // if not, check as long as the threshold is met\n\n            from = points[idx];\n            if (forward) {\n                predictedPos = {\n                    x: from.x + vec[0],\n                    y: from.y + vec[1]\n                };\n            } else {\n                predictedPos = {\n                    x: from.x - vec[0],\n                    y: from.y - vec[1]\n                };\n            }\n\n            toIdx = forward ? idx + 1 : idx - 1;\n            to = points[toIdx];\n            while (to && (found = match(to, predictedPos)) !== true && Math.abs(to.y - from.y) < vec[1]) {\n                toIdx = forward ? toIdx + 1 : toIdx - 1;\n                to = points[toIdx];\n            }\n\n            return found ? toIdx : null;\n        }\n\n        for (iteration = 0; iteration < maxIterations; iteration++) {\n            // randomly select point to start with\n            centerPos = Math.floor(Math.random() * points.length);\n\n            // trace forward\n            top = [];\n            currentPos = centerPos;\n            top.push(points[currentPos]);\n            while ((currentPos = trace(currentPos, true)) !== null) {\n                top.push(points[currentPos]);\n            }\n            if (centerPos > 0) {\n                currentPos = centerPos;\n                while ((currentPos = trace(currentPos, false)) !== null) {\n                    top.push(points[currentPos]);\n                }\n            }\n\n            if (top.length > result.length) {\n                result = top;\n            }\n        }\n        return result;\n    }\n};\n\nvar DILATE = exports.DILATE = 1;\nvar ERODE = exports.ERODE = 2;\n\nfunction dilate(inImageWrapper, outImageWrapper) {\n    var v,\n        u,\n        inImageData = inImageWrapper.data,\n        outImageData = outImageWrapper.data,\n        height = inImageWrapper.size.y,\n        width = inImageWrapper.size.x,\n        sum,\n        yStart1,\n        yStart2,\n        xStart1,\n        xStart2;\n\n    for (v = 1; v < height - 1; v++) {\n        for (u = 1; u < width - 1; u++) {\n            yStart1 = v - 1;\n            yStart2 = v + 1;\n            xStart1 = u - 1;\n            xStart2 = u + 1;\n            sum = inImageData[yStart1 * width + xStart1] + inImageData[yStart1 * width + xStart2] + inImageData[v * width + u] + inImageData[yStart2 * width + xStart1] + inImageData[yStart2 * width + xStart2];\n            outImageData[v * width + u] = sum > 0 ? 1 : 0;\n        }\n    }\n};\n\nfunction erode(inImageWrapper, outImageWrapper) {\n    var v,\n        u,\n        inImageData = inImageWrapper.data,\n        outImageData = outImageWrapper.data,\n        height = inImageWrapper.size.y,\n        width = inImageWrapper.size.x,\n        sum,\n        yStart1,\n        yStart2,\n        xStart1,\n        xStart2;\n\n    for (v = 1; v < height - 1; v++) {\n        for (u = 1; u < width - 1; u++) {\n            yStart1 = v - 1;\n            yStart2 = v + 1;\n            xStart1 = u - 1;\n            xStart2 = u + 1;\n            sum = inImageData[yStart1 * width + xStart1] + inImageData[yStart1 * width + xStart2] + inImageData[v * width + u] + inImageData[yStart2 * width + xStart1] + inImageData[yStart2 * width + xStart2];\n            outImageData[v * width + u] = sum === 5 ? 1 : 0;\n        }\n    }\n};\n\nfunction subtract(aImageWrapper, bImageWrapper, resultImageWrapper) {\n    if (!resultImageWrapper) {\n        resultImageWrapper = aImageWrapper;\n    }\n    var length = aImageWrapper.data.length,\n        aImageData = aImageWrapper.data,\n        bImageData = bImageWrapper.data,\n        cImageData = resultImageWrapper.data;\n\n    while (length--) {\n        cImageData[length] = aImageData[length] - bImageData[length];\n    }\n};\n\nfunction bitwiseOr(aImageWrapper, bImageWrapper, resultImageWrapper) {\n    if (!resultImageWrapper) {\n        resultImageWrapper = aImageWrapper;\n    }\n    var length = aImageWrapper.data.length,\n        aImageData = aImageWrapper.data,\n        bImageData = bImageWrapper.data,\n        cImageData = resultImageWrapper.data;\n\n    while (length--) {\n        cImageData[length] = aImageData[length] || bImageData[length];\n    }\n};\n\nfunction countNonZero(imageWrapper) {\n    var length = imageWrapper.data.length,\n        data = imageWrapper.data,\n        sum = 0;\n\n    while (length--) {\n        sum += data[length];\n    }\n    return sum;\n};\n\nfunction topGeneric(list, top, scoreFunc) {\n    var i,\n        minIdx = 0,\n        min = 0,\n        queue = [],\n        score,\n        hit,\n        pos;\n\n    for (i = 0; i < top; i++) {\n        queue[i] = {\n            score: 0,\n            item: null\n        };\n    }\n\n    for (i = 0; i < list.length; i++) {\n        score = scoreFunc.apply(this, [list[i]]);\n        if (score > min) {\n            hit = queue[minIdx];\n            hit.score = score;\n            hit.item = list[i];\n            min = Number.MAX_VALUE;\n            for (pos = 0; pos < top; pos++) {\n                if (queue[pos].score < min) {\n                    min = queue[pos].score;\n                    minIdx = pos;\n                }\n            }\n        }\n    }\n\n    return queue;\n};\n\nfunction grayArrayFromImage(htmlImage, offsetX, ctx, array) {\n    ctx.drawImage(htmlImage, offsetX, 0, htmlImage.width, htmlImage.height);\n    var ctxData = ctx.getImageData(offsetX, 0, htmlImage.width, htmlImage.height).data;\n    computeGray(ctxData, array);\n};\n\nfunction grayArrayFromContext(ctx, size, offset, array) {\n    var ctxData = ctx.getImageData(offset.x, offset.y, size.x, size.y).data;\n    computeGray(ctxData, array);\n};\n\nfunction grayAndHalfSampleFromCanvasData(canvasData, size, outArray) {\n    var topRowIdx = 0;\n    var bottomRowIdx = size.x;\n    var endIdx = Math.floor(canvasData.length / 4);\n    var outWidth = size.x / 2;\n    var outImgIdx = 0;\n    var inWidth = size.x;\n    var i;\n\n    while (bottomRowIdx < endIdx) {\n        for (i = 0; i < outWidth; i++) {\n            outArray[outImgIdx] = (0.299 * canvasData[topRowIdx * 4 + 0] + 0.587 * canvasData[topRowIdx * 4 + 1] + 0.114 * canvasData[topRowIdx * 4 + 2] + (0.299 * canvasData[(topRowIdx + 1) * 4 + 0] + 0.587 * canvasData[(topRowIdx + 1) * 4 + 1] + 0.114 * canvasData[(topRowIdx + 1) * 4 + 2]) + (0.299 * canvasData[bottomRowIdx * 4 + 0] + 0.587 * canvasData[bottomRowIdx * 4 + 1] + 0.114 * canvasData[bottomRowIdx * 4 + 2]) + (0.299 * canvasData[(bottomRowIdx + 1) * 4 + 0] + 0.587 * canvasData[(bottomRowIdx + 1) * 4 + 1] + 0.114 * canvasData[(bottomRowIdx + 1) * 4 + 2])) / 4;\n            outImgIdx++;\n            topRowIdx = topRowIdx + 2;\n            bottomRowIdx = bottomRowIdx + 2;\n        }\n        topRowIdx = topRowIdx + inWidth;\n        bottomRowIdx = bottomRowIdx + inWidth;\n    }\n};\n\nfunction computeGray(imageData, outArray, config) {\n    var l = imageData.length / 4 | 0,\n        i,\n        singleChannel = config && config.singleChannel === true;\n\n    if (singleChannel) {\n        for (i = 0; i < l; i++) {\n            outArray[i] = imageData[i * 4 + 0];\n        }\n    } else {\n        for (i = 0; i < l; i++) {\n            outArray[i] = 0.299 * imageData[i * 4 + 0] + 0.587 * imageData[i * 4 + 1] + 0.114 * imageData[i * 4 + 2];\n        }\n    }\n};\n\nfunction loadImageArray(src, callback, canvas) {\n    if (!canvas) {\n        canvas = document.createElement('canvas');\n    }\n    var img = new Image();\n    img.callback = callback;\n    img.onload = function () {\n        canvas.width = this.width;\n        canvas.height = this.height;\n        var ctx = canvas.getContext('2d');\n        ctx.drawImage(this, 0, 0);\n        var array = new Uint8Array(this.width * this.height);\n        ctx.drawImage(this, 0, 0);\n        var data = ctx.getImageData(0, 0, this.width, this.height).data;\n        computeGray(data, array);\n        this.callback(array, {\n            x: this.width,\n            y: this.height\n        }, this);\n    };\n    img.src = src;\n};\n\n/**\n * @param inImg {ImageWrapper} input image to be sampled\n * @param outImg {ImageWrapper} to be stored in\n */\nfunction halfSample(inImgWrapper, outImgWrapper) {\n    var inImg = inImgWrapper.data;\n    var inWidth = inImgWrapper.size.x;\n    var outImg = outImgWrapper.data;\n    var topRowIdx = 0;\n    var bottomRowIdx = inWidth;\n    var endIdx = inImg.length;\n    var outWidth = inWidth / 2;\n    var outImgIdx = 0;\n    while (bottomRowIdx < endIdx) {\n        for (var i = 0; i < outWidth; i++) {\n            outImg[outImgIdx] = Math.floor((inImg[topRowIdx] + inImg[topRowIdx + 1] + inImg[bottomRowIdx] + inImg[bottomRowIdx + 1]) / 4);\n            outImgIdx++;\n            topRowIdx = topRowIdx + 2;\n            bottomRowIdx = bottomRowIdx + 2;\n        }\n        topRowIdx = topRowIdx + inWidth;\n        bottomRowIdx = bottomRowIdx + inWidth;\n    }\n};\n\nfunction hsv2rgb(hsv, rgb) {\n    var h = hsv[0],\n        s = hsv[1],\n        v = hsv[2],\n        c = v * s,\n        x = c * (1 - Math.abs(h / 60 % 2 - 1)),\n        m = v - c,\n        r = 0,\n        g = 0,\n        b = 0;\n\n    rgb = rgb || [0, 0, 0];\n\n    if (h < 60) {\n        r = c;\n        g = x;\n    } else if (h < 120) {\n        r = x;\n        g = c;\n    } else if (h < 180) {\n        g = c;\n        b = x;\n    } else if (h < 240) {\n        g = x;\n        b = c;\n    } else if (h < 300) {\n        r = x;\n        b = c;\n    } else if (h < 360) {\n        r = c;\n        b = x;\n    }\n    rgb[0] = (r + m) * 255 | 0;\n    rgb[1] = (g + m) * 255 | 0;\n    rgb[2] = (b + m) * 255 | 0;\n    return rgb;\n};\n\nfunction _computeDivisors(n) {\n    var largeDivisors = [],\n        divisors = [],\n        i;\n\n    for (i = 1; i < Math.sqrt(n) + 1; i++) {\n        if (n % i === 0) {\n            divisors.push(i);\n            if (i !== n / i) {\n                largeDivisors.unshift(Math.floor(n / i));\n            }\n        }\n    }\n    return divisors.concat(largeDivisors);\n};\n\nfunction _computeIntersection(arr1, arr2) {\n    var i = 0,\n        j = 0,\n        result = [];\n\n    while (i < arr1.length && j < arr2.length) {\n        if (arr1[i] === arr2[j]) {\n            result.push(arr1[i]);\n            i++;\n            j++;\n        } else if (arr1[i] > arr2[j]) {\n            j++;\n        } else {\n            i++;\n        }\n    }\n    return result;\n};\n\nfunction calculatePatchSize(patchSize, imgSize) {\n    var divisorsX = _computeDivisors(imgSize.x),\n        divisorsY = _computeDivisors(imgSize.y),\n        wideSide = Math.max(imgSize.x, imgSize.y),\n        common = _computeIntersection(divisorsX, divisorsY),\n        nrOfPatchesList = [8, 10, 15, 20, 32, 60, 80],\n        nrOfPatchesMap = {\n        \"x-small\": 5,\n        \"small\": 4,\n        \"medium\": 3,\n        \"large\": 2,\n        \"x-large\": 1\n    },\n        nrOfPatchesIdx = nrOfPatchesMap[patchSize] || nrOfPatchesMap.medium,\n        nrOfPatches = nrOfPatchesList[nrOfPatchesIdx],\n        desiredPatchSize = Math.floor(wideSide / nrOfPatches),\n        optimalPatchSize;\n\n    function findPatchSizeForDivisors(divisors) {\n        var i = 0,\n            found = divisors[Math.floor(divisors.length / 2)];\n\n        while (i < divisors.length - 1 && divisors[i] < desiredPatchSize) {\n            i++;\n        }\n        if (i > 0) {\n            if (Math.abs(divisors[i] - desiredPatchSize) > Math.abs(divisors[i - 1] - desiredPatchSize)) {\n                found = divisors[i - 1];\n            } else {\n                found = divisors[i];\n            }\n        }\n        if (desiredPatchSize / found < nrOfPatchesList[nrOfPatchesIdx + 1] / nrOfPatchesList[nrOfPatchesIdx] && desiredPatchSize / found > nrOfPatchesList[nrOfPatchesIdx - 1] / nrOfPatchesList[nrOfPatchesIdx]) {\n            return { x: found, y: found };\n        }\n        return null;\n    }\n\n    optimalPatchSize = findPatchSizeForDivisors(common);\n    if (!optimalPatchSize) {\n        optimalPatchSize = findPatchSizeForDivisors(_computeDivisors(wideSide));\n        if (!optimalPatchSize) {\n            optimalPatchSize = findPatchSizeForDivisors(_computeDivisors(desiredPatchSize * nrOfPatches));\n        }\n    }\n    return optimalPatchSize;\n};\n\nfunction _parseCSSDimensionValues(value) {\n    var dimension = {\n        value: parseFloat(value),\n        unit: value.indexOf(\"%\") === value.length - 1 ? \"%\" : \"%\"\n    };\n\n    return dimension;\n};\n\nvar _dimensionsConverters = exports._dimensionsConverters = {\n    top: function top(dimension, context) {\n        if (dimension.unit === \"%\") {\n            return Math.floor(context.height * (dimension.value / 100));\n        }\n    },\n    right: function right(dimension, context) {\n        if (dimension.unit === \"%\") {\n            return Math.floor(context.width - context.width * (dimension.value / 100));\n        }\n    },\n    bottom: function bottom(dimension, context) {\n        if (dimension.unit === \"%\") {\n            return Math.floor(context.height - context.height * (dimension.value / 100));\n        }\n    },\n    left: function left(dimension, context) {\n        if (dimension.unit === \"%\") {\n            return Math.floor(context.width * (dimension.value / 100));\n        }\n    }\n};\n\nfunction computeImageArea(inputWidth, inputHeight, area) {\n    var context = { width: inputWidth, height: inputHeight };\n\n    var parsedArea = Object.keys(area).reduce(function (result, key) {\n        var value = area[key],\n            parsed = _parseCSSDimensionValues(value),\n            calculated = _dimensionsConverters[key](parsed, context);\n\n        result[key] = calculated;\n        return result;\n    }, {});\n\n    return {\n        sx: parsedArea.left,\n        sy: parsedArea.top,\n        sw: parsedArea.right - parsedArea.left,\n        sh: parsedArea.bottom - parsedArea.top\n    };\n};\n\n/***/ }),\n/* 20 */\n/***/ (function(module, exports, __nested_webpack_require_57139__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _subImage = __nested_webpack_require_57139__(55);\n\nvar _subImage2 = _interopRequireDefault(_subImage);\n\nvar _cv_utils = __nested_webpack_require_57139__(19);\n\nvar _array_helper = __nested_webpack_require_57139__(3);\n\nvar _array_helper2 = _interopRequireDefault(_array_helper);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar vec2 = {\n    clone: __nested_webpack_require_57139__(7)\n};\n\n/**\n * Represents a basic image combining the data and size.\n * In addition, some methods for manipulation are contained.\n * @param size {x,y} The size of the image in pixel\n * @param data {Array} If given, a flat array containing the pixel data\n * @param ArrayType {Type} If given, the desired DataType of the Array (may be typed/non-typed)\n * @param initialize {Boolean} Indicating if the array should be initialized on creation.\n * @returns {ImageWrapper}\n */\nfunction ImageWrapper(size, data, ArrayType, initialize) {\n    if (!data) {\n        if (ArrayType) {\n            this.data = new ArrayType(size.x * size.y);\n            if (ArrayType === Array && initialize) {\n                _array_helper2.default.init(this.data, 0);\n            }\n        } else {\n            this.data = new Uint8Array(size.x * size.y);\n            if (Uint8Array === Array && initialize) {\n                _array_helper2.default.init(this.data, 0);\n            }\n        }\n    } else {\n        this.data = data;\n    }\n    this.size = size;\n}\n\n/**\n * tests if a position is within the image with a given offset\n * @param imgRef {x, y} The location to test\n * @param border Number the padding value in pixel\n * @returns {Boolean} true if location inside the image's border, false otherwise\n * @see cvd/image.h\n */\nImageWrapper.prototype.inImageWithBorder = function (imgRef, border) {\n    return imgRef.x >= border && imgRef.y >= border && imgRef.x < this.size.x - border && imgRef.y < this.size.y - border;\n};\n\n/**\n * Performs bilinear sampling\n * @param inImg Image to extract sample from\n * @param x the x-coordinate\n * @param y the y-coordinate\n * @returns the sampled value\n * @see cvd/vision.h\n */\nImageWrapper.sample = function (inImg, x, y) {\n    var lx = Math.floor(x);\n    var ly = Math.floor(y);\n    var w = inImg.size.x;\n    var base = ly * inImg.size.x + lx;\n    var a = inImg.data[base + 0];\n    var b = inImg.data[base + 1];\n    var c = inImg.data[base + w];\n    var d = inImg.data[base + w + 1];\n    var e = a - b;\n    x -= lx;\n    y -= ly;\n\n    var result = Math.floor(x * (y * (e - c + d) - e) + y * (c - a) + a);\n    return result;\n};\n\n/**\n * Initializes a given array. Sets each element to zero.\n * @param array {Array} The array to initialize\n */\nImageWrapper.clearArray = function (array) {\n    var l = array.length;\n    while (l--) {\n        array[l] = 0;\n    }\n};\n\n/**\n * Creates a {SubImage} from the current image ({this}).\n * @param from {ImageRef} The position where to start the {SubImage} from. (top-left corner)\n * @param size {ImageRef} The size of the resulting image\n * @returns {SubImage} A shared part of the original image\n */\nImageWrapper.prototype.subImage = function (from, size) {\n    return new _subImage2.default(from, size, this);\n};\n\n/**\n * Creates an {ImageWrapper) and copies the needed underlying image-data area\n * @param imageWrapper {ImageWrapper} The target {ImageWrapper} where the data should be copied\n * @param from {ImageRef} The location where to copy from (top-left location)\n */\nImageWrapper.prototype.subImageAsCopy = function (imageWrapper, from) {\n    var sizeY = imageWrapper.size.y,\n        sizeX = imageWrapper.size.x;\n    var x, y;\n    for (x = 0; x < sizeX; x++) {\n        for (y = 0; y < sizeY; y++) {\n            imageWrapper.data[y * sizeX + x] = this.data[(from.y + y) * this.size.x + from.x + x];\n        }\n    }\n};\n\nImageWrapper.prototype.copyTo = function (imageWrapper) {\n    var length = this.data.length,\n        srcData = this.data,\n        dstData = imageWrapper.data;\n\n    while (length--) {\n        dstData[length] = srcData[length];\n    }\n};\n\n/**\n * Retrieves a given pixel position from the image\n * @param x {Number} The x-position\n * @param y {Number} The y-position\n * @returns {Number} The grayscale value at the pixel-position\n */\nImageWrapper.prototype.get = function (x, y) {\n    return this.data[y * this.size.x + x];\n};\n\n/**\n * Retrieves a given pixel position from the image\n * @param x {Number} The x-position\n * @param y {Number} The y-position\n * @returns {Number} The grayscale value at the pixel-position\n */\nImageWrapper.prototype.getSafe = function (x, y) {\n    var i;\n\n    if (!this.indexMapping) {\n        this.indexMapping = {\n            x: [],\n            y: []\n        };\n        for (i = 0; i < this.size.x; i++) {\n            this.indexMapping.x[i] = i;\n            this.indexMapping.x[i + this.size.x] = i;\n        }\n        for (i = 0; i < this.size.y; i++) {\n            this.indexMapping.y[i] = i;\n            this.indexMapping.y[i + this.size.y] = i;\n        }\n    }\n    return this.data[this.indexMapping.y[y + this.size.y] * this.size.x + this.indexMapping.x[x + this.size.x]];\n};\n\n/**\n * Sets a given pixel position in the image\n * @param x {Number} The x-position\n * @param y {Number} The y-position\n * @param value {Number} The grayscale value to set\n * @returns {ImageWrapper} The Image itself (for possible chaining)\n */\nImageWrapper.prototype.set = function (x, y, value) {\n    this.data[y * this.size.x + x] = value;\n    return this;\n};\n\n/**\n * Sets the border of the image (1 pixel) to zero\n */\nImageWrapper.prototype.zeroBorder = function () {\n    var i,\n        width = this.size.x,\n        height = this.size.y,\n        data = this.data;\n    for (i = 0; i < width; i++) {\n        data[i] = data[(height - 1) * width + i] = 0;\n    }\n    for (i = 1; i < height - 1; i++) {\n        data[i * width] = data[i * width + (width - 1)] = 0;\n    }\n};\n\n/**\n * Inverts a binary image in place\n */\nImageWrapper.prototype.invert = function () {\n    var data = this.data,\n        length = data.length;\n\n    while (length--) {\n        data[length] = data[length] ? 0 : 1;\n    }\n};\n\nImageWrapper.prototype.convolve = function (kernel) {\n    var x,\n        y,\n        kx,\n        ky,\n        kSize = kernel.length / 2 | 0,\n        accu = 0;\n    for (y = 0; y < this.size.y; y++) {\n        for (x = 0; x < this.size.x; x++) {\n            accu = 0;\n            for (ky = -kSize; ky <= kSize; ky++) {\n                for (kx = -kSize; kx <= kSize; kx++) {\n                    accu += kernel[ky + kSize][kx + kSize] * this.getSafe(x + kx, y + ky);\n                }\n            }\n            this.data[y * this.size.x + x] = accu;\n        }\n    }\n};\n\nImageWrapper.prototype.moments = function (labelcount) {\n    var data = this.data,\n        x,\n        y,\n        height = this.size.y,\n        width = this.size.x,\n        val,\n        ysq,\n        labelsum = [],\n        i,\n        label,\n        mu11,\n        mu02,\n        mu20,\n        x_,\n        y_,\n        tmp,\n        result = [],\n        PI = Math.PI,\n        PI_4 = PI / 4;\n\n    if (labelcount <= 0) {\n        return result;\n    }\n\n    for (i = 0; i < labelcount; i++) {\n        labelsum[i] = {\n            m00: 0,\n            m01: 0,\n            m10: 0,\n            m11: 0,\n            m02: 0,\n            m20: 0,\n            theta: 0,\n            rad: 0\n        };\n    }\n\n    for (y = 0; y < height; y++) {\n        ysq = y * y;\n        for (x = 0; x < width; x++) {\n            val = data[y * width + x];\n            if (val > 0) {\n                label = labelsum[val - 1];\n                label.m00 += 1;\n                label.m01 += y;\n                label.m10 += x;\n                label.m11 += x * y;\n                label.m02 += ysq;\n                label.m20 += x * x;\n            }\n        }\n    }\n\n    for (i = 0; i < labelcount; i++) {\n        label = labelsum[i];\n        if (!isNaN(label.m00) && label.m00 !== 0) {\n            x_ = label.m10 / label.m00;\n            y_ = label.m01 / label.m00;\n            mu11 = label.m11 / label.m00 - x_ * y_;\n            mu02 = label.m02 / label.m00 - y_ * y_;\n            mu20 = label.m20 / label.m00 - x_ * x_;\n            tmp = (mu02 - mu20) / (2 * mu11);\n            tmp = 0.5 * Math.atan(tmp) + (mu11 >= 0 ? PI_4 : -PI_4) + PI;\n            label.theta = (tmp * 180 / PI + 90) % 180 - 90;\n            if (label.theta < 0) {\n                label.theta += 180;\n            }\n            label.rad = tmp > PI ? tmp - PI : tmp;\n            label.vec = vec2.clone([Math.cos(tmp), Math.sin(tmp)]);\n            result.push(label);\n        }\n    }\n\n    return result;\n};\n\n/**\n * Displays the {ImageWrapper} in a given canvas\n * @param canvas {Canvas} The canvas element to write to\n * @param scale {Number} Scale which is applied to each pixel-value\n */\nImageWrapper.prototype.show = function (canvas, scale) {\n    var ctx, frame, data, current, pixel, x, y;\n\n    if (!scale) {\n        scale = 1.0;\n    }\n    ctx = canvas.getContext('2d');\n    canvas.width = this.size.x;\n    canvas.height = this.size.y;\n    frame = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    data = frame.data;\n    current = 0;\n    for (y = 0; y < this.size.y; y++) {\n        for (x = 0; x < this.size.x; x++) {\n            pixel = y * this.size.x + x;\n            current = this.get(x, y) * scale;\n            data[pixel * 4 + 0] = current;\n            data[pixel * 4 + 1] = current;\n            data[pixel * 4 + 2] = current;\n            data[pixel * 4 + 3] = 255;\n        }\n    }\n    //frame.data = data;\n    ctx.putImageData(frame, 0, 0);\n};\n\n/**\n * Displays the {SubImage} in a given canvas\n * @param canvas {Canvas} The canvas element to write to\n * @param scale {Number} Scale which is applied to each pixel-value\n */\nImageWrapper.prototype.overlay = function (canvas, scale, from) {\n    if (!scale || scale < 0 || scale > 360) {\n        scale = 360;\n    }\n    var hsv = [0, 1, 1];\n    var rgb = [0, 0, 0];\n    var whiteRgb = [255, 255, 255];\n    var blackRgb = [0, 0, 0];\n    var result = [];\n    var ctx = canvas.getContext('2d');\n    var frame = ctx.getImageData(from.x, from.y, this.size.x, this.size.y);\n    var data = frame.data;\n    var length = this.data.length;\n    while (length--) {\n        hsv[0] = this.data[length] * scale;\n        result = hsv[0] <= 0 ? whiteRgb : hsv[0] >= 360 ? blackRgb : (0, _cv_utils.hsv2rgb)(hsv, rgb);\n        data[length * 4 + 0] = result[0];\n        data[length * 4 + 1] = result[1];\n        data[length * 4 + 2] = result[2];\n        data[length * 4 + 3] = 255;\n    }\n    ctx.putImageData(frame, from.x, from.y);\n};\n\nexports.default = ImageWrapper;\n\n/***/ }),\n/* 21 */\n/***/ (function(module, exports, __nested_webpack_require_67828__) {\n\nvar defineProperty = __nested_webpack_require_67828__(37);\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nmodule.exports = baseAssignValue;\n\n\n/***/ }),\n/* 22 */\n/***/ (function(module, exports, __nested_webpack_require_68526__) {\n\nvar baseIsNative = __nested_webpack_require_68526__(95),\n    getValue = __nested_webpack_require_68526__(118);\n\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\nfunction getNative(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nmodule.exports = getNative;\n\n\n/***/ }),\n/* 23 */\n/***/ (function(module, exports, __nested_webpack_require_69086__) {\n\nvar isSymbol = __nested_webpack_require_69086__(27);\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = toKey;\n\n\n/***/ }),\n/* 24 */\n/***/ (function(module, exports, __nested_webpack_require_69689__) {\n\nvar isFunction = __nested_webpack_require_69689__(25),\n    isLength = __nested_webpack_require_69689__(26);\n\n/**\n * Checks if `value` is array-like. A value is considered array-like if it's\n * not a function and has a `value.length` that's an integer greater than or\n * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is array-like, else `false`.\n * @example\n *\n * _.isArrayLike([1, 2, 3]);\n * // => true\n *\n * _.isArrayLike(document.body.children);\n * // => true\n *\n * _.isArrayLike('abc');\n * // => true\n *\n * _.isArrayLike(_.noop);\n * // => false\n */\nfunction isArrayLike(value) {\n  return value != null && isLength(value.length) && !isFunction(value);\n}\n\nmodule.exports = isArrayLike;\n\n\n/***/ }),\n/* 25 */\n/***/ (function(module, exports, __nested_webpack_require_70599__) {\n\nvar baseGetTag = __nested_webpack_require_70599__(8),\n    isObject = __nested_webpack_require_70599__(0);\n\n/** `Object#toString` result references. */\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\nfunction isFunction(value) {\n  if (!isObject(value)) {\n    return false;\n  }\n  // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n  var tag = baseGetTag(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nmodule.exports = isFunction;\n\n\n/***/ }),\n/* 26 */\n/***/ (function(module, exports) {\n\n/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/**\n * Checks if `value` is a valid array-like length.\n *\n * **Note:** This method is loosely based on\n * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.\n * @example\n *\n * _.isLength(3);\n * // => true\n *\n * _.isLength(Number.MIN_VALUE);\n * // => false\n *\n * _.isLength(Infinity);\n * // => false\n *\n * _.isLength('3');\n * // => false\n */\nfunction isLength(value) {\n  return typeof value == 'number' &&\n    value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;\n}\n\nmodule.exports = isLength;\n\n\n/***/ }),\n/* 27 */\n/***/ (function(module, exports, __nested_webpack_require_72528__) {\n\nvar baseGetTag = __nested_webpack_require_72528__(8),\n    isObjectLike = __nested_webpack_require_72528__(6);\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && baseGetTag(value) == symbolTag);\n}\n\nmodule.exports = isSymbol;\n\n\n/***/ }),\n/* 28 */\n/***/ (function(module, exports, __nested_webpack_require_73283__) {\n\nvar baseMerge = __nested_webpack_require_73283__(98),\n    createAssigner = __nested_webpack_require_73283__(114);\n\n/**\n * This method is like `_.assign` except that it recursively merges own and\n * inherited enumerable string keyed properties of source objects into the\n * destination object. Source properties that resolve to `undefined` are\n * skipped if a destination value exists. Array and plain object properties\n * are merged recursively. Other objects and value types are overridden by\n * assignment. Source objects are applied from left to right. Subsequent\n * sources overwrite property assignments of previous sources.\n *\n * **Note:** This method mutates `object`.\n *\n * @static\n * @memberOf _\n * @since 0.5.0\n * @category Object\n * @param {Object} object The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n * @example\n *\n * var object = {\n *   'a': [{ 'b': 2 }, { 'd': 4 }]\n * };\n *\n * var other = {\n *   'a': [{ 'c': 3 }, { 'e': 5 }]\n * };\n *\n * _.merge(object, other);\n * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }\n */\nvar merge = createAssigner(function(object, source, srcIndex) {\n  baseMerge(object, source, srcIndex);\n});\n\nmodule.exports = merge;\n\n\n/***/ }),\n/* 29 */\n/***/ (function(module, exports) {\n\nmodule.exports = function(module) {\r\n\tif(!module.webpackPolyfill) {\r\n\t\tmodule.deprecate = function() {};\r\n\t\tmodule.paths = [];\r\n\t\t// module.parent = undefined by default\r\n\t\tif(!module.children) module.children = [];\r\n\t\tObject.defineProperty(module, \"loaded\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.l;\r\n\t\t\t}\r\n\t\t});\r\n\t\tObject.defineProperty(module, \"id\", {\r\n\t\t\tenumerable: true,\r\n\t\t\tget: function() {\r\n\t\t\t\treturn module.i;\r\n\t\t\t}\r\n\t\t});\r\n\t\tmodule.webpackPolyfill = 1;\r\n\t}\r\n\treturn module;\r\n};\r\n\n\n/***/ }),\n/* 30 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n/**\n * http://www.codeproject.com/Tips/407172/Connected-Component-Labeling-and-Vectorization\n */\nvar Tracer = {\n    searchDirections: [[0, 1], [1, 1], [1, 0], [1, -1], [0, -1], [-1, -1], [-1, 0], [-1, 1]],\n    create: function create(imageWrapper, labelWrapper) {\n        var imageData = imageWrapper.data,\n            labelData = labelWrapper.data,\n            searchDirections = this.searchDirections,\n            width = imageWrapper.size.x,\n            pos;\n\n        function _trace(current, color, label, edgelabel) {\n            var i, y, x;\n\n            for (i = 0; i < 7; i++) {\n                y = current.cy + searchDirections[current.dir][0];\n                x = current.cx + searchDirections[current.dir][1];\n                pos = y * width + x;\n                if (imageData[pos] === color && (labelData[pos] === 0 || labelData[pos] === label)) {\n                    labelData[pos] = label;\n                    current.cy = y;\n                    current.cx = x;\n                    return true;\n                } else {\n                    if (labelData[pos] === 0) {\n                        labelData[pos] = edgelabel;\n                    }\n                    current.dir = (current.dir + 1) % 8;\n                }\n            }\n            return false;\n        }\n\n        function vertex2D(x, y, dir) {\n            return {\n                dir: dir,\n                x: x,\n                y: y,\n                next: null,\n                prev: null\n            };\n        }\n\n        function _contourTracing(sy, sx, label, color, edgelabel) {\n            var Fv = null,\n                Cv,\n                P,\n                ldir,\n                current = {\n                cx: sx,\n                cy: sy,\n                dir: 0\n            };\n\n            if (_trace(current, color, label, edgelabel)) {\n                Fv = vertex2D(sx, sy, current.dir);\n                Cv = Fv;\n                ldir = current.dir;\n                P = vertex2D(current.cx, current.cy, 0);\n                P.prev = Cv;\n                Cv.next = P;\n                P.next = null;\n                Cv = P;\n                do {\n                    current.dir = (current.dir + 6) % 8;\n                    _trace(current, color, label, edgelabel);\n                    if (ldir !== current.dir) {\n                        Cv.dir = current.dir;\n                        P = vertex2D(current.cx, current.cy, 0);\n                        P.prev = Cv;\n                        Cv.next = P;\n                        P.next = null;\n                        Cv = P;\n                    } else {\n                        Cv.dir = ldir;\n                        Cv.x = current.cx;\n                        Cv.y = current.cy;\n                    }\n                    ldir = current.dir;\n                } while (current.cx !== sx || current.cy !== sy);\n                Fv.prev = Cv.prev;\n                Cv.prev.next = Fv;\n            }\n            return Fv;\n        }\n\n        return {\n            trace: function trace(current, color, label, edgelabel) {\n                return _trace(current, color, label, edgelabel);\n            },\n            contourTracing: function contourTracing(sy, sx, label, color, edgelabel) {\n                return _contourTracing(sy, sx, label, color, edgelabel);\n            }\n        };\n    }\n};\n\nexports.default = Tracer;\n\n/***/ }),\n/* 31 */\n/***/ (function(module, exports, __nested_webpack_require_78610__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _barcode_reader = __nested_webpack_require_78610__(1);\n\nvar _barcode_reader2 = _interopRequireDefault(_barcode_reader);\n\nvar _array_helper = __nested_webpack_require_78610__(3);\n\nvar _array_helper2 = _interopRequireDefault(_array_helper);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction Code39Reader() {\n    _barcode_reader2.default.call(this);\n}\n\nvar properties = {\n    ALPHABETH_STRING: { value: \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. *$/+%\" },\n    ALPHABET: { value: [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 45, 46, 32, 42, 36, 47, 43, 37] },\n    CHARACTER_ENCODINGS: { value: [0x034, 0x121, 0x061, 0x160, 0x031, 0x130, 0x070, 0x025, 0x124, 0x064, 0x109, 0x049, 0x148, 0x019, 0x118, 0x058, 0x00D, 0x10C, 0x04C, 0x01C, 0x103, 0x043, 0x142, 0x013, 0x112, 0x052, 0x007, 0x106, 0x046, 0x016, 0x181, 0x0C1, 0x1C0, 0x091, 0x190, 0x0D0, 0x085, 0x184, 0x0C4, 0x094, 0x0A8, 0x0A2, 0x08A, 0x02A] },\n    ASTERISK: { value: 0x094 },\n    FORMAT: { value: \"code_39\", writeable: false }\n};\n\nCode39Reader.prototype = Object.create(_barcode_reader2.default.prototype, properties);\nCode39Reader.prototype.constructor = Code39Reader;\n\nCode39Reader.prototype._decode = function () {\n    var self = this,\n        counters = [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        result = [],\n        start = self._findStart(),\n        decodedChar,\n        lastStart,\n        pattern,\n        nextStart;\n\n    if (!start) {\n        return null;\n    }\n    nextStart = self._nextSet(self._row, start.end);\n\n    do {\n        counters = self._toCounters(nextStart, counters);\n        pattern = self._toPattern(counters);\n        if (pattern < 0) {\n            return null;\n        }\n        decodedChar = self._patternToChar(pattern);\n        if (decodedChar < 0) {\n            return null;\n        }\n        result.push(decodedChar);\n        lastStart = nextStart;\n        nextStart += _array_helper2.default.sum(counters);\n        nextStart = self._nextSet(self._row, nextStart);\n    } while (decodedChar !== '*');\n    result.pop();\n\n    if (!result.length) {\n        return null;\n    }\n\n    if (!self._verifyTrailingWhitespace(lastStart, nextStart, counters)) {\n        return null;\n    }\n\n    return {\n        code: result.join(\"\"),\n        start: start.start,\n        end: nextStart,\n        startInfo: start,\n        decodedCodes: result\n    };\n};\n\nCode39Reader.prototype._verifyTrailingWhitespace = function (lastStart, nextStart, counters) {\n    var trailingWhitespaceEnd,\n        patternSize = _array_helper2.default.sum(counters);\n\n    trailingWhitespaceEnd = nextStart - lastStart - patternSize;\n    if (trailingWhitespaceEnd * 3 >= patternSize) {\n        return true;\n    }\n    return false;\n};\n\nCode39Reader.prototype._patternToChar = function (pattern) {\n    var i,\n        self = this;\n\n    for (i = 0; i < self.CHARACTER_ENCODINGS.length; i++) {\n        if (self.CHARACTER_ENCODINGS[i] === pattern) {\n            return String.fromCharCode(self.ALPHABET[i]);\n        }\n    }\n    return -1;\n};\n\nCode39Reader.prototype._findNextWidth = function (counters, current) {\n    var i,\n        minWidth = Number.MAX_VALUE;\n\n    for (i = 0; i < counters.length; i++) {\n        if (counters[i] < minWidth && counters[i] > current) {\n            minWidth = counters[i];\n        }\n    }\n\n    return minWidth;\n};\n\nCode39Reader.prototype._toPattern = function (counters) {\n    var numCounters = counters.length,\n        maxNarrowWidth = 0,\n        numWideBars = numCounters,\n        wideBarWidth = 0,\n        self = this,\n        pattern,\n        i;\n\n    while (numWideBars > 3) {\n        maxNarrowWidth = self._findNextWidth(counters, maxNarrowWidth);\n        numWideBars = 0;\n        pattern = 0;\n        for (i = 0; i < numCounters; i++) {\n            if (counters[i] > maxNarrowWidth) {\n                pattern |= 1 << numCounters - 1 - i;\n                numWideBars++;\n                wideBarWidth += counters[i];\n            }\n        }\n\n        if (numWideBars === 3) {\n            for (i = 0; i < numCounters && numWideBars > 0; i++) {\n                if (counters[i] > maxNarrowWidth) {\n                    numWideBars--;\n                    if (counters[i] * 2 >= wideBarWidth) {\n                        return -1;\n                    }\n                }\n            }\n            return pattern;\n        }\n    }\n    return -1;\n};\n\nCode39Reader.prototype._findStart = function () {\n    var self = this,\n        offset = self._nextSet(self._row),\n        patternStart = offset,\n        counter = [0, 0, 0, 0, 0, 0, 0, 0, 0],\n        counterPos = 0,\n        isWhite = false,\n        i,\n        j,\n        whiteSpaceMustStart;\n\n    for (i = offset; i < self._row.length; i++) {\n        if (self._row[i] ^ isWhite) {\n            counter[counterPos]++;\n        } else {\n            if (counterPos === counter.length - 1) {\n                // find start pattern\n                if (self._toPattern(counter) === self.ASTERISK) {\n                    whiteSpaceMustStart = Math.floor(Math.max(0, patternStart - (i - patternStart) / 4));\n                    if (self._matchRange(whiteSpaceMustStart, patternStart, 0)) {\n                        return {\n                            start: patternStart,\n                            end: i\n                        };\n                    }\n                }\n\n                patternStart += counter[0] + counter[1];\n                for (j = 0; j < 7; j++) {\n                    counter[j] = counter[j + 2];\n                }\n                counter[7] = 0;\n                counter[8] = 0;\n                counterPos--;\n            } else {\n                counterPos++;\n            }\n            counter[counterPos] = 1;\n            isWhite = !isWhite;\n        }\n    }\n    return null;\n};\n\nexports.default = Code39Reader;\n\n/***/ }),\n/* 32 */\n/***/ (function(module, exports) {\n\nmodule.exports = dot\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nfunction dot(a, b) {\n    return a[0] * b[0] + a[1] * b[1]\n}\n\n/***/ }),\n/* 33 */\n/***/ (function(module, exports, __nested_webpack_require_84912__) {\n\nvar getNative = __nested_webpack_require_84912__(22),\n    root = __nested_webpack_require_84912__(5);\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nmodule.exports = Map;\n\n\n/***/ }),\n/* 34 */\n/***/ (function(module, exports, __nested_webpack_require_85189__) {\n\nvar mapCacheClear = __nested_webpack_require_85189__(136),\n    mapCacheDelete = __nested_webpack_require_85189__(137),\n    mapCacheGet = __nested_webpack_require_85189__(138),\n    mapCacheHas = __nested_webpack_require_85189__(139),\n    mapCacheSet = __nested_webpack_require_85189__(140);\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nmodule.exports = MapCache;\n\n\n/***/ }),\n/* 35 */\n/***/ (function(module, exports, __nested_webpack_require_86126__) {\n\nvar baseAssignValue = __nested_webpack_require_86126__(21),\n    eq = __nested_webpack_require_86126__(17);\n\n/**\n * This function is like `assignValue` except that it doesn't assign\n * `undefined` values.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignMergeValue(object, key, value) {\n  if ((value !== undefined && !eq(object[key], value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignMergeValue;\n\n\n/***/ }),\n/* 36 */\n/***/ (function(module, exports, __nested_webpack_require_86788__) {\n\nvar baseAssignValue = __nested_webpack_require_86788__(21),\n    eq = __nested_webpack_require_86788__(17);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignValue;\n\n\n/***/ }),\n/* 37 */\n/***/ (function(module, exports, __nested_webpack_require_87767__) {\n\nvar getNative = __nested_webpack_require_87767__(22);\n\nvar defineProperty = (function() {\n  try {\n    var func = getNative(Object, 'defineProperty');\n    func({}, '', {});\n    return func;\n  } catch (e) {}\n}());\n\nmodule.exports = defineProperty;\n\n\n/***/ }),\n/* 38 */\n/***/ (function(module, exports, __nested_webpack_require_88078__) {\n\n/* WEBPACK VAR INJECTION */(function(global) {/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\nmodule.exports = freeGlobal;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __nested_webpack_require_88078__(47)))\n\n/***/ }),\n/* 39 */\n/***/ (function(module, exports, __nested_webpack_require_88444__) {\n\nvar overArg = __nested_webpack_require_88444__(145);\n\n/** Built-in value references. */\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\n\nmodule.exports = getPrototype;\n\n\n/***/ }),\n/* 40 */\n/***/ (function(module, exports) {\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Checks if `value` is likely a prototype object.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.\n */\nfunction isPrototype(value) {\n  var Ctor = value && value.constructor,\n      proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;\n\n  return value === proto;\n}\n\nmodule.exports = isPrototype;\n\n\n/***/ }),\n/* 41 */\n/***/ (function(module, exports, __nested_webpack_require_89225__) {\n\nvar apply = __nested_webpack_require_89225__(85);\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * A specialized version of `baseRest` which transforms the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @param {Function} transform The rest array transform.\n * @returns {Function} Returns the new function.\n */\nfunction overRest(func, start, transform) {\n  start = nativeMax(start === undefined ? (func.length - 1) : start, 0);\n  return function() {\n    var args = arguments,\n        index = -1,\n        length = nativeMax(args.length - start, 0),\n        array = Array(length);\n\n    while (++index < length) {\n      array[index] = args[start + index];\n    }\n    index = -1;\n    var otherArgs = Array(start + 1);\n    while (++index < start) {\n      otherArgs[index] = args[index];\n    }\n    otherArgs[start] = transform(array);\n    return apply(func, this, otherArgs);\n  };\n}\n\nmodule.exports = overRest;\n\n\n/***/ }),\n/* 42 */\n/***/ (function(module, exports, __nested_webpack_require_90403__) {\n\nvar baseSetToString = __nested_webpack_require_90403__(104),\n    shortOut = __nested_webpack_require_90403__(146);\n\n/**\n * Sets the `toString` method of `func` to return `string`.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar setToString = shortOut(baseSetToString);\n\nmodule.exports = setToString;\n\n\n/***/ }),\n/* 43 */\n/***/ (function(module, exports) {\n\n/**\n * This method returns the first argument it receives.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Util\n * @param {*} value Any value.\n * @returns {*} Returns `value`.\n * @example\n *\n * var object = { 'a': 1 };\n *\n * console.log(_.identity(object) === object);\n * // => true\n */\nfunction identity(value) {\n  return value;\n}\n\nmodule.exports = identity;\n\n\n/***/ }),\n/* 44 */\n/***/ (function(module, exports, __nested_webpack_require_91297__) {\n\n/* WEBPACK VAR INJECTION */(function(module) {var root = __nested_webpack_require_91297__(5),\n    stubFalse = __nested_webpack_require_91297__(161);\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;\n\n/**\n * Checks if `value` is a buffer.\n *\n * @static\n * @memberOf _\n * @since 4.3.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.\n * @example\n *\n * _.isBuffer(new Buffer(2));\n * // => true\n *\n * _.isBuffer(new Uint8Array(2));\n * // => false\n */\nvar isBuffer = nativeIsBuffer || stubFalse;\n\nmodule.exports = isBuffer;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __nested_webpack_require_91297__(29)(module)))\n\n/***/ }),\n/* 45 */\n/***/ (function(module, exports, __nested_webpack_require_92618__) {\n\nvar baseIsTypedArray = __nested_webpack_require_92618__(96),\n    baseUnary = __nested_webpack_require_92618__(107),\n    nodeUtil = __nested_webpack_require_92618__(143);\n\n/* Node.js helper references. */\nvar nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;\n\n/**\n * Checks if `value` is classified as a typed array.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n * @example\n *\n * _.isTypedArray(new Uint8Array);\n * // => true\n *\n * _.isTypedArray([]);\n * // => false\n */\nvar isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;\n\nmodule.exports = isTypedArray;\n\n\n/***/ }),\n/* 46 */\n/***/ (function(module, exports, __nested_webpack_require_93387__) {\n\nvar arrayLikeKeys = __nested_webpack_require_93387__(86),\n    baseKeysIn = __nested_webpack_require_93387__(97),\n    isArrayLike = __nested_webpack_require_93387__(24);\n\n/**\n * Creates an array of the own and inherited enumerable property names of `object`.\n *\n * **Note:** Non-object values are coerced to objects.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.keysIn(new Foo);\n * // => ['a', 'b', 'c'] (iteration order is not guaranteed)\n */\nfunction keysIn(object) {\n  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);\n}\n\nmodule.exports = keysIn;\n\n\n/***/ }),\n/* 47 */\n/***/ (function(module, exports) {\n\nvar g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n/***/ }),\n/* 48 */\n/***/ (function(module, exports, __nested_webpack_require_94803__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _merge2 = __nested_webpack_require_94803__(28);\n\nvar _merge3 = _interopRequireDefault(_merge2);\n\nvar _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; // eslint-disable-line no-unused-vars\n\n\nvar _typedefs = __nested_webpack_require_94803__(56);\n\nvar _typedefs2 = _interopRequireDefault(_typedefs);\n\nvar _image_wrapper = __nested_webpack_require_94803__(20);\n\nvar _image_wrapper2 = _interopRequireDefault(_image_wrapper);\n\nvar _barcode_locator = __nested_webpack_require_94803__(62);\n\nvar _barcode_locator2 = _interopRequireDefault(_barcode_locator);\n\nvar _barcode_decoder = __nested_webpack_require_94803__(59);\n\nvar _barcode_decoder2 = _interopRequireDefault(_barcode_decoder);\n\nvar _events = __nested_webpack_require_94803__(53);\n\nvar _events2 = _interopRequireDefault(_events);\n\nvar _camera_access = __nested_webpack_require_94803__(61);\n\nvar _camera_access2 = _interopRequireDefault(_camera_access);\n\nvar _image_debug = __nested_webpack_require_94803__(9);\n\nvar _image_debug2 = _interopRequireDefault(_image_debug);\n\nvar _result_collector = __nested_webpack_require_94803__(51);\n\nvar _result_collector2 = _interopRequireDefault(_result_collector);\n\nvar _config2 = __nested_webpack_require_94803__(57);\n\nvar _config3 = _interopRequireDefault(_config2);\n\nvar _input_stream = __nested_webpack_require_94803__(50);\n\nvar _input_stream2 = _interopRequireDefault(_input_stream);\n\nvar _frame_grabber = __nested_webpack_require_94803__(49);\n\nvar _frame_grabber2 = _interopRequireDefault(_frame_grabber);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar vec2 = {\n    clone: __nested_webpack_require_94803__(7)\n};\n\nvar _inputStream,\n    _framegrabber,\n    _stopped,\n    _canvasContainer = {\n    ctx: {\n        image: null,\n        overlay: null\n    },\n    dom: {\n        image: null,\n        overlay: null\n    }\n},\n    _inputImageWrapper,\n    _boxSize,\n    _decoder,\n    _workerPool = [],\n    _onUIThread = true,\n    _resultCollector,\n    _config = {};\n\nfunction initializeData(imageWrapper) {\n    initBuffers(imageWrapper);\n    _decoder = _barcode_decoder2.default.create(_config.decoder, _inputImageWrapper);\n}\n\nfunction initInputStream(cb) {\n    var video;\n    if (_config.inputStream.type === \"VideoStream\") {\n        video = document.createElement(\"video\");\n        _inputStream = _input_stream2.default.createVideoStream(video);\n    } else if (_config.inputStream.type === \"ImageStream\") {\n        _inputStream = _input_stream2.default.createImageStream();\n    } else if (_config.inputStream.type === \"LiveStream\") {\n        var $viewport = getViewPort();\n        if ($viewport) {\n            video = $viewport.querySelector(\"video\");\n            if (!video) {\n                video = document.createElement(\"video\");\n                $viewport.appendChild(video);\n            }\n        }\n        _inputStream = _input_stream2.default.createLiveStream(video);\n        _camera_access2.default.request(video, _config.inputStream.constraints).then(function () {\n            _inputStream.trigger(\"canrecord\");\n        }).catch(function (err) {\n            return cb(err);\n        });\n    }\n\n    _inputStream.setAttribute(\"preload\", \"auto\");\n    _inputStream.setInputStream(_config.inputStream);\n    _inputStream.addEventListener(\"canrecord\", canRecord.bind(undefined, cb));\n}\n\nfunction getViewPort() {\n    var target = _config.inputStream.target;\n    // Check if target is already a DOM element\n    if (target && target.nodeName && target.nodeType === 1) {\n        return target;\n    } else {\n        // Use '#interactive.viewport' as a fallback selector (backwards compatibility)\n        var selector = typeof target === 'string' ? target : '#interactive.viewport';\n        return document.querySelector(selector);\n    }\n}\n\nfunction canRecord(cb) {\n    _barcode_locator2.default.checkImageConstraints(_inputStream, _config.locator);\n    initCanvas(_config);\n    _framegrabber = _frame_grabber2.default.create(_inputStream, _canvasContainer.dom.image);\n\n    adjustWorkerPool(_config.numOfWorkers, function () {\n        if (_config.numOfWorkers === 0) {\n            initializeData();\n        }\n        ready(cb);\n    });\n}\n\nfunction ready(cb) {\n    _inputStream.play();\n    cb();\n}\n\nfunction initCanvas() {\n    if (typeof document !== \"undefined\") {\n        var $viewport = getViewPort();\n        _canvasContainer.dom.image = document.querySelector(\"canvas.imgBuffer\");\n        if (!_canvasContainer.dom.image) {\n            _canvasContainer.dom.image = document.createElement(\"canvas\");\n            _canvasContainer.dom.image.className = \"imgBuffer\";\n            if ($viewport && _config.inputStream.type === \"ImageStream\") {\n                $viewport.appendChild(_canvasContainer.dom.image);\n            }\n        }\n        _canvasContainer.ctx.image = _canvasContainer.dom.image.getContext(\"2d\");\n        _canvasContainer.dom.image.width = _inputStream.getCanvasSize().x;\n        _canvasContainer.dom.image.height = _inputStream.getCanvasSize().y;\n\n        _canvasContainer.dom.overlay = document.querySelector(\"canvas.drawingBuffer\");\n        if (!_canvasContainer.dom.overlay) {\n            _canvasContainer.dom.overlay = document.createElement(\"canvas\");\n            _canvasContainer.dom.overlay.className = \"drawingBuffer\";\n            if ($viewport) {\n                $viewport.appendChild(_canvasContainer.dom.overlay);\n            }\n            var clearFix = document.createElement(\"br\");\n            clearFix.setAttribute(\"clear\", \"all\");\n            if ($viewport) {\n                $viewport.appendChild(clearFix);\n            }\n        }\n        _canvasContainer.ctx.overlay = _canvasContainer.dom.overlay.getContext(\"2d\");\n        _canvasContainer.dom.overlay.width = _inputStream.getCanvasSize().x;\n        _canvasContainer.dom.overlay.height = _inputStream.getCanvasSize().y;\n    }\n}\n\nfunction initBuffers(imageWrapper) {\n    if (imageWrapper) {\n        _inputImageWrapper = imageWrapper;\n    } else {\n        _inputImageWrapper = new _image_wrapper2.default({\n            x: _inputStream.getWidth(),\n            y: _inputStream.getHeight()\n        });\n    }\n\n    if (false) {}\n    _boxSize = [vec2.clone([0, 0]), vec2.clone([0, _inputImageWrapper.size.y]), vec2.clone([_inputImageWrapper.size.x, _inputImageWrapper.size.y]), vec2.clone([_inputImageWrapper.size.x, 0])];\n    _barcode_locator2.default.init(_inputImageWrapper, _config.locator);\n}\n\nfunction getBoundingBoxes() {\n    if (_config.locate) {\n        return _barcode_locator2.default.locate();\n    } else {\n        return [[vec2.clone(_boxSize[0]), vec2.clone(_boxSize[1]), vec2.clone(_boxSize[2]), vec2.clone(_boxSize[3])]];\n    }\n}\n\nfunction transformResult(result) {\n    var topRight = _inputStream.getTopRight(),\n        xOffset = topRight.x,\n        yOffset = topRight.y,\n        i;\n\n    if (xOffset === 0 && yOffset === 0) {\n        return;\n    }\n\n    if (result.barcodes) {\n        for (i = 0; i < result.barcodes.length; i++) {\n            transformResult(result.barcodes[i]);\n        }\n    }\n\n    if (result.line && result.line.length === 2) {\n        moveLine(result.line);\n    }\n\n    if (result.box) {\n        moveBox(result.box);\n    }\n\n    if (result.boxes && result.boxes.length > 0) {\n        for (i = 0; i < result.boxes.length; i++) {\n            moveBox(result.boxes[i]);\n        }\n    }\n\n    function moveBox(box) {\n        var corner = box.length;\n\n        while (corner--) {\n            box[corner][0] += xOffset;\n            box[corner][1] += yOffset;\n        }\n    }\n\n    function moveLine(line) {\n        line[0].x += xOffset;\n        line[0].y += yOffset;\n        line[1].x += xOffset;\n        line[1].y += yOffset;\n    }\n}\n\nfunction addResult(result, imageData) {\n    if (!imageData || !_resultCollector) {\n        return;\n    }\n\n    if (result.barcodes) {\n        result.barcodes.filter(function (barcode) {\n            return barcode.codeResult;\n        }).forEach(function (barcode) {\n            return addResult(barcode, imageData);\n        });\n    } else if (result.codeResult) {\n        _resultCollector.addResult(imageData, _inputStream.getCanvasSize(), result.codeResult);\n    }\n}\n\nfunction hasCodeResult(result) {\n    return result && (result.barcodes ? result.barcodes.some(function (barcode) {\n        return barcode.codeResult;\n    }) : result.codeResult);\n}\n\nfunction publishResult(result, imageData) {\n    var resultToPublish = result;\n\n    if (result && _onUIThread) {\n        transformResult(result);\n        addResult(result, imageData);\n        resultToPublish = result.barcodes || result;\n    }\n\n    _events2.default.publish(\"processed\", resultToPublish);\n    if (hasCodeResult(result)) {\n        _events2.default.publish(\"detected\", resultToPublish);\n    }\n}\n\nfunction locateAndDecode() {\n    var result, boxes;\n\n    boxes = getBoundingBoxes();\n    if (boxes) {\n        result = _decoder.decodeFromBoundingBoxes(boxes);\n        result = result || {};\n        result.boxes = boxes;\n        publishResult(result, _inputImageWrapper.data);\n    } else {\n        publishResult();\n    }\n}\n\nfunction update() {\n    var availableWorker;\n\n    if (_onUIThread) {\n        if (_workerPool.length > 0) {\n            availableWorker = _workerPool.filter(function (workerThread) {\n                return !workerThread.busy;\n            })[0];\n            if (availableWorker) {\n                _framegrabber.attachData(availableWorker.imageData);\n            } else {\n                return; // all workers are busy\n            }\n        } else {\n            _framegrabber.attachData(_inputImageWrapper.data);\n        }\n        if (_framegrabber.grab()) {\n            if (availableWorker) {\n                availableWorker.busy = true;\n                availableWorker.worker.postMessage({\n                    cmd: 'process',\n                    imageData: availableWorker.imageData\n                }, [availableWorker.imageData.buffer]);\n            } else {\n                locateAndDecode();\n            }\n        }\n    } else {\n        locateAndDecode();\n    }\n}\n\nfunction startContinuousUpdate() {\n    var next = null,\n        delay = 1000 / (_config.frequency || 60);\n\n    _stopped = false;\n    (function frame(timestamp) {\n        next = next || timestamp;\n        if (!_stopped) {\n            if (timestamp >= next) {\n                next += delay;\n                update();\n            }\n            window.requestAnimFrame(frame);\n        }\n    })(performance.now());\n}\n\nfunction _start() {\n    if (_onUIThread && _config.inputStream.type === \"LiveStream\") {\n        startContinuousUpdate();\n    } else {\n        update();\n    }\n}\n\nfunction initWorker(cb) {\n    var blobURL,\n        workerThread = {\n        worker: undefined,\n        imageData: new Uint8Array(_inputStream.getWidth() * _inputStream.getHeight()),\n        busy: true\n    };\n\n    blobURL = generateWorkerBlob();\n    workerThread.worker = new Worker(blobURL);\n\n    workerThread.worker.onmessage = function (e) {\n        if (e.data.event === 'initialized') {\n            URL.revokeObjectURL(blobURL);\n            workerThread.busy = false;\n            workerThread.imageData = new Uint8Array(e.data.imageData);\n            if (false) {}\n            return cb(workerThread);\n        } else if (e.data.event === 'processed') {\n            workerThread.imageData = new Uint8Array(e.data.imageData);\n            workerThread.busy = false;\n            publishResult(e.data.result, workerThread.imageData);\n        } else if (e.data.event === 'error') {\n            if (false) {}\n        }\n    };\n\n    workerThread.worker.postMessage({\n        cmd: 'init',\n        size: { x: _inputStream.getWidth(), y: _inputStream.getHeight() },\n        imageData: workerThread.imageData,\n        config: configForWorker(_config)\n    }, [workerThread.imageData.buffer]);\n}\n\nfunction configForWorker(config) {\n    return _extends({}, config, {\n        inputStream: _extends({}, config.inputStream, {\n            target: null\n        })\n    });\n}\n\nfunction workerInterface(factory) {\n    /* eslint-disable no-undef*/\n    if (factory) {\n        var Quagga = factory().default;\n        if (!Quagga) {\n            self.postMessage({ 'event': 'error', message: 'Quagga could not be created' });\n            return;\n        }\n    }\n    var imageWrapper;\n\n    self.onmessage = function (e) {\n        if (e.data.cmd === 'init') {\n            var config = e.data.config;\n            config.numOfWorkers = 0;\n            imageWrapper = new Quagga.ImageWrapper({\n                x: e.data.size.x,\n                y: e.data.size.y\n            }, new Uint8Array(e.data.imageData));\n            Quagga.init(config, ready, imageWrapper);\n            Quagga.onProcessed(onProcessed);\n        } else if (e.data.cmd === 'process') {\n            imageWrapper.data = new Uint8Array(e.data.imageData);\n            Quagga.start();\n        } else if (e.data.cmd === 'setReaders') {\n            Quagga.setReaders(e.data.readers);\n        }\n    };\n\n    function onProcessed(result) {\n        self.postMessage({\n            'event': 'processed',\n            imageData: imageWrapper.data,\n            result: result\n        }, [imageWrapper.data.buffer]);\n    }\n\n    function ready() {\n        // eslint-disable-line\n        self.postMessage({ 'event': 'initialized', imageData: imageWrapper.data }, [imageWrapper.data.buffer]);\n    }\n\n    /* eslint-enable */\n}\n\nfunction generateWorkerBlob() {\n    var blob, factorySource;\n\n    /* jshint ignore:start */\n    if (typeof __factorySource__ !== 'undefined') {\n        factorySource = __factorySource__; // eslint-disable-line no-undef\n    }\n    /* jshint ignore:end */\n\n    blob = new Blob(['(' + workerInterface.toString() + ')(' + factorySource + ');'], { type: 'text/javascript' });\n\n    return window.URL.createObjectURL(blob);\n}\n\nfunction _setReaders(readers) {\n    if (_decoder) {\n        _decoder.setReaders(readers);\n    } else if (_onUIThread && _workerPool.length > 0) {\n        _workerPool.forEach(function (workerThread) {\n            workerThread.worker.postMessage({ cmd: 'setReaders', readers: readers });\n        });\n    }\n}\n\nfunction adjustWorkerPool(capacity, cb) {\n    var increaseBy = capacity - _workerPool.length;\n    if (increaseBy === 0) {\n        return cb && cb();\n    }\n    if (increaseBy < 0) {\n        var workersToTerminate = _workerPool.slice(increaseBy);\n        workersToTerminate.forEach(function (workerThread) {\n            workerThread.worker.terminate();\n            if (false) {}\n        });\n        _workerPool = _workerPool.slice(0, increaseBy);\n        return cb && cb();\n    } else {\n        var workerInitialized = function workerInitialized(workerThread) {\n            _workerPool.push(workerThread);\n            if (_workerPool.length >= capacity) {\n                cb && cb();\n            }\n        };\n\n        for (var i = 0; i < increaseBy; i++) {\n            initWorker(workerInitialized);\n        }\n    }\n}\n\nexports.default = {\n    init: function init(config, cb, imageWrapper) {\n        _config = (0, _merge3.default)({}, _config3.default, config);\n        if (imageWrapper) {\n            _onUIThread = false;\n            initializeData(imageWrapper);\n            return cb();\n        } else {\n            initInputStream(cb);\n        }\n    },\n    start: function start() {\n        _start();\n    },\n    stop: function stop() {\n        _stopped = true;\n        adjustWorkerPool(0);\n        if (_config.inputStream.type === \"LiveStream\") {\n            _camera_access2.default.release();\n            _inputStream.clearEventHandlers();\n        }\n    },\n    pause: function pause() {\n        _stopped = true;\n    },\n    onDetected: function onDetected(callback) {\n        _events2.default.subscribe(\"detected\", callback);\n    },\n    offDetected: function offDetected(callback) {\n        _events2.default.unsubscribe(\"detected\", callback);\n    },\n    onProcessed: function onProcessed(callback) {\n        _events2.default.subscribe(\"processed\", callback);\n    },\n    offProcessed: function offProcessed(callback) {\n        _events2.default.unsubscribe(\"processed\", callback);\n    },\n    setReaders: function setReaders(readers) {\n        _setReaders(readers);\n    },\n    registerResultCollector: function registerResultCollector(resultCollector) {\n        if (resultCollector && typeof resultCollector.addResult === 'function') {\n            _resultCollector = resultCollector;\n        }\n    },\n    canvas: _canvasContainer,\n    decodeSingle: function decodeSingle(config, resultCallback) {\n        var _this = this;\n\n        config = (0, _merge3.default)({\n            inputStream: {\n                type: \"ImageStream\",\n                sequence: false,\n                size: 800,\n                src: config.src\n            },\n            numOfWorkers:   false ? 0 : 1,\n            locator: {\n                halfSample: false\n            }\n        }, config);\n        this.init(config, function () {\n            _events2.default.once(\"processed\", function (result) {\n                _this.stop();\n                resultCallback.call(null, result);\n            }, true);\n            _start();\n        });\n    },\n    ImageWrapper: _image_wrapper2.default,\n    ImageDebug: _image_debug2.default,\n    ResultCollector: _result_collector2.default,\n    CameraAccess: _camera_access2.default\n};\n\n/***/ }),\n/* 49 */\n/***/ (function(module, exports, __nested_webpack_require_112481__) {\n\n\"use strict\";\n\n\nvar CVUtils = __nested_webpack_require_112481__(19),\n    Ndarray = __nested_webpack_require_112481__(165),\n    Interp2D = __nested_webpack_require_112481__(166).d2;\n\nvar FrameGrabber = {};\n\nFrameGrabber.create = function (inputStream) {\n    var _that = {},\n        _streamConfig = inputStream.getConfig(),\n        _video_size = CVUtils.imageRef(inputStream.getRealWidth(), inputStream.getRealHeight()),\n        _canvasSize = inputStream.getCanvasSize(),\n        _size = CVUtils.imageRef(inputStream.getWidth(), inputStream.getHeight()),\n        _topRight = inputStream.getTopRight(),\n        _data = new Uint8Array(_size.x * _size.y),\n        _grayData = new Uint8Array(_video_size.x * _video_size.y),\n        _canvasData = new Uint8Array(_canvasSize.x * _canvasSize.y),\n        _grayImageArray = Ndarray(_grayData, [_video_size.y, _video_size.x]).transpose(1, 0),\n        _canvasImageArray = Ndarray(_canvasData, [_canvasSize.y, _canvasSize.x]).transpose(1, 0),\n        _targetImageArray = _canvasImageArray.hi(_topRight.x + _size.x, _topRight.y + _size.y).lo(_topRight.x, _topRight.y),\n        _stepSizeX = _video_size.x / _canvasSize.x,\n        _stepSizeY = _video_size.y / _canvasSize.y;\n\n    console.log(\"FrameGrabber\", JSON.stringify({\n        videoSize: _grayImageArray.shape,\n        canvasSize: _canvasImageArray.shape,\n        stepSize: [_stepSizeX, _stepSizeY],\n        size: _targetImageArray.shape,\n        topRight: _topRight\n    }));\n\n    /**\n     * Uses the given array as frame-buffer\n     */\n    _that.attachData = function (data) {\n        _data = data;\n    };\n\n    /**\n     * Returns the used frame-buffer\n     */\n    _that.getData = function () {\n        return _data;\n    };\n\n    /**\n     * Fetches a frame from the input-stream and puts into the frame-buffer.\n     * The image-data is converted to gray-scale and then half-sampled if configured.\n     */\n    _that.grab = function () {\n        var frame = inputStream.getFrame();\n\n        if (frame) {\n            this.scaleAndCrop(frame);\n            return true;\n        } else {\n            return false;\n        }\n    };\n\n    _that.scaleAndCrop = function (frame) {\n        var x, y;\n\n        // 1. compute full-sized gray image\n        CVUtils.computeGray(frame.data, _grayData);\n\n        // 2. interpolate\n        for (y = 0; y < _canvasSize.y; y++) {\n            for (x = 0; x < _canvasSize.x; x++) {\n                _canvasImageArray.set(x, y, Interp2D(_grayImageArray, x * _stepSizeX, y * _stepSizeY) | 0);\n            }\n        }\n\n        // targetImageArray must be equal to targetSize\n        if (_targetImageArray.shape[0] !== _size.x || _targetImageArray.shape[1] !== _size.y) {\n            throw new Error(\"Shapes do not match!\");\n        }\n\n        // 3. crop\n        for (y = 0; y < _size.y; y++) {\n            for (x = 0; x < _size.x; x++) {\n                _data[y * _size.x + x] = _targetImageArray.get(x, y);\n            }\n        }\n    }, _that.getSize = function () {\n        return _size;\n    };\n\n    return _that;\n};\n\nmodule.exports = FrameGrabber;\n\n/***/ }),\n/* 50 */\n/***/ (function(module, exports, __nested_webpack_require_115578__) {\n\n\"use strict\";\n\n\nvar GetPixels = __nested_webpack_require_115578__(164);\n\nvar InputStream = {};\n\nInputStream.createImageStream = function () {\n    var that = {};\n    var _config = null;\n\n    var width = 0,\n        height = 0,\n        frameIdx = 0,\n        paused = true,\n        loaded = false,\n        frame = null,\n        baseUrl,\n        ended = false,\n        size,\n        calculatedWidth,\n        calculatedHeight,\n        _eventNames = ['canrecord', 'ended'],\n        _eventHandlers = {},\n        _topRight = { x: 0, y: 0 },\n        _canvasSize = { x: 0, y: 0 };\n\n    function loadImages() {\n        loaded = false;\n        GetPixels(baseUrl, _config.mime, function (err, pixels) {\n            if (err) {\n                console.log(err);\n                exit(1);\n            }\n            loaded = true;\n            console.log(pixels.shape);\n            frame = pixels;\n            width = pixels.shape[0];\n            height = pixels.shape[1];\n            calculatedWidth = _config.size ? width / height > 1 ? _config.size : Math.floor(width / height * _config.size) : width;\n            calculatedHeight = _config.size ? width / height > 1 ? Math.floor(height / width * _config.size) : _config.size : height;\n\n            _canvasSize.x = calculatedWidth;\n            _canvasSize.y = calculatedHeight;\n\n            setTimeout(function () {\n                publishEvent(\"canrecord\", []);\n            }, 0);\n        });\n    }\n\n    function publishEvent(eventName, args) {\n        var j,\n            handlers = _eventHandlers[eventName];\n\n        if (handlers && handlers.length > 0) {\n            for (j = 0; j < handlers.length; j++) {\n                handlers[j].apply(that, args);\n            }\n        }\n    }\n\n    that.trigger = publishEvent;\n\n    that.getWidth = function () {\n        return calculatedWidth;\n    };\n\n    that.getHeight = function () {\n        return calculatedHeight;\n    };\n\n    that.setWidth = function (width) {\n        calculatedWidth = width;\n    };\n\n    that.setHeight = function (height) {\n        calculatedHeight = height;\n    };\n\n    that.getRealWidth = function () {\n        return width;\n    };\n\n    that.getRealHeight = function () {\n        return height;\n    };\n\n    that.setInputStream = function (stream) {\n        _config = stream;\n        baseUrl = _config.src;\n        size = 1;\n        loadImages();\n    };\n\n    that.ended = function () {\n        return ended;\n    };\n\n    that.setAttribute = function () {};\n\n    that.getConfig = function () {\n        return _config;\n    };\n\n    that.pause = function () {\n        paused = true;\n    };\n\n    that.play = function () {\n        paused = false;\n    };\n\n    that.setCurrentTime = function (time) {\n        frameIdx = time;\n    };\n\n    that.addEventListener = function (event, f) {\n        if (_eventNames.indexOf(event) !== -1) {\n            if (!_eventHandlers[event]) {\n                _eventHandlers[event] = [];\n            }\n            _eventHandlers[event].push(f);\n        }\n    };\n\n    that.setTopRight = function (topRight) {\n        _topRight.x = topRight.x;\n        _topRight.y = topRight.y;\n    };\n\n    that.getTopRight = function () {\n        return _topRight;\n    };\n\n    that.setCanvasSize = function (size) {\n        _canvasSize.x = size.x;\n        _canvasSize.y = size.y;\n    };\n\n    that.getCanvasSize = function () {\n        return _canvasSize;\n    };\n\n    that.getFrame = function () {\n        if (!loaded) {\n            return null;\n        }\n        return frame;\n    };\n\n    return that;\n};\n\nmodule.exports = InputStream;\n\n/***/ }),\n/* 51 */\n/***/ (function(module, exports, __nested_webpack_require_119186__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _image_debug = __nested_webpack_require_119186__(9);\n\nvar _image_debug2 = _interopRequireDefault(_image_debug);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction contains(codeResult, list) {\n    if (list) {\n        return list.some(function (item) {\n            return Object.keys(item).every(function (key) {\n                return item[key] === codeResult[key];\n            });\n        });\n    }\n    return false;\n}\n\nfunction passesFilter(codeResult, filter) {\n    if (typeof filter === 'function') {\n        return filter(codeResult);\n    }\n    return true;\n}\n\nexports.default = {\n    create: function create(config) {\n        var canvas = document.createElement(\"canvas\"),\n            ctx = canvas.getContext(\"2d\"),\n            results = [],\n            capacity = config.capacity || 20,\n            capture = config.capture === true;\n\n        function matchesConstraints(codeResult) {\n            return capacity && codeResult && !contains(codeResult, config.blacklist) && passesFilter(codeResult, config.filter);\n        }\n\n        return {\n            addResult: function addResult(data, imageSize, codeResult) {\n                var result = {};\n\n                if (matchesConstraints(codeResult)) {\n                    capacity--;\n                    result.codeResult = codeResult;\n                    if (capture) {\n                        canvas.width = imageSize.x;\n                        canvas.height = imageSize.y;\n                        _image_debug2.default.drawImage(data, imageSize, ctx);\n                        result.frame = canvas.toDataURL();\n                    }\n                    results.push(result);\n                }\n            },\n            getResults: function getResults() {\n                return results;\n            }\n        };\n    }\n};\n\n/***/ }),\n/* 52 */\n/***/ (function(module, exports, __nested_webpack_require_121135__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nvar vec2 = {\n    clone: __nested_webpack_require_121135__(7),\n    dot: __nested_webpack_require_121135__(32)\n};\n/**\n * Creates a cluster for grouping similar orientations of datapoints\n */\nexports.default = {\n    create: function create(point, threshold) {\n        var points = [],\n            center = {\n            rad: 0,\n            vec: vec2.clone([0, 0])\n        },\n            pointMap = {};\n\n        function init() {\n            _add(point);\n            updateCenter();\n        }\n\n        function _add(pointToAdd) {\n            pointMap[pointToAdd.id] = pointToAdd;\n            points.push(pointToAdd);\n        }\n\n        function updateCenter() {\n            var i,\n                sum = 0;\n            for (i = 0; i < points.length; i++) {\n                sum += points[i].rad;\n            }\n            center.rad = sum / points.length;\n            center.vec = vec2.clone([Math.cos(center.rad), Math.sin(center.rad)]);\n        }\n\n        init();\n\n        return {\n            add: function add(pointToAdd) {\n                if (!pointMap[pointToAdd.id]) {\n                    _add(pointToAdd);\n                    updateCenter();\n                }\n            },\n            fits: function fits(otherPoint) {\n                // check cosine similarity to center-angle\n                var similarity = Math.abs(vec2.dot(otherPoint.point.vec, center.vec));\n                if (similarity > threshold) {\n                    return true;\n                }\n                return false;\n            },\n            getPoints: function getPoints() {\n                return points;\n            },\n            getCenter: function getCenter() {\n                return center;\n            }\n        };\n    },\n    createPoint: function createPoint(newPoint, id, property) {\n        return {\n            rad: newPoint[property],\n            point: newPoint,\n            id: id\n        };\n    }\n};\n\n/***/ }),\n/* 53 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nexports.default = function () {\n    var events = {};\n\n    function getEvent(eventName) {\n        if (!events[eventName]) {\n            events[eventName] = {\n                subscribers: []\n            };\n        }\n        return events[eventName];\n    }\n\n    function clearEvents() {\n        events = {};\n    }\n\n    function publishSubscription(subscription, data) {\n        if (subscription.async) {\n            setTimeout(function () {\n                subscription.callback(data);\n            }, 4);\n        } else {\n            subscription.callback(data);\n        }\n    }\n\n    function _subscribe(event, callback, async) {\n        var subscription;\n\n        if (typeof callback === \"function\") {\n            subscription = {\n                callback: callback,\n                async: async\n            };\n        } else {\n            subscription = callback;\n            if (!subscription.callback) {\n                throw \"Callback was not specified on options\";\n            }\n        }\n\n        getEvent(event).subscribers.push(subscription);\n    }\n\n    return {\n        subscribe: function subscribe(event, callback, async) {\n            return _subscribe(event, callback, async);\n        },\n        publish: function publish(eventName, data) {\n            var event = getEvent(eventName),\n                subscribers = event.subscribers;\n\n            // Publish one-time subscriptions\n            subscribers.filter(function (subscriber) {\n                return !!subscriber.once;\n            }).forEach(function (subscriber) {\n                publishSubscription(subscriber, data);\n            });\n\n            // remove them from the subscriber\n            event.subscribers = subscribers.filter(function (subscriber) {\n                return !subscriber.once;\n            });\n\n            // publish the rest\n            event.subscribers.forEach(function (subscriber) {\n                publishSubscription(subscriber, data);\n            });\n        },\n        once: function once(event, callback, async) {\n            _subscribe(event, {\n                callback: callback,\n                async: async,\n                once: true\n            });\n        },\n        unsubscribe: function unsubscribe(eventName, callback) {\n            var event;\n\n            if (eventName) {\n                event = getEvent(eventName);\n                if (event && callback) {\n                    event.subscribers = event.subscribers.filter(function (subscriber) {\n                        return subscriber.callback !== callback;\n                    });\n                } else {\n                    event.subscribers = [];\n                }\n            } else {\n                clearEvents();\n            }\n        }\n    };\n}();\n\n/***/ }),\n/* 54 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nexports.enumerateDevices = enumerateDevices;\nexports.getUserMedia = getUserMedia;\nfunction enumerateDevices() {\n    if (navigator.mediaDevices && typeof navigator.mediaDevices.enumerateDevices === 'function') {\n        return navigator.mediaDevices.enumerateDevices();\n    }\n    return Promise.reject(new Error('enumerateDevices is not defined'));\n};\n\nfunction getUserMedia(constraints) {\n    if (navigator.mediaDevices && typeof navigator.mediaDevices.getUserMedia === 'function') {\n        return navigator.mediaDevices.getUserMedia(constraints);\n    }\n    return Promise.reject(new Error('getUserMedia is not defined'));\n}\n\n/***/ }),\n/* 55 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n/**\n * Construct representing a part of another {ImageWrapper}. Shares data\n * between the parent and the child.\n * @param from {ImageRef} The position where to start the {SubImage} from. (top-left corner)\n * @param size {ImageRef} The size of the resulting image\n * @param I {ImageWrapper} The {ImageWrapper} to share from\n * @returns {SubImage} A shared part of the original image\n */\nfunction SubImage(from, size, I) {\n    if (!I) {\n        I = {\n            data: null,\n            size: size\n        };\n    }\n    this.data = I.data;\n    this.originalSize = I.size;\n    this.I = I;\n\n    this.from = from;\n    this.size = size;\n}\n\n/**\n * Displays the {SubImage} in a given canvas\n * @param canvas {Canvas} The canvas element to write to\n * @param scale {Number} Scale which is applied to each pixel-value\n */\nSubImage.prototype.show = function (canvas, scale) {\n    var ctx, frame, data, current, y, x, pixel;\n\n    if (!scale) {\n        scale = 1.0;\n    }\n    ctx = canvas.getContext('2d');\n    canvas.width = this.size.x;\n    canvas.height = this.size.y;\n    frame = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    data = frame.data;\n    current = 0;\n    for (y = 0; y < this.size.y; y++) {\n        for (x = 0; x < this.size.x; x++) {\n            pixel = y * this.size.x + x;\n            current = this.get(x, y) * scale;\n            data[pixel * 4 + 0] = current;\n            data[pixel * 4 + 1] = current;\n            data[pixel * 4 + 2] = current;\n            data[pixel * 4 + 3] = 255;\n        }\n    }\n    frame.data = data;\n    ctx.putImageData(frame, 0, 0);\n};\n\n/**\n * Retrieves a given pixel position from the {SubImage}\n * @param x {Number} The x-position\n * @param y {Number} The y-position\n * @returns {Number} The grayscale value at the pixel-position\n */\nSubImage.prototype.get = function (x, y) {\n    return this.data[(this.from.y + y) * this.originalSize.x + this.from.x + x];\n};\n\n/**\n * Updates the underlying data from a given {ImageWrapper}\n * @param image {ImageWrapper} The updated image\n */\nSubImage.prototype.updateData = function (image) {\n    this.originalSize = image.size;\n    this.data = image.data;\n};\n\n/**\n * Updates the position of the shared area\n * @param from {x,y} The new location\n * @returns {SubImage} returns {this} for possible chaining\n */\nSubImage.prototype.updateFrom = function (from) {\n    this.from = from;\n    return this;\n};\n\nexports.default = SubImage;\n\n/***/ }),\n/* 56 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\n/*\n * typedefs.js\n * Normalizes browser-specific prefixes\n */\n\nif (typeof window !== 'undefined') {\n    window.requestAnimFrame = function () {\n        return window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame || function ( /* function FrameRequestCallback */callback) {\n            window.setTimeout(callback, 1000 / 60);\n        };\n    }();\n}\nMath.imul = Math.imul || function (a, b) {\n    var ah = a >>> 16 & 0xffff,\n        al = a & 0xffff,\n        bh = b >>> 16 & 0xffff,\n        bl = b & 0xffff;\n    // the shift by 0 fixes the sign on the high part\n    // the final |0 converts the unsigned value into a signed value\n    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;\n};\n\nif (typeof Object.assign !== 'function') {\n    Object.assign = function (target) {\n        // .length of function is 2\n        'use strict';\n\n        if (target === null) {\n            // TypeError if undefined or null\n            throw new TypeError('Cannot convert undefined or null to object');\n        }\n\n        var to = Object(target);\n\n        for (var index = 1; index < arguments.length; index++) {\n            var nextSource = arguments[index];\n\n            if (nextSource !== null) {\n                // Skip over if undefined or null\n                for (var nextKey in nextSource) {\n                    // Avoid bugs when hasOwnProperty is shadowed\n                    if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n                        to[nextKey] = nextSource[nextKey];\n                    }\n                }\n            }\n        }\n        return to;\n    };\n}\n\n/***/ }),\n/* 57 */\n/***/ (function(module, exports, __nested_webpack_require_131047__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\nvar config = void 0;\n\nif (false) {} else if (true) {\n    config = __nested_webpack_require_131047__(58);\n} else {}\n\nexports.default = config;\n\n/***/ }),\n/* 58 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nmodule.exports = {\n    inputStream: {\n        type: \"ImageStream\",\n        sequence: false,\n        size: 800,\n        area: {\n            top: \"0%\",\n            right: \"0%\",\n            left: \"0%\",\n            bottom: \"0%\"\n        },\n        singleChannel: false // true: only the red color-channel is read\n    },\n    locate: true,\n    numOfWorkers: 0,\n    decoder: {\n        readers: ['code_128_reader']\n    },\n    locator: {\n        halfSample: true,\n        patchSize: \"medium\" // x-small, small, medium, large, x-large\n    }\n};\n\n/***/ }),\n/* 59 */\n/***/ (function(module, exports, __nested_webpack_require_132006__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _bresenham = __nested_webpack_require_132006__(60);\n\nvar _bresenham2 = _interopRequireDefault(_bresenham);\n\nvar _image_debug = __nested_webpack_require_132006__(9);\n\nvar _image_debug2 = _interopRequireDefault(_image_debug);\n\nvar _code_128_reader = __nested_webpack_require_132006__(67);\n\nvar _code_128_reader2 = _interopRequireDefault(_code_128_reader);\n\nvar _ean_reader = __nested_webpack_require_132006__(4);\n\nvar _ean_reader2 = _interopRequireDefault(_ean_reader);\n\nvar _code_39_reader = __nested_webpack_require_132006__(31);\n\nvar _code_39_reader2 = _interopRequireDefault(_code_39_reader);\n\nvar _code_39_vin_reader = __nested_webpack_require_132006__(68);\n\nvar _code_39_vin_reader2 = _interopRequireDefault(_code_39_vin_reader);\n\nvar _codabar_reader = __nested_webpack_require_132006__(66);\n\nvar _codabar_reader2 = _interopRequireDefault(_codabar_reader);\n\nvar _upc_reader = __nested_webpack_require_132006__(75);\n\nvar _upc_reader2 = _interopRequireDefault(_upc_reader);\n\nvar _ean_8_reader = __nested_webpack_require_132006__(72);\n\nvar _ean_8_reader2 = _interopRequireDefault(_ean_8_reader);\n\nvar _ean_2_reader = __nested_webpack_require_132006__(70);\n\nvar _ean_2_reader2 = _interopRequireDefault(_ean_2_reader);\n\nvar _ean_5_reader = __nested_webpack_require_132006__(71);\n\nvar _ean_5_reader2 = _interopRequireDefault(_ean_5_reader);\n\nvar _upc_e_reader = __nested_webpack_require_132006__(74);\n\nvar _upc_e_reader2 = _interopRequireDefault(_upc_e_reader);\n\nvar _i2of5_reader = __nested_webpack_require_132006__(73);\n\nvar _i2of5_reader2 = _interopRequireDefault(_i2of5_reader);\n\nvar _of5_reader = __nested_webpack_require_132006__(65);\n\nvar _of5_reader2 = _interopRequireDefault(_of5_reader);\n\nvar _code_93_reader = __nested_webpack_require_132006__(69);\n\nvar _code_93_reader2 = _interopRequireDefault(_code_93_reader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar READERS = {\n    code_128_reader: _code_128_reader2.default,\n    ean_reader: _ean_reader2.default,\n    ean_5_reader: _ean_5_reader2.default,\n    ean_2_reader: _ean_2_reader2.default,\n    ean_8_reader: _ean_8_reader2.default,\n    code_39_reader: _code_39_reader2.default,\n    code_39_vin_reader: _code_39_vin_reader2.default,\n    codabar_reader: _codabar_reader2.default,\n    upc_reader: _upc_reader2.default,\n    upc_e_reader: _upc_e_reader2.default,\n    i2of5_reader: _i2of5_reader2.default,\n    '2of5_reader': _of5_reader2.default,\n    code_93_reader: _code_93_reader2.default\n};\nexports.default = {\n    create: function create(config, inputImageWrapper) {\n        var _canvas = {\n            ctx: {\n                frequency: null,\n                pattern: null,\n                overlay: null\n            },\n            dom: {\n                frequency: null,\n                pattern: null,\n                overlay: null\n            }\n        },\n            _barcodeReaders = [];\n\n        initCanvas();\n        initReaders();\n        initConfig();\n\n        function initCanvas() {\n            if (false) { var $debug; }\n        }\n\n        function initReaders() {\n            config.readers.forEach(function (readerConfig) {\n                var reader,\n                    configuration = {},\n                    supplements = [];\n\n                if ((typeof readerConfig === 'undefined' ? 'undefined' : _typeof(readerConfig)) === 'object') {\n                    reader = readerConfig.format;\n                    configuration = readerConfig.config;\n                } else if (typeof readerConfig === 'string') {\n                    reader = readerConfig;\n                }\n                if (false) {}\n                if (configuration.supplements) {\n                    supplements = configuration.supplements.map(function (supplement) {\n                        return new READERS[supplement]();\n                    });\n                }\n                _barcodeReaders.push(new READERS[reader](configuration, supplements));\n            });\n            if (false) {}\n        }\n\n        function initConfig() {\n            if (false) { var i, vis; }\n        }\n\n        /**\n         * extend the line on both ends\n         * @param {Array} line\n         * @param {Number} angle\n         */\n        function getExtendedLine(line, angle, ext) {\n            function extendLine(amount) {\n                var extension = {\n                    y: amount * Math.sin(angle),\n                    x: amount * Math.cos(angle)\n                };\n\n                line[0].y -= extension.y;\n                line[0].x -= extension.x;\n                line[1].y += extension.y;\n                line[1].x += extension.x;\n            }\n\n            // check if inside image\n            extendLine(ext);\n            while (ext > 1 && (!inputImageWrapper.inImageWithBorder(line[0], 0) || !inputImageWrapper.inImageWithBorder(line[1], 0))) {\n                ext -= Math.ceil(ext / 2);\n                extendLine(-ext);\n            }\n            return line;\n        }\n\n        function getLine(box) {\n            return [{\n                x: (box[1][0] - box[0][0]) / 2 + box[0][0],\n                y: (box[1][1] - box[0][1]) / 2 + box[0][1]\n            }, {\n                x: (box[3][0] - box[2][0]) / 2 + box[2][0],\n                y: (box[3][1] - box[2][1]) / 2 + box[2][1]\n            }];\n        }\n\n        function tryDecode(line) {\n            var result = null,\n                i,\n                barcodeLine = _bresenham2.default.getBarcodeLine(inputImageWrapper, line[0], line[1]);\n\n            if (false) {}\n\n            _bresenham2.default.toBinaryLine(barcodeLine);\n\n            if (false) {}\n\n            for (i = 0; i < _barcodeReaders.length && result === null; i++) {\n                result = _barcodeReaders[i].decodePattern(barcodeLine.line);\n            }\n            if (result === null) {\n                return null;\n            }\n            return {\n                codeResult: result,\n                barcodeLine: barcodeLine\n            };\n        }\n\n        /**\n         * This method slices the given area apart and tries to detect a barcode-pattern\n         * for each slice. It returns the decoded barcode, or null if nothing was found\n         * @param {Array} box\n         * @param {Array} line\n         * @param {Number} lineAngle\n         */\n        function tryDecodeBruteForce(box, line, lineAngle) {\n            var sideLength = Math.sqrt(Math.pow(box[1][0] - box[0][0], 2) + Math.pow(box[1][1] - box[0][1], 2)),\n                i,\n                slices = 16,\n                result = null,\n                dir,\n                extension,\n                xdir = Math.sin(lineAngle),\n                ydir = Math.cos(lineAngle);\n\n            for (i = 1; i < slices && result === null; i++) {\n                // move line perpendicular to angle\n                dir = sideLength / slices * i * (i % 2 === 0 ? -1 : 1);\n                extension = {\n                    y: dir * xdir,\n                    x: dir * ydir\n                };\n                line[0].y += extension.x;\n                line[0].x -= extension.y;\n                line[1].y += extension.x;\n                line[1].x -= extension.y;\n\n                result = tryDecode(line);\n            }\n            return result;\n        }\n\n        function getLineLength(line) {\n            return Math.sqrt(Math.pow(Math.abs(line[1].y - line[0].y), 2) + Math.pow(Math.abs(line[1].x - line[0].x), 2));\n        }\n\n        /**\n         * With the help of the configured readers (Code128 or EAN) this function tries to detect a\n         * valid barcode pattern within the given area.\n         * @param {Object} box The area to search in\n         * @returns {Object} the result {codeResult, line, angle, pattern, threshold}\n         */\n        function _decodeFromBoundingBox(box) {\n            var line,\n                lineAngle,\n                ctx = _canvas.ctx.overlay,\n                result,\n                lineLength;\n\n            if (false) {}\n\n            line = getLine(box);\n            lineLength = getLineLength(line);\n            lineAngle = Math.atan2(line[1].y - line[0].y, line[1].x - line[0].x);\n            line = getExtendedLine(line, lineAngle, Math.floor(lineLength * 0.1));\n            if (line === null) {\n                return null;\n            }\n\n            result = tryDecode(line);\n            if (result === null) {\n                result = tryDecodeBruteForce(box, line, lineAngle);\n            }\n\n            if (result === null) {\n                return null;\n            }\n\n            if (false) {}\n\n            return {\n                codeResult: result.codeResult,\n                line: line,\n                angle: lineAngle,\n                pattern: result.barcodeLine.line,\n                threshold: result.barcodeLine.threshold\n            };\n        }\n\n        return {\n            decodeFromBoundingBox: function decodeFromBoundingBox(box) {\n                return _decodeFromBoundingBox(box);\n            },\n            decodeFromBoundingBoxes: function decodeFromBoundingBoxes(boxes) {\n                var i,\n                    result,\n                    barcodes = [],\n                    multiple = config.multiple;\n\n                for (i = 0; i < boxes.length; i++) {\n                    var box = boxes[i];\n                    result = _decodeFromBoundingBox(box) || {};\n                    result.box = box;\n\n                    if (multiple) {\n                        barcodes.push(result);\n                    } else if (result.codeResult) {\n                        return result;\n                    }\n                }\n\n                if (multiple) {\n                    return {\n                        barcodes: barcodes\n                    };\n                }\n            },\n            setReaders: function setReaders(readers) {\n                config.readers = readers;\n                _barcodeReaders.length = 0;\n                initReaders();\n            }\n        };\n    }\n};\n\n/***/ }),\n/* 60 */\n/***/ (function(module, exports, __nested_webpack_require_145002__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _image_wrapper = __nested_webpack_require_145002__(20);\n\nvar _image_wrapper2 = _interopRequireDefault(_image_wrapper);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar Bresenham = {};\n\nvar Slope = {\n    DIR: {\n        UP: 1,\n        DOWN: -1\n    }\n};\n/**\n * Scans a line of the given image from point p1 to p2 and returns a result object containing\n * gray-scale values (0-255) of the underlying pixels in addition to the min\n * and max values.\n * @param {Object} imageWrapper\n * @param {Object} p1 The start point {x,y}\n * @param {Object} p2 The end point {x,y}\n * @returns {line, min, max}\n */\nBresenham.getBarcodeLine = function (imageWrapper, p1, p2) {\n    var x0 = p1.x | 0,\n        y0 = p1.y | 0,\n        x1 = p2.x | 0,\n        y1 = p2.y | 0,\n        steep = Math.abs(y1 - y0) > Math.abs(x1 - x0),\n        deltax,\n        deltay,\n        error,\n        ystep,\n        y,\n        tmp,\n        x,\n        line = [],\n        imageData = imageWrapper.data,\n        width = imageWrapper.size.x,\n        sum = 0,\n        val,\n        min = 255,\n        max = 0;\n\n    function read(a, b) {\n        val = imageData[b * width + a];\n        sum += val;\n        min = val < min ? val : min;\n        max = val > max ? val : max;\n        line.push(val);\n    }\n\n    if (steep) {\n        tmp = x0;\n        x0 = y0;\n        y0 = tmp;\n\n        tmp = x1;\n        x1 = y1;\n        y1 = tmp;\n    }\n    if (x0 > x1) {\n        tmp = x0;\n        x0 = x1;\n        x1 = tmp;\n\n        tmp = y0;\n        y0 = y1;\n        y1 = tmp;\n    }\n    deltax = x1 - x0;\n    deltay = Math.abs(y1 - y0);\n    error = deltax / 2 | 0;\n    y = y0;\n    ystep = y0 < y1 ? 1 : -1;\n    for (x = x0; x < x1; x++) {\n        if (steep) {\n            read(y, x);\n        } else {\n            read(x, y);\n        }\n        error = error - deltay;\n        if (error < 0) {\n            y = y + ystep;\n            error = error + deltax;\n        }\n    }\n\n    return {\n        line: line,\n        min: min,\n        max: max\n    };\n};\n\n/**\n * Converts the result from getBarcodeLine into a binary representation\n * also considering the frequency and slope of the signal for more robust results\n * @param {Object} result {line, min, max}\n */\nBresenham.toBinaryLine = function (result) {\n    var min = result.min,\n        max = result.max,\n        line = result.line,\n        slope,\n        slope2,\n        center = min + (max - min) / 2,\n        extrema = [],\n        currentDir,\n        dir,\n        threshold = (max - min) / 12,\n        rThreshold = -threshold,\n        i,\n        j;\n\n    // 1. find extrema\n    currentDir = line[0] > center ? Slope.DIR.UP : Slope.DIR.DOWN;\n    extrema.push({\n        pos: 0,\n        val: line[0]\n    });\n    for (i = 0; i < line.length - 2; i++) {\n        slope = line[i + 1] - line[i];\n        slope2 = line[i + 2] - line[i + 1];\n        if (slope + slope2 < rThreshold && line[i + 1] < center * 1.5) {\n            dir = Slope.DIR.DOWN;\n        } else if (slope + slope2 > threshold && line[i + 1] > center * 0.5) {\n            dir = Slope.DIR.UP;\n        } else {\n            dir = currentDir;\n        }\n\n        if (currentDir !== dir) {\n            extrema.push({\n                pos: i,\n                val: line[i]\n            });\n            currentDir = dir;\n        }\n    }\n    extrema.push({\n        pos: line.length,\n        val: line[line.length - 1]\n    });\n\n    for (j = extrema[0].pos; j < extrema[1].pos; j++) {\n        line[j] = line[j] > center ? 0 : 1;\n    }\n\n    // iterate over extrema and convert to binary based on avg between minmax\n    for (i = 1; i < extrema.length - 1; i++) {\n        if (extrema[i + 1].val > extrema[i].val) {\n            threshold = extrema[i].val + (extrema[i + 1].val - extrema[i].val) / 3 * 2 | 0;\n        } else {\n            threshold = extrema[i + 1].val + (extrema[i].val - extrema[i + 1].val) / 3 | 0;\n        }\n\n        for (j = extrema[i].pos; j < extrema[i + 1].pos; j++) {\n            line[j] = line[j] > threshold ? 0 : 1;\n        }\n    }\n\n    return {\n        line: line,\n        threshold: threshold\n    };\n};\n\n/**\n * Used for development only\n */\nBresenham.debug = {\n    printFrequency: function printFrequency(line, canvas) {\n        var i,\n            ctx = canvas.getContext(\"2d\");\n        canvas.width = line.length;\n        canvas.height = 256;\n\n        ctx.beginPath();\n        ctx.strokeStyle = \"blue\";\n        for (i = 0; i < line.length; i++) {\n            ctx.moveTo(i, 255);\n            ctx.lineTo(i, 255 - line[i]);\n        }\n        ctx.stroke();\n        ctx.closePath();\n    },\n\n    printPattern: function printPattern(line, canvas) {\n        var ctx = canvas.getContext(\"2d\"),\n            i;\n\n        canvas.width = line.length;\n        ctx.fillColor = \"black\";\n        for (i = 0; i < line.length; i++) {\n            if (line[i] === 1) {\n                ctx.fillRect(i, 0, 1, 100);\n            }\n        }\n    }\n};\n\nexports.default = Bresenham;\n\n/***/ }),\n/* 61 */\n/***/ (function(module, exports, __nested_webpack_require_150073__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _pick2 = __nested_webpack_require_150073__(160);\n\nvar _pick3 = _interopRequireDefault(_pick2);\n\nexports.pickConstraints = pickConstraints;\n\nvar _mediaDevices = __nested_webpack_require_150073__(54);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar facingMatching = {\n    \"user\": /front/i,\n    \"environment\": /back/i\n};\n\nvar streamRef;\n\nfunction waitForVideo(video) {\n    return new Promise(function (resolve, reject) {\n        var attempts = 10;\n\n        function checkVideo() {\n            if (attempts > 0) {\n                if (video.videoWidth > 10 && video.videoHeight > 10) {\n                    if (false) {}\n                    resolve();\n                } else {\n                    window.setTimeout(checkVideo, 500);\n                }\n            } else {\n                reject('Unable to play video stream. Is webcam working?');\n            }\n            attempts--;\n        }\n        checkVideo();\n    });\n}\n\n/**\n * Tries to attach the camera-stream to a given video-element\n * and calls the callback function when the content is ready\n * @param {Object} constraints\n * @param {Object} video\n */\nfunction initCamera(video, constraints) {\n    return (0, _mediaDevices.getUserMedia)(constraints).then(function (stream) {\n        return new Promise(function (resolve) {\n            streamRef = stream;\n            video.setAttribute(\"autoplay\", true);\n            video.setAttribute('muted', true);\n            video.setAttribute('playsinline', true);\n            video.srcObject = stream;\n            video.addEventListener('loadedmetadata', function () {\n                video.play();\n                resolve();\n            });\n        });\n    }).then(waitForVideo.bind(null, video));\n}\n\nfunction deprecatedConstraints(videoConstraints) {\n    var normalized = (0, _pick3.default)(videoConstraints, [\"width\", \"height\", \"facingMode\", \"aspectRatio\", \"deviceId\"]);\n\n    if (typeof videoConstraints.minAspectRatio !== 'undefined' && videoConstraints.minAspectRatio > 0) {\n        normalized.aspectRatio = videoConstraints.minAspectRatio;\n        console.log(\"WARNING: Constraint 'minAspectRatio' is deprecated; Use 'aspectRatio' instead\");\n    }\n    if (typeof videoConstraints.facing !== 'undefined') {\n        normalized.facingMode = videoConstraints.facing;\n        console.log(\"WARNING: Constraint 'facing' is deprecated. Use 'facingMode' instead'\");\n    }\n    return normalized;\n}\n\nfunction pickConstraints(videoConstraints) {\n    var normalizedConstraints = {\n        audio: false,\n        video: deprecatedConstraints(videoConstraints)\n    };\n\n    if (normalizedConstraints.video.deviceId && normalizedConstraints.video.facingMode) {\n        delete normalizedConstraints.video.facingMode;\n    }\n    return Promise.resolve(normalizedConstraints);\n}\n\nfunction enumerateVideoDevices() {\n    return (0, _mediaDevices.enumerateDevices)().then(function (devices) {\n        return devices.filter(function (device) {\n            return device.kind === 'videoinput';\n        });\n    });\n}\n\nfunction getActiveTrack() {\n    if (streamRef) {\n        var tracks = streamRef.getVideoTracks();\n        if (tracks && tracks.length) {\n            return tracks[0];\n        }\n    }\n}\n\nexports.default = {\n    request: function request(video, videoConstraints) {\n        return pickConstraints(videoConstraints).then(initCamera.bind(null, video));\n    },\n    release: function release() {\n        var tracks = streamRef && streamRef.getVideoTracks();\n        if (tracks && tracks.length) {\n            tracks[0].stop();\n        }\n        streamRef = null;\n    },\n    enumerateVideoDevices: enumerateVideoDevices,\n    getActiveStreamLabel: function getActiveStreamLabel() {\n        var track = getActiveTrack();\n        return track ? track.label : '';\n    },\n    getActiveTrack: getActiveTrack\n};\n\n/***/ }),\n/* 62 */\n/***/ (function(module, exports, __nested_webpack_require_154129__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {\n\nexports.__esModule = true;\n\nvar _image_wrapper = __nested_webpack_require_154129__(20);\n\nvar _image_wrapper2 = _interopRequireDefault(_image_wrapper);\n\nvar _cv_utils = __nested_webpack_require_154129__(19);\n\nvar _array_helper = __nested_webpack_require_154129__(3);\n\nvar _array_helper2 = _interopRequireDefault(_array_helper);\n\nvar _image_debug = __nested_webpack_require_154129__(9);\n\nvar _image_debug2 = _interopRequireDefault(_image_debug);\n\nvar _rasterizer = __nested_webpack_require_154129__(63);\n\nvar _rasterizer2 = _interopRequireDefault(_rasterizer);\n\nvar _tracer = __nested_webpack_require_154129__(30);\n\nvar _tracer2 = _interopRequireDefault(_tracer);\n\nvar _skeletonizer2 = __nested_webpack_require_154129__(64);\n\nvar _skeletonizer3 = _interopRequireDefault(_skeletonizer2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nvar vec2 = {\n    clone: __nested_webpack_require_154129__(7),\n    dot: __nested_webpack_require_154129__(32),\n    scale: __nested_webpack_require_154129__(79),\n    transformMat2: __nested_webpack_require_154129__(80)\n};\nvar mat2 = {\n    copy: __nested_webpack_require_154129__(76),\n    create: __nested_webpack_require_154129__(77),\n    invert: __nested_webpack_require_154129__(78)\n};\n\nvar _config,\n    _currentImageWrapper,\n    _skelImageWrapper,\n    _subImageWrapper,\n    _labelImageWrapper,\n    _patchGrid,\n    _patchLabelGrid,\n    _imageToPatchGrid,\n    _binaryImageWrapper,\n    _patchSize,\n    _canvasContainer = {\n    ctx: {\n        binary: null\n    },\n    dom: {\n        binary: null\n    }\n},\n    _numPatches = { x: 0, y: 0 },\n    _inputImageWrapper,\n    _skeletonizer;\n\nfunction initBuffers() {\n    var skeletonImageData;\n\n    if (_config.halfSample) {\n        _currentImageWrapper = new _image_wrapper2.default({\n            x: _inputImageWrapper.size.x / 2 | 0,\n            y: _inputImageWrapper.size.y / 2 | 0\n        });\n    } else {\n        _currentImageWrapper = _inputImageWrapper;\n    }\n\n    _patchSize = (0, _cv_utils.calculatePatchSize)(_config.patchSize, _currentImageWrapper.size);\n\n    _numPatches.x = _currentImageWrapper.size.x / _patchSize.x | 0;\n    _numPatches.y = _currentImageWrapper.size.y / _patchSize.y | 0;\n\n    _binaryImageWrapper = new _image_wrapper2.default(_currentImageWrapper.size, undefined, Uint8Array, false);\n\n    _labelImageWrapper = new _image_wrapper2.default(_patchSize, undefined, Array, true);\n\n    skeletonImageData = new ArrayBuffer(64 * 1024);\n    _subImageWrapper = new _image_wrapper2.default(_patchSize, new Uint8Array(skeletonImageData, 0, _patchSize.x * _patchSize.y));\n    _skelImageWrapper = new _image_wrapper2.default(_patchSize, new Uint8Array(skeletonImageData, _patchSize.x * _patchSize.y * 3, _patchSize.x * _patchSize.y), undefined, true);\n    _skeletonizer = (0, _skeletonizer3.default)(typeof window !== 'undefined' ? window : typeof self !== 'undefined' ? self : global, {\n        size: _patchSize.x\n    }, skeletonImageData);\n\n    _imageToPatchGrid = new _image_wrapper2.default({\n        x: _currentImageWrapper.size.x / _subImageWrapper.size.x | 0,\n        y: _currentImageWrapper.size.y / _subImageWrapper.size.y | 0\n    }, undefined, Array, true);\n    _patchGrid = new _image_wrapper2.default(_imageToPatchGrid.size, undefined, undefined, true);\n    _patchLabelGrid = new _image_wrapper2.default(_imageToPatchGrid.size, undefined, Int32Array, true);\n}\n\nfunction initCanvas() {\n    if (_config.useWorker || typeof document === 'undefined') {\n        return;\n    }\n    _canvasContainer.dom.binary = document.createElement(\"canvas\");\n    _canvasContainer.dom.binary.className = \"binaryBuffer\";\n    if (false) {}\n    _canvasContainer.ctx.binary = _canvasContainer.dom.binary.getContext(\"2d\");\n    _canvasContainer.dom.binary.width = _binaryImageWrapper.size.x;\n    _canvasContainer.dom.binary.height = _binaryImageWrapper.size.y;\n}\n\n/**\n * Creates a bounding box which encloses all the given patches\n * @returns {Array} The minimal bounding box\n */\nfunction boxFromPatches(patches) {\n    var overAvg,\n        i,\n        j,\n        patch,\n        transMat,\n        minx = _binaryImageWrapper.size.x,\n        miny = _binaryImageWrapper.size.y,\n        maxx = -_binaryImageWrapper.size.x,\n        maxy = -_binaryImageWrapper.size.y,\n        box,\n        scale;\n\n    // draw all patches which are to be taken into consideration\n    overAvg = 0;\n    for (i = 0; i < patches.length; i++) {\n        patch = patches[i];\n        overAvg += patch.rad;\n        if (false) {}\n    }\n\n    overAvg /= patches.length;\n    overAvg = (overAvg * 180 / Math.PI + 90) % 180 - 90;\n    if (overAvg < 0) {\n        overAvg += 180;\n    }\n\n    overAvg = (180 - overAvg) * Math.PI / 180;\n    transMat = mat2.copy(mat2.create(), [Math.cos(overAvg), Math.sin(overAvg), -Math.sin(overAvg), Math.cos(overAvg)]);\n\n    // iterate over patches and rotate by angle\n    for (i = 0; i < patches.length; i++) {\n        patch = patches[i];\n        for (j = 0; j < 4; j++) {\n            vec2.transformMat2(patch.box[j], patch.box[j], transMat);\n        }\n\n        if (false) {}\n    }\n\n    // find bounding box\n    for (i = 0; i < patches.length; i++) {\n        patch = patches[i];\n        for (j = 0; j < 4; j++) {\n            if (patch.box[j][0] < minx) {\n                minx = patch.box[j][0];\n            }\n            if (patch.box[j][0] > maxx) {\n                maxx = patch.box[j][0];\n            }\n            if (patch.box[j][1] < miny) {\n                miny = patch.box[j][1];\n            }\n            if (patch.box[j][1] > maxy) {\n                maxy = patch.box[j][1];\n            }\n        }\n    }\n\n    box = [[minx, miny], [maxx, miny], [maxx, maxy], [minx, maxy]];\n\n    if (false) {}\n\n    scale = _config.halfSample ? 2 : 1;\n    // reverse rotation;\n    transMat = mat2.invert(transMat, transMat);\n    for (j = 0; j < 4; j++) {\n        vec2.transformMat2(box[j], box[j], transMat);\n    }\n\n    if (false) {}\n\n    for (j = 0; j < 4; j++) {\n        vec2.scale(box[j], box[j], scale);\n    }\n\n    return box;\n}\n\n/**\n * Creates a binary image of the current image\n */\nfunction binarizeImage() {\n    (0, _cv_utils.otsuThreshold)(_currentImageWrapper, _binaryImageWrapper);\n    _binaryImageWrapper.zeroBorder();\n    if (false) {}\n}\n\n/**\n * Iterate over the entire image\n * extract patches\n */\nfunction findPatches() {\n    var i,\n        j,\n        x,\n        y,\n        moments,\n        patchesFound = [],\n        rasterizer,\n        rasterResult,\n        patch;\n    for (i = 0; i < _numPatches.x; i++) {\n        for (j = 0; j < _numPatches.y; j++) {\n            x = _subImageWrapper.size.x * i;\n            y = _subImageWrapper.size.y * j;\n\n            // seperate parts\n            skeletonize(x, y);\n\n            // Rasterize, find individual bars\n            _skelImageWrapper.zeroBorder();\n            _array_helper2.default.init(_labelImageWrapper.data, 0);\n            rasterizer = _rasterizer2.default.create(_skelImageWrapper, _labelImageWrapper);\n            rasterResult = rasterizer.rasterize(0);\n\n            if (false) {}\n\n            // calculate moments from the skeletonized patch\n            moments = _labelImageWrapper.moments(rasterResult.count);\n\n            // extract eligible patches\n            patchesFound = patchesFound.concat(describePatch(moments, [i, j], x, y));\n        }\n    }\n\n    if (false) {}\n\n    return patchesFound;\n}\n\n/**\n * Finds those connected areas which contain at least 6 patches\n * and returns them ordered DESC by the number of contained patches\n * @param {Number} maxLabel\n */\nfunction findBiggestConnectedAreas(maxLabel) {\n    var i,\n        sum,\n        labelHist = [],\n        topLabels = [];\n\n    for (i = 0; i < maxLabel; i++) {\n        labelHist.push(0);\n    }\n    sum = _patchLabelGrid.data.length;\n    while (sum--) {\n        if (_patchLabelGrid.data[sum] > 0) {\n            labelHist[_patchLabelGrid.data[sum] - 1]++;\n        }\n    }\n\n    labelHist = labelHist.map(function (val, idx) {\n        return {\n            val: val,\n            label: idx + 1\n        };\n    });\n\n    labelHist.sort(function (a, b) {\n        return b.val - a.val;\n    });\n\n    // extract top areas with at least 6 patches present\n    topLabels = labelHist.filter(function (el) {\n        return el.val >= 5;\n    });\n\n    return topLabels;\n}\n\n/**\n *\n */\nfunction findBoxes(topLabels, maxLabel) {\n    var i,\n        j,\n        sum,\n        patches = [],\n        patch,\n        box,\n        boxes = [],\n        hsv = [0, 1, 1],\n        rgb = [0, 0, 0];\n\n    for (i = 0; i < topLabels.length; i++) {\n        sum = _patchLabelGrid.data.length;\n        patches.length = 0;\n        while (sum--) {\n            if (_patchLabelGrid.data[sum] === topLabels[i].label) {\n                patch = _imageToPatchGrid.data[sum];\n                patches.push(patch);\n            }\n        }\n        box = boxFromPatches(patches);\n        if (box) {\n            boxes.push(box);\n\n            // draw patch-labels if requested\n            if (false) {}\n        }\n    }\n    return boxes;\n}\n\n/**\n * Find similar moments (via cluster)\n * @param {Object} moments\n */\nfunction similarMoments(moments) {\n    var clusters = (0, _cv_utils.cluster)(moments, 0.90);\n    var topCluster = (0, _cv_utils.topGeneric)(clusters, 1, function (e) {\n        return e.getPoints().length;\n    });\n    var points = [],\n        result = [];\n    if (topCluster.length === 1) {\n        points = topCluster[0].item.getPoints();\n        for (var i = 0; i < points.length; i++) {\n            result.push(points[i].point);\n        }\n    }\n    return result;\n}\n\nfunction skeletonize(x, y) {\n    _binaryImageWrapper.subImageAsCopy(_subImageWrapper, (0, _cv_utils.imageRef)(x, y));\n    _skeletonizer.skeletonize();\n\n    // Show skeleton if requested\n    if (false) {}\n}\n\n/**\n * Extracts and describes those patches which seem to contain a barcode pattern\n * @param {Array} moments\n * @param {Object} patchPos,\n * @param {Number} x\n * @param {Number} y\n * @returns {Array} list of patches\n */\nfunction describePatch(moments, patchPos, x, y) {\n    var k,\n        avg,\n        eligibleMoments = [],\n        matchingMoments,\n        patch,\n        patchesFound = [],\n        minComponentWeight = Math.ceil(_patchSize.x / 3);\n\n    if (moments.length >= 2) {\n        // only collect moments which's area covers at least minComponentWeight pixels.\n        for (k = 0; k < moments.length; k++) {\n            if (moments[k].m00 > minComponentWeight) {\n                eligibleMoments.push(moments[k]);\n            }\n        }\n\n        // if at least 2 moments are found which have at least minComponentWeights covered\n        if (eligibleMoments.length >= 2) {\n            matchingMoments = similarMoments(eligibleMoments);\n            avg = 0;\n            // determine the similarity of the moments\n            for (k = 0; k < matchingMoments.length; k++) {\n                avg += matchingMoments[k].rad;\n            }\n\n            // Only two of the moments are allowed not to fit into the equation\n            // add the patch to the set\n            if (matchingMoments.length > 1 && matchingMoments.length >= eligibleMoments.length / 4 * 3 && matchingMoments.length > moments.length / 4) {\n                avg /= matchingMoments.length;\n                patch = {\n                    index: patchPos[1] * _numPatches.x + patchPos[0],\n                    pos: {\n                        x: x,\n                        y: y\n                    },\n                    box: [vec2.clone([x, y]), vec2.clone([x + _subImageWrapper.size.x, y]), vec2.clone([x + _subImageWrapper.size.x, y + _subImageWrapper.size.y]), vec2.clone([x, y + _subImageWrapper.size.y])],\n                    moments: matchingMoments,\n                    rad: avg,\n                    vec: vec2.clone([Math.cos(avg), Math.sin(avg)])\n                };\n                patchesFound.push(patch);\n            }\n        }\n    }\n    return patchesFound;\n}\n\n/**\n * finds patches which are connected and share the same orientation\n * @param {Object} patchesFound\n */\nfunction rasterizeAngularSimilarity(patchesFound) {\n    var label = 0,\n        threshold = 0.95,\n        currIdx = 0,\n        j,\n        patch,\n        hsv = [0, 1, 1],\n        rgb = [0, 0, 0];\n\n    function notYetProcessed() {\n        var i;\n        for (i = 0; i < _patchLabelGrid.data.length; i++) {\n            if (_patchLabelGrid.data[i] === 0 && _patchGrid.data[i] === 1) {\n                return i;\n            }\n        }\n        return _patchLabelGrid.length;\n    }\n\n    function trace(currentIdx) {\n        var x,\n            y,\n            currentPatch,\n            idx,\n            dir,\n            current = {\n            x: currentIdx % _patchLabelGrid.size.x,\n            y: currentIdx / _patchLabelGrid.size.x | 0\n        },\n            similarity;\n\n        if (currentIdx < _patchLabelGrid.data.length) {\n            currentPatch = _imageToPatchGrid.data[currentIdx];\n            // assign label\n            _patchLabelGrid.data[currentIdx] = label;\n            for (dir = 0; dir < _tracer2.default.searchDirections.length; dir++) {\n                y = current.y + _tracer2.default.searchDirections[dir][0];\n                x = current.x + _tracer2.default.searchDirections[dir][1];\n                idx = y * _patchLabelGrid.size.x + x;\n\n                // continue if patch empty\n                if (_patchGrid.data[idx] === 0) {\n                    _patchLabelGrid.data[idx] = Number.MAX_VALUE;\n                    continue;\n                }\n\n                if (_patchLabelGrid.data[idx] === 0) {\n                    similarity = Math.abs(vec2.dot(_imageToPatchGrid.data[idx].vec, currentPatch.vec));\n                    if (similarity > threshold) {\n                        trace(idx);\n                    }\n                }\n            }\n        }\n    }\n\n    // prepare for finding the right patches\n    _array_helper2.default.init(_patchGrid.data, 0);\n    _array_helper2.default.init(_patchLabelGrid.data, 0);\n    _array_helper2.default.init(_imageToPatchGrid.data, null);\n\n    for (j = 0; j < patchesFound.length; j++) {\n        patch = patchesFound[j];\n        _imageToPatchGrid.data[patch.index] = patch;\n        _patchGrid.data[patch.index] = 1;\n    }\n\n    // rasterize the patches found to determine area\n    _patchGrid.zeroBorder();\n\n    while ((currIdx = notYetProcessed()) < _patchLabelGrid.data.length) {\n        label++;\n        trace(currIdx);\n    }\n\n    // draw patch-labels if requested\n    if (false) {}\n\n    return label;\n}\n\nexports.default = {\n    init: function init(inputImageWrapper, config) {\n        _config = config;\n        _inputImageWrapper = inputImageWrapper;\n\n        initBuffers();\n        initCanvas();\n    },\n\n    locate: function locate() {\n        var patchesFound, topLabels, boxes;\n\n        if (_config.halfSample) {\n            (0, _cv_utils.halfSample)(_inputImageWrapper, _currentImageWrapper);\n        }\n\n        binarizeImage();\n        patchesFound = findPatches();\n        // return unless 5% or more patches are found\n        if (patchesFound.length < _numPatches.x * _numPatches.y * 0.05) {\n            return null;\n        }\n\n        // rasterrize area by comparing angular similarity;\n        var maxLabel = rasterizeAngularSimilarity(patchesFound);\n        if (maxLabel < 1) {\n            return null;\n        }\n\n        // search for area with the most patches (biggest connected area)\n        topLabels = findBiggestConnectedAreas(maxLabel);\n        if (topLabels.length === 0) {\n            return null;\n        }\n\n        boxes = findBoxes(topLabels, maxLabel);\n        return boxes;\n    },\n\n    checkImageConstraints: function checkImageConstraints(inputStream, config) {\n        var patchSize,\n            width = inputStream.getWidth(),\n            height = inputStream.getHeight(),\n            halfSample = config.halfSample ? 0.5 : 1,\n            size,\n            area;\n\n        // calculate width and height based on area\n        if (inputStream.getConfig().area) {\n            area = (0, _cv_utils.computeImageArea)(width, height, inputStream.getConfig().area);\n            inputStream.setTopRight({ x: area.sx, y: area.sy });\n            inputStream.setCanvasSize({ x: width, y: height });\n            width = area.sw;\n            height = area.sh;\n        }\n\n        size = {\n            x: Math.floor(width * halfSample),\n            y: Math.floor(height * halfSample)\n        };\n\n        patchSize = (0, _cv_utils.calculatePatchSize)(config.patchSize, size);\n        if (false) {}\n\n        inputStream.setWidth(Math.floor(Math.floor(size.x / patchSize.x) * (1 / halfSample) * patchSize.x));\n        inputStream.setHeight(Math.floor(Math.floor(size.y / patchSize.y) * (1 / halfSample) * patchSize.y));\n\n        if (inputStream.getWidth() % patchSize.x === 0 && inputStream.getHeight() % patchSize.y === 0) {\n            return true;\n        }\n\n        throw new Error(\"Image dimensions do not comply with the current settings: Width (\" + width + \" )and height (\" + height + \") must a multiple of \" + patchSize.x);\n    }\n};\n/* WEBPACK VAR INJECTION */}.call(exports, __nested_webpack_require_154129__(47)))\n\n/***/ }),\n/* 63 */\n/***/ (function(module, exports, __nested_webpack_require_173379__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _tracer = __nested_webpack_require_173379__(30);\n\nvar _tracer2 = _interopRequireDefault(_tracer);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * http://www.codeproject.com/Tips/407172/Connected-Component-Labeling-and-Vectorization\n */\nvar Rasterizer = {\n    createContour2D: function createContour2D() {\n        return {\n            dir: null,\n            index: null,\n            firstVertex: null,\n            insideContours: null,\n            nextpeer: null,\n            prevpeer: null\n        };\n    },\n    CONTOUR_DIR: {\n        CW_DIR: 0,\n        CCW_DIR: 1,\n        UNKNOWN_DIR: 2\n    },\n    DIR: {\n        OUTSIDE_EDGE: -32767,\n        INSIDE_EDGE: -32766\n    },\n    create: function create(imageWrapper, labelWrapper) {\n        var imageData = imageWrapper.data,\n            labelData = labelWrapper.data,\n            width = imageWrapper.size.x,\n            height = imageWrapper.size.y,\n            tracer = _tracer2.default.create(imageWrapper, labelWrapper);\n\n        return {\n            rasterize: function rasterize(depthlabel) {\n                var color,\n                    bc,\n                    lc,\n                    labelindex,\n                    cx,\n                    cy,\n                    colorMap = [],\n                    vertex,\n                    p,\n                    cc,\n                    sc,\n                    pos,\n                    connectedCount = 0,\n                    i;\n\n                for (i = 0; i < 400; i++) {\n                    colorMap[i] = 0;\n                }\n\n                colorMap[0] = imageData[0];\n                cc = null;\n                for (cy = 1; cy < height - 1; cy++) {\n                    labelindex = 0;\n                    bc = colorMap[0];\n                    for (cx = 1; cx < width - 1; cx++) {\n                        pos = cy * width + cx;\n                        if (labelData[pos] === 0) {\n                            color = imageData[pos];\n                            if (color !== bc) {\n                                if (labelindex === 0) {\n                                    lc = connectedCount + 1;\n                                    colorMap[lc] = color;\n                                    bc = color;\n                                    vertex = tracer.contourTracing(cy, cx, lc, color, Rasterizer.DIR.OUTSIDE_EDGE);\n                                    if (vertex !== null) {\n                                        connectedCount++;\n                                        labelindex = lc;\n                                        p = Rasterizer.createContour2D();\n                                        p.dir = Rasterizer.CONTOUR_DIR.CW_DIR;\n                                        p.index = labelindex;\n                                        p.firstVertex = vertex;\n                                        p.nextpeer = cc;\n                                        p.insideContours = null;\n                                        if (cc !== null) {\n                                            cc.prevpeer = p;\n                                        }\n                                        cc = p;\n                                    }\n                                } else {\n                                    vertex = tracer.contourTracing(cy, cx, Rasterizer.DIR.INSIDE_EDGE, color, labelindex);\n                                    if (vertex !== null) {\n                                        p = Rasterizer.createContour2D();\n                                        p.firstVertex = vertex;\n                                        p.insideContours = null;\n                                        if (depthlabel === 0) {\n                                            p.dir = Rasterizer.CONTOUR_DIR.CCW_DIR;\n                                        } else {\n                                            p.dir = Rasterizer.CONTOUR_DIR.CW_DIR;\n                                        }\n                                        p.index = depthlabel;\n                                        sc = cc;\n                                        while (sc !== null && sc.index !== labelindex) {\n                                            sc = sc.nextpeer;\n                                        }\n                                        if (sc !== null) {\n                                            p.nextpeer = sc.insideContours;\n                                            if (sc.insideContours !== null) {\n                                                sc.insideContours.prevpeer = p;\n                                            }\n                                            sc.insideContours = p;\n                                        }\n                                    }\n                                }\n                            } else {\n                                labelData[pos] = labelindex;\n                            }\n                        } else if (labelData[pos] === Rasterizer.DIR.OUTSIDE_EDGE || labelData[pos] === Rasterizer.DIR.INSIDE_EDGE) {\n                            labelindex = 0;\n                            if (labelData[pos] === Rasterizer.DIR.INSIDE_EDGE) {\n                                bc = imageData[pos];\n                            } else {\n                                bc = colorMap[0];\n                            }\n                        } else {\n                            labelindex = labelData[pos];\n                            bc = colorMap[labelindex];\n                        }\n                    }\n                }\n                sc = cc;\n                while (sc !== null) {\n                    sc.index = depthlabel;\n                    sc = sc.nextpeer;\n                }\n                return {\n                    cc: cc,\n                    count: connectedCount\n                };\n            },\n            debug: {\n                drawContour: function drawContour(canvas, firstContour) {\n                    var ctx = canvas.getContext(\"2d\"),\n                        pq = firstContour,\n                        iq,\n                        q,\n                        p;\n\n                    ctx.strokeStyle = \"red\";\n                    ctx.fillStyle = \"red\";\n                    ctx.lineWidth = 1;\n\n                    if (pq !== null) {\n                        iq = pq.insideContours;\n                    } else {\n                        iq = null;\n                    }\n\n                    while (pq !== null) {\n                        if (iq !== null) {\n                            q = iq;\n                            iq = iq.nextpeer;\n                        } else {\n                            q = pq;\n                            pq = pq.nextpeer;\n                            if (pq !== null) {\n                                iq = pq.insideContours;\n                            } else {\n                                iq = null;\n                            }\n                        }\n\n                        switch (q.dir) {\n                            case Rasterizer.CONTOUR_DIR.CW_DIR:\n                                ctx.strokeStyle = \"red\";\n                                break;\n                            case Rasterizer.CONTOUR_DIR.CCW_DIR:\n                                ctx.strokeStyle = \"blue\";\n                                break;\n                            case Rasterizer.CONTOUR_DIR.UNKNOWN_DIR:\n                                ctx.strokeStyle = \"green\";\n                                break;\n                        }\n\n                        p = q.firstVertex;\n                        ctx.beginPath();\n                        ctx.moveTo(p.x, p.y);\n                        do {\n                            p = p.next;\n                            ctx.lineTo(p.x, p.y);\n                        } while (p !== q.firstVertex);\n                        ctx.stroke();\n                    }\n                }\n            }\n        };\n    }\n};\n\nexports.default = Rasterizer;\n\n/***/ }),\n/* 64 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n/* @preserve ASM BEGIN */\n/* eslint-disable eqeqeq*/\nfunction Skeletonizer(stdlib, foreign, buffer) {\n    \"use asm\";\n\n    var images = new stdlib.Uint8Array(buffer),\n        size = foreign.size | 0,\n        imul = stdlib.Math.imul;\n\n    function erode(inImagePtr, outImagePtr) {\n        inImagePtr = inImagePtr | 0;\n        outImagePtr = outImagePtr | 0;\n\n        var v = 0,\n            u = 0,\n            sum = 0,\n            yStart1 = 0,\n            yStart2 = 0,\n            xStart1 = 0,\n            xStart2 = 0,\n            offset = 0;\n\n        for (v = 1; (v | 0) < (size - 1 | 0); v = v + 1 | 0) {\n            offset = offset + size | 0;\n            for (u = 1; (u | 0) < (size - 1 | 0); u = u + 1 | 0) {\n                yStart1 = offset - size | 0;\n                yStart2 = offset + size | 0;\n                xStart1 = u - 1 | 0;\n                xStart2 = u + 1 | 0;\n                sum = (images[inImagePtr + yStart1 + xStart1 | 0] | 0) + (images[inImagePtr + yStart1 + xStart2 | 0] | 0) + (images[inImagePtr + offset + u | 0] | 0) + (images[inImagePtr + yStart2 + xStart1 | 0] | 0) + (images[inImagePtr + yStart2 + xStart2 | 0] | 0) | 0;\n                if ((sum | 0) == (5 | 0)) {\n                    images[outImagePtr + offset + u | 0] = 1;\n                } else {\n                    images[outImagePtr + offset + u | 0] = 0;\n                }\n            }\n        }\n        return;\n    }\n\n    function subtract(aImagePtr, bImagePtr, outImagePtr) {\n        aImagePtr = aImagePtr | 0;\n        bImagePtr = bImagePtr | 0;\n        outImagePtr = outImagePtr | 0;\n\n        var length = 0;\n\n        length = imul(size, size) | 0;\n\n        while ((length | 0) > 0) {\n            length = length - 1 | 0;\n            images[outImagePtr + length | 0] = (images[aImagePtr + length | 0] | 0) - (images[bImagePtr + length | 0] | 0) | 0;\n        }\n    }\n\n    function bitwiseOr(aImagePtr, bImagePtr, outImagePtr) {\n        aImagePtr = aImagePtr | 0;\n        bImagePtr = bImagePtr | 0;\n        outImagePtr = outImagePtr | 0;\n\n        var length = 0;\n\n        length = imul(size, size) | 0;\n\n        while ((length | 0) > 0) {\n            length = length - 1 | 0;\n            images[outImagePtr + length | 0] = images[aImagePtr + length | 0] | 0 | (images[bImagePtr + length | 0] | 0) | 0;\n        }\n    }\n\n    function countNonZero(imagePtr) {\n        imagePtr = imagePtr | 0;\n\n        var sum = 0,\n            length = 0;\n\n        length = imul(size, size) | 0;\n\n        while ((length | 0) > 0) {\n            length = length - 1 | 0;\n            sum = (sum | 0) + (images[imagePtr + length | 0] | 0) | 0;\n        }\n\n        return sum | 0;\n    }\n\n    function init(imagePtr, value) {\n        imagePtr = imagePtr | 0;\n        value = value | 0;\n\n        var length = 0;\n\n        length = imul(size, size) | 0;\n\n        while ((length | 0) > 0) {\n            length = length - 1 | 0;\n            images[imagePtr + length | 0] = value;\n        }\n    }\n\n    function dilate(inImagePtr, outImagePtr) {\n        inImagePtr = inImagePtr | 0;\n        outImagePtr = outImagePtr | 0;\n\n        var v = 0,\n            u = 0,\n            sum = 0,\n            yStart1 = 0,\n            yStart2 = 0,\n            xStart1 = 0,\n            xStart2 = 0,\n            offset = 0;\n\n        for (v = 1; (v | 0) < (size - 1 | 0); v = v + 1 | 0) {\n            offset = offset + size | 0;\n            for (u = 1; (u | 0) < (size - 1 | 0); u = u + 1 | 0) {\n                yStart1 = offset - size | 0;\n                yStart2 = offset + size | 0;\n                xStart1 = u - 1 | 0;\n                xStart2 = u + 1 | 0;\n                sum = (images[inImagePtr + yStart1 + xStart1 | 0] | 0) + (images[inImagePtr + yStart1 + xStart2 | 0] | 0) + (images[inImagePtr + offset + u | 0] | 0) + (images[inImagePtr + yStart2 + xStart1 | 0] | 0) + (images[inImagePtr + yStart2 + xStart2 | 0] | 0) | 0;\n                if ((sum | 0) > (0 | 0)) {\n                    images[outImagePtr + offset + u | 0] = 1;\n                } else {\n                    images[outImagePtr + offset + u | 0] = 0;\n                }\n            }\n        }\n        return;\n    }\n\n    function memcpy(srcImagePtr, dstImagePtr) {\n        srcImagePtr = srcImagePtr | 0;\n        dstImagePtr = dstImagePtr | 0;\n\n        var length = 0;\n\n        length = imul(size, size) | 0;\n\n        while ((length | 0) > 0) {\n            length = length - 1 | 0;\n            images[dstImagePtr + length | 0] = images[srcImagePtr + length | 0] | 0;\n        }\n    }\n\n    function zeroBorder(imagePtr) {\n        imagePtr = imagePtr | 0;\n\n        var x = 0,\n            y = 0;\n\n        for (x = 0; (x | 0) < (size - 1 | 0); x = x + 1 | 0) {\n            images[imagePtr + x | 0] = 0;\n            images[imagePtr + y | 0] = 0;\n            y = y + size - 1 | 0;\n            images[imagePtr + y | 0] = 0;\n            y = y + 1 | 0;\n        }\n        for (x = 0; (x | 0) < (size | 0); x = x + 1 | 0) {\n            images[imagePtr + y | 0] = 0;\n            y = y + 1 | 0;\n        }\n    }\n\n    function skeletonize() {\n        var subImagePtr = 0,\n            erodedImagePtr = 0,\n            tempImagePtr = 0,\n            skelImagePtr = 0,\n            sum = 0,\n            done = 0;\n\n        erodedImagePtr = imul(size, size) | 0;\n        tempImagePtr = erodedImagePtr + erodedImagePtr | 0;\n        skelImagePtr = tempImagePtr + erodedImagePtr | 0;\n\n        // init skel-image\n        init(skelImagePtr, 0);\n        zeroBorder(subImagePtr);\n\n        do {\n            erode(subImagePtr, erodedImagePtr);\n            dilate(erodedImagePtr, tempImagePtr);\n            subtract(subImagePtr, tempImagePtr, tempImagePtr);\n            bitwiseOr(skelImagePtr, tempImagePtr, skelImagePtr);\n            memcpy(erodedImagePtr, subImagePtr);\n            sum = countNonZero(subImagePtr) | 0;\n            done = (sum | 0) == 0 | 0;\n        } while (!done);\n    }\n    return {\n        skeletonize: skeletonize\n    };\n}\n/* @preserve ASM END */\nexports.default = Skeletonizer;\n/* eslint-enable eqeqeq*/\n\n/***/ }),\n/* 65 */\n/***/ (function(module, exports, __nested_webpack_require_187544__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _barcode_reader = __nested_webpack_require_187544__(1);\n\nvar _barcode_reader2 = _interopRequireDefault(_barcode_reader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction TwoOfFiveReader(opts) {\n    _barcode_reader2.default.call(this, opts);\n    this.barSpaceRatio = [1, 1];\n}\n\nvar N = 1,\n    W = 3,\n    properties = {\n    START_PATTERN: { value: [W, N, W, N, N, N] },\n    STOP_PATTERN: { value: [W, N, N, N, W] },\n    CODE_PATTERN: { value: [[N, N, W, W, N], [W, N, N, N, W], [N, W, N, N, W], [W, W, N, N, N], [N, N, W, N, W], [W, N, W, N, N], [N, W, W, N, N], [N, N, N, W, W], [W, N, N, W, N], [N, W, N, W, N]] },\n    SINGLE_CODE_ERROR: { value: 0.78, writable: true },\n    AVG_CODE_ERROR: { value: 0.30, writable: true },\n    FORMAT: { value: \"2of5\" }\n};\n\nvar startPatternLength = properties.START_PATTERN.value.reduce(function (sum, val) {\n    return sum + val;\n}, 0);\n\nTwoOfFiveReader.prototype = Object.create(_barcode_reader2.default.prototype, properties);\nTwoOfFiveReader.prototype.constructor = TwoOfFiveReader;\n\nTwoOfFiveReader.prototype._findPattern = function (pattern, offset, isWhite, tryHarder) {\n    var counter = [],\n        self = this,\n        i,\n        counterPos = 0,\n        bestMatch = {\n        error: Number.MAX_VALUE,\n        code: -1,\n        start: 0,\n        end: 0\n    },\n        error,\n        j,\n        sum,\n        epsilon = self.AVG_CODE_ERROR;\n\n    isWhite = isWhite || false;\n    tryHarder = tryHarder || false;\n\n    if (!offset) {\n        offset = self._nextSet(self._row);\n    }\n\n    for (i = 0; i < pattern.length; i++) {\n        counter[i] = 0;\n    }\n\n    for (i = offset; i < self._row.length; i++) {\n        if (self._row[i] ^ isWhite) {\n            counter[counterPos]++;\n        } else {\n            if (counterPos === counter.length - 1) {\n                sum = 0;\n                for (j = 0; j < counter.length; j++) {\n                    sum += counter[j];\n                }\n                error = self._matchPattern(counter, pattern);\n                if (error < epsilon) {\n                    bestMatch.error = error;\n                    bestMatch.start = i - sum;\n                    bestMatch.end = i;\n                    return bestMatch;\n                }\n                if (tryHarder) {\n                    for (j = 0; j < counter.length - 2; j++) {\n                        counter[j] = counter[j + 2];\n                    }\n                    counter[counter.length - 2] = 0;\n                    counter[counter.length - 1] = 0;\n                    counterPos--;\n                } else {\n                    return null;\n                }\n            } else {\n                counterPos++;\n            }\n            counter[counterPos] = 1;\n            isWhite = !isWhite;\n        }\n    }\n    return null;\n};\n\nTwoOfFiveReader.prototype._findStart = function () {\n    var self = this,\n        leadingWhitespaceStart,\n        offset = self._nextSet(self._row),\n        startInfo,\n        narrowBarWidth = 1;\n\n    while (!startInfo) {\n        startInfo = self._findPattern(self.START_PATTERN, offset, false, true);\n        if (!startInfo) {\n            return null;\n        }\n        narrowBarWidth = Math.floor((startInfo.end - startInfo.start) / startPatternLength);\n        leadingWhitespaceStart = startInfo.start - narrowBarWidth * 5;\n        if (leadingWhitespaceStart >= 0) {\n            if (self._matchRange(leadingWhitespaceStart, startInfo.start, 0)) {\n                return startInfo;\n            }\n        }\n        offset = startInfo.end;\n        startInfo = null;\n    }\n};\n\nTwoOfFiveReader.prototype._verifyTrailingWhitespace = function (endInfo) {\n    var self = this,\n        trailingWhitespaceEnd;\n\n    trailingWhitespaceEnd = endInfo.end + (endInfo.end - endInfo.start) / 2;\n    if (trailingWhitespaceEnd < self._row.length) {\n        if (self._matchRange(endInfo.end, trailingWhitespaceEnd, 0)) {\n            return endInfo;\n        }\n    }\n    return null;\n};\n\nTwoOfFiveReader.prototype._findEnd = function () {\n    var self = this,\n        endInfo,\n        tmp,\n        offset;\n\n    self._row.reverse();\n    offset = self._nextSet(self._row);\n    endInfo = self._findPattern(self.STOP_PATTERN, offset, false, true);\n    self._row.reverse();\n\n    if (endInfo === null) {\n        return null;\n    }\n\n    // reverse numbers\n    tmp = endInfo.start;\n    endInfo.start = self._row.length - endInfo.end;\n    endInfo.end = self._row.length - tmp;\n\n    return endInfo !== null ? self._verifyTrailingWhitespace(endInfo) : null;\n};\n\nTwoOfFiveReader.prototype._decodeCode = function (counter) {\n    var j,\n        self = this,\n        sum = 0,\n        normalized,\n        error,\n        epsilon = self.AVG_CODE_ERROR,\n        code,\n        bestMatch = {\n        error: Number.MAX_VALUE,\n        code: -1,\n        start: 0,\n        end: 0\n    };\n\n    for (j = 0; j < counter.length; j++) {\n        sum += counter[j];\n    }\n    for (code = 0; code < self.CODE_PATTERN.length; code++) {\n        error = self._matchPattern(counter, self.CODE_PATTERN[code]);\n        if (error < bestMatch.error) {\n            bestMatch.code = code;\n            bestMatch.error = error;\n        }\n    }\n    if (bestMatch.error < epsilon) {\n        return bestMatch;\n    }\n};\n\nTwoOfFiveReader.prototype._decodePayload = function (counters, result, decodedCodes) {\n    var i,\n        self = this,\n        pos = 0,\n        counterLength = counters.length,\n        counter = [0, 0, 0, 0, 0],\n        code;\n\n    while (pos < counterLength) {\n        for (i = 0; i < 5; i++) {\n            counter[i] = counters[pos] * this.barSpaceRatio[0];\n            pos += 2;\n        }\n        code = self._decodeCode(counter);\n        if (!code) {\n            return null;\n        }\n        result.push(code.code + \"\");\n        decodedCodes.push(code);\n    }\n    return code;\n};\n\nTwoOfFiveReader.prototype._verifyCounterLength = function (counters) {\n    return counters.length % 10 === 0;\n};\n\nTwoOfFiveReader.prototype._decode = function () {\n    var startInfo,\n        endInfo,\n        self = this,\n        code,\n        result = [],\n        decodedCodes = [],\n        counters;\n\n    startInfo = self._findStart();\n    if (!startInfo) {\n        return null;\n    }\n    decodedCodes.push(startInfo);\n\n    endInfo = self._findEnd();\n    if (!endInfo) {\n        return null;\n    }\n\n    counters = self._fillCounters(startInfo.end, endInfo.start, false);\n    if (!self._verifyCounterLength(counters)) {\n        return null;\n    }\n    code = self._decodePayload(counters, result, decodedCodes);\n    if (!code) {\n        return null;\n    }\n    if (result.length < 5) {\n        return null;\n    }\n\n    decodedCodes.push(endInfo);\n    return {\n        code: result.join(\"\"),\n        start: startInfo.start,\n        end: endInfo.end,\n        startInfo: startInfo,\n        decodedCodes: decodedCodes\n    };\n};\n\nexports.default = TwoOfFiveReader;\n\n/***/ }),\n/* 66 */\n/***/ (function(module, exports, __nested_webpack_require_194578__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _barcode_reader = __nested_webpack_require_194578__(1);\n\nvar _barcode_reader2 = _interopRequireDefault(_barcode_reader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction CodabarReader() {\n    _barcode_reader2.default.call(this);\n    this._counters = [];\n}\n\nvar properties = {\n    ALPHABETH_STRING: { value: \"0123456789-$:/.+ABCD\" },\n    ALPHABET: { value: [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 36, 58, 47, 46, 43, 65, 66, 67, 68] },\n    CHARACTER_ENCODINGS: { value: [0x003, 0x006, 0x009, 0x060, 0x012, 0x042, 0x021, 0x024, 0x030, 0x048, 0x00c, 0x018, 0x045, 0x051, 0x054, 0x015, 0x01A, 0x029, 0x00B, 0x00E] },\n    START_END: { value: [0x01A, 0x029, 0x00B, 0x00E] },\n    MIN_ENCODED_CHARS: { value: 4 },\n    MAX_ACCEPTABLE: { value: 2.0 },\n    PADDING: { value: 1.5 },\n    FORMAT: { value: \"codabar\", writeable: false }\n};\n\nCodabarReader.prototype = Object.create(_barcode_reader2.default.prototype, properties);\nCodabarReader.prototype.constructor = CodabarReader;\n\nCodabarReader.prototype._decode = function () {\n    var self = this,\n        result = [],\n        start,\n        decodedChar,\n        pattern,\n        nextStart,\n        end;\n\n    this._counters = self._fillCounters();\n    start = self._findStart();\n    if (!start) {\n        return null;\n    }\n    nextStart = start.startCounter;\n\n    do {\n        pattern = self._toPattern(nextStart);\n        if (pattern < 0) {\n            return null;\n        }\n        decodedChar = self._patternToChar(pattern);\n        if (decodedChar < 0) {\n            return null;\n        }\n        result.push(decodedChar);\n        nextStart += 8;\n        if (result.length > 1 && self._isStartEnd(pattern)) {\n            break;\n        }\n    } while (nextStart < self._counters.length);\n\n    // verify end\n    if (result.length - 2 < self.MIN_ENCODED_CHARS || !self._isStartEnd(pattern)) {\n        return null;\n    }\n\n    // verify end white space\n    if (!self._verifyWhitespace(start.startCounter, nextStart - 8)) {\n        return null;\n    }\n\n    if (!self._validateResult(result, start.startCounter)) {\n        return null;\n    }\n\n    nextStart = nextStart > self._counters.length ? self._counters.length : nextStart;\n    end = start.start + self._sumCounters(start.startCounter, nextStart - 8);\n\n    return {\n        code: result.join(\"\"),\n        start: start.start,\n        end: end,\n        startInfo: start,\n        decodedCodes: result\n    };\n};\n\nCodabarReader.prototype._verifyWhitespace = function (startCounter, endCounter) {\n    if (startCounter - 1 <= 0 || this._counters[startCounter - 1] >= this._calculatePatternLength(startCounter) / 2.0) {\n        if (endCounter + 8 >= this._counters.length || this._counters[endCounter + 7] >= this._calculatePatternLength(endCounter) / 2.0) {\n            return true;\n        }\n    }\n    return false;\n};\n\nCodabarReader.prototype._calculatePatternLength = function (offset) {\n    var i,\n        sum = 0;\n\n    for (i = offset; i < offset + 7; i++) {\n        sum += this._counters[i];\n    }\n\n    return sum;\n};\n\nCodabarReader.prototype._thresholdResultPattern = function (result, startCounter) {\n    var self = this,\n        categorization = {\n        space: {\n            narrow: { size: 0, counts: 0, min: 0, max: Number.MAX_VALUE },\n            wide: { size: 0, counts: 0, min: 0, max: Number.MAX_VALUE }\n        },\n        bar: {\n            narrow: { size: 0, counts: 0, min: 0, max: Number.MAX_VALUE },\n            wide: { size: 0, counts: 0, min: 0, max: Number.MAX_VALUE }\n        }\n    },\n        kind,\n        cat,\n        i,\n        j,\n        pos = startCounter,\n        pattern;\n\n    for (i = 0; i < result.length; i++) {\n        pattern = self._charToPattern(result[i]);\n        for (j = 6; j >= 0; j--) {\n            kind = (j & 1) === 2 ? categorization.bar : categorization.space;\n            cat = (pattern & 1) === 1 ? kind.wide : kind.narrow;\n            cat.size += self._counters[pos + j];\n            cat.counts++;\n            pattern >>= 1;\n        }\n        pos += 8;\n    }\n\n    [\"space\", \"bar\"].forEach(function (key) {\n        var newkind = categorization[key];\n        newkind.wide.min = Math.floor((newkind.narrow.size / newkind.narrow.counts + newkind.wide.size / newkind.wide.counts) / 2);\n        newkind.narrow.max = Math.ceil(newkind.wide.min);\n        newkind.wide.max = Math.ceil((newkind.wide.size * self.MAX_ACCEPTABLE + self.PADDING) / newkind.wide.counts);\n    });\n\n    return categorization;\n};\n\nCodabarReader.prototype._charToPattern = function (char) {\n    var self = this,\n        charCode = char.charCodeAt(0),\n        i;\n\n    for (i = 0; i < self.ALPHABET.length; i++) {\n        if (self.ALPHABET[i] === charCode) {\n            return self.CHARACTER_ENCODINGS[i];\n        }\n    }\n    return 0x0;\n};\n\nCodabarReader.prototype._validateResult = function (result, startCounter) {\n    var self = this,\n        thresholds = self._thresholdResultPattern(result, startCounter),\n        i,\n        j,\n        kind,\n        cat,\n        size,\n        pos = startCounter,\n        pattern;\n\n    for (i = 0; i < result.length; i++) {\n        pattern = self._charToPattern(result[i]);\n        for (j = 6; j >= 0; j--) {\n            kind = (j & 1) === 0 ? thresholds.bar : thresholds.space;\n            cat = (pattern & 1) === 1 ? kind.wide : kind.narrow;\n            size = self._counters[pos + j];\n            if (size < cat.min || size > cat.max) {\n                return false;\n            }\n            pattern >>= 1;\n        }\n        pos += 8;\n    }\n    return true;\n};\n\nCodabarReader.prototype._patternToChar = function (pattern) {\n    var i,\n        self = this;\n\n    for (i = 0; i < self.CHARACTER_ENCODINGS.length; i++) {\n        if (self.CHARACTER_ENCODINGS[i] === pattern) {\n            return String.fromCharCode(self.ALPHABET[i]);\n        }\n    }\n    return -1;\n};\n\nCodabarReader.prototype._computeAlternatingThreshold = function (offset, end) {\n    var i,\n        min = Number.MAX_VALUE,\n        max = 0,\n        counter;\n\n    for (i = offset; i < end; i += 2) {\n        counter = this._counters[i];\n        if (counter > max) {\n            max = counter;\n        }\n        if (counter < min) {\n            min = counter;\n        }\n    }\n\n    return (min + max) / 2.0 | 0;\n};\n\nCodabarReader.prototype._toPattern = function (offset) {\n    var numCounters = 7,\n        end = offset + numCounters,\n        barThreshold,\n        spaceThreshold,\n        bitmask = 1 << numCounters - 1,\n        pattern = 0,\n        i,\n        threshold;\n\n    if (end > this._counters.length) {\n        return -1;\n    }\n\n    barThreshold = this._computeAlternatingThreshold(offset, end);\n    spaceThreshold = this._computeAlternatingThreshold(offset + 1, end);\n\n    for (i = 0; i < numCounters; i++) {\n        threshold = (i & 1) === 0 ? barThreshold : spaceThreshold;\n        if (this._counters[offset + i] > threshold) {\n            pattern |= bitmask;\n        }\n        bitmask >>= 1;\n    }\n\n    return pattern;\n};\n\nCodabarReader.prototype._isStartEnd = function (pattern) {\n    var i;\n\n    for (i = 0; i < this.START_END.length; i++) {\n        if (this.START_END[i] === pattern) {\n            return true;\n        }\n    }\n    return false;\n};\n\nCodabarReader.prototype._sumCounters = function (start, end) {\n    var i,\n        sum = 0;\n\n    for (i = start; i < end; i++) {\n        sum += this._counters[i];\n    }\n    return sum;\n};\n\nCodabarReader.prototype._findStart = function () {\n    var self = this,\n        i,\n        pattern,\n        start = self._nextUnset(self._row),\n        end;\n\n    for (i = 1; i < this._counters.length; i++) {\n        pattern = self._toPattern(i);\n        if (pattern !== -1 && self._isStartEnd(pattern)) {\n            // TODO: Look for whitespace ahead\n            start += self._sumCounters(0, i);\n            end = start + self._sumCounters(i, i + 8);\n            return {\n                start: start,\n                end: end,\n                startCounter: i,\n                endCounter: i + 8\n            };\n        }\n    }\n};\n\nexports.default = CodabarReader;\n\n/***/ }),\n/* 67 */\n/***/ (function(module, exports, __nested_webpack_require_202778__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _barcode_reader = __nested_webpack_require_202778__(1);\n\nvar _barcode_reader2 = _interopRequireDefault(_barcode_reader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction Code128Reader() {\n    _barcode_reader2.default.call(this);\n}\n\nvar properties = {\n    CODE_SHIFT: { value: 98 },\n    CODE_C: { value: 99 },\n    CODE_B: { value: 100 },\n    CODE_A: { value: 101 },\n    START_CODE_A: { value: 103 },\n    START_CODE_B: { value: 104 },\n    START_CODE_C: { value: 105 },\n    STOP_CODE: { value: 106 },\n    CODE_PATTERN: { value: [[2, 1, 2, 2, 2, 2], [2, 2, 2, 1, 2, 2], [2, 2, 2, 2, 2, 1], [1, 2, 1, 2, 2, 3], [1, 2, 1, 3, 2, 2], [1, 3, 1, 2, 2, 2], [1, 2, 2, 2, 1, 3], [1, 2, 2, 3, 1, 2], [1, 3, 2, 2, 1, 2], [2, 2, 1, 2, 1, 3], [2, 2, 1, 3, 1, 2], [2, 3, 1, 2, 1, 2], [1, 1, 2, 2, 3, 2], [1, 2, 2, 1, 3, 2], [1, 2, 2, 2, 3, 1], [1, 1, 3, 2, 2, 2], [1, 2, 3, 1, 2, 2], [1, 2, 3, 2, 2, 1], [2, 2, 3, 2, 1, 1], [2, 2, 1, 1, 3, 2], [2, 2, 1, 2, 3, 1], [2, 1, 3, 2, 1, 2], [2, 2, 3, 1, 1, 2], [3, 1, 2, 1, 3, 1], [3, 1, 1, 2, 2, 2], [3, 2, 1, 1, 2, 2], [3, 2, 1, 2, 2, 1], [3, 1, 2, 2, 1, 2], [3, 2, 2, 1, 1, 2], [3, 2, 2, 2, 1, 1], [2, 1, 2, 1, 2, 3], [2, 1, 2, 3, 2, 1], [2, 3, 2, 1, 2, 1], [1, 1, 1, 3, 2, 3], [1, 3, 1, 1, 2, 3], [1, 3, 1, 3, 2, 1], [1, 1, 2, 3, 1, 3], [1, 3, 2, 1, 1, 3], [1, 3, 2, 3, 1, 1], [2, 1, 1, 3, 1, 3], [2, 3, 1, 1, 1, 3], [2, 3, 1, 3, 1, 1], [1, 1, 2, 1, 3, 3], [1, 1, 2, 3, 3, 1], [1, 3, 2, 1, 3, 1], [1, 1, 3, 1, 2, 3], [1, 1, 3, 3, 2, 1], [1, 3, 3, 1, 2, 1], [3, 1, 3, 1, 2, 1], [2, 1, 1, 3, 3, 1], [2, 3, 1, 1, 3, 1], [2, 1, 3, 1, 1, 3], [2, 1, 3, 3, 1, 1], [2, 1, 3, 1, 3, 1], [3, 1, 1, 1, 2, 3], [3, 1, 1, 3, 2, 1], [3, 3, 1, 1, 2, 1], [3, 1, 2, 1, 1, 3], [3, 1, 2, 3, 1, 1], [3, 3, 2, 1, 1, 1], [3, 1, 4, 1, 1, 1], [2, 2, 1, 4, 1, 1], [4, 3, 1, 1, 1, 1], [1, 1, 1, 2, 2, 4], [1, 1, 1, 4, 2, 2], [1, 2, 1, 1, 2, 4], [1, 2, 1, 4, 2, 1], [1, 4, 1, 1, 2, 2], [1, 4, 1, 2, 2, 1], [1, 1, 2, 2, 1, 4], [1, 1, 2, 4, 1, 2], [1, 2, 2, 1, 1, 4], [1, 2, 2, 4, 1, 1], [1, 4, 2, 1, 1, 2], [1, 4, 2, 2, 1, 1], [2, 4, 1, 2, 1, 1], [2, 2, 1, 1, 1, 4], [4, 1, 3, 1, 1, 1], [2, 4, 1, 1, 1, 2], [1, 3, 4, 1, 1, 1], [1, 1, 1, 2, 4, 2], [1, 2, 1, 1, 4, 2], [1, 2, 1, 2, 4, 1], [1, 1, 4, 2, 1, 2], [1, 2, 4, 1, 1, 2], [1, 2, 4, 2, 1, 1], [4, 1, 1, 2, 1, 2], [4, 2, 1, 1, 1, 2], [4, 2, 1, 2, 1, 1], [2, 1, 2, 1, 4, 1], [2, 1, 4, 1, 2, 1], [4, 1, 2, 1, 2, 1], [1, 1, 1, 1, 4, 3], [1, 1, 1, 3, 4, 1], [1, 3, 1, 1, 4, 1], [1, 1, 4, 1, 1, 3], [1, 1, 4, 3, 1, 1], [4, 1, 1, 1, 1, 3], [4, 1, 1, 3, 1, 1], [1, 1, 3, 1, 4, 1], [1, 1, 4, 1, 3, 1], [3, 1, 1, 1, 4, 1], [4, 1, 1, 1, 3, 1], [2, 1, 1, 4, 1, 2], [2, 1, 1, 2, 1, 4], [2, 1, 1, 2, 3, 2], [2, 3, 3, 1, 1, 1, 2]] },\n    SINGLE_CODE_ERROR: { value: 0.64 },\n    AVG_CODE_ERROR: { value: 0.30 },\n    FORMAT: { value: \"code_128\", writeable: false },\n    MODULE_INDICES: { value: { bar: [0, 2, 4], space: [1, 3, 5] } }\n};\n\nCode128Reader.prototype = Object.create(_barcode_reader2.default.prototype, properties);\nCode128Reader.prototype.constructor = Code128Reader;\n\nCode128Reader.prototype._decodeCode = function (start, correction) {\n    var counter = [0, 0, 0, 0, 0, 0],\n        i,\n        self = this,\n        offset = start,\n        isWhite = !self._row[offset],\n        counterPos = 0,\n        bestMatch = {\n        error: Number.MAX_VALUE,\n        code: -1,\n        start: start,\n        end: start,\n        correction: {\n            bar: 1,\n            space: 1\n        }\n    },\n        code,\n        error;\n\n    for (i = offset; i < self._row.length; i++) {\n        if (self._row[i] ^ isWhite) {\n            counter[counterPos]++;\n        } else {\n            if (counterPos === counter.length - 1) {\n                if (correction) {\n                    self._correct(counter, correction);\n                }\n                for (code = 0; code < self.CODE_PATTERN.length; code++) {\n                    error = self._matchPattern(counter, self.CODE_PATTERN[code]);\n                    if (error < bestMatch.error) {\n                        bestMatch.code = code;\n                        bestMatch.error = error;\n                    }\n                }\n                bestMatch.end = i;\n                if (bestMatch.code === -1 || bestMatch.error > self.AVG_CODE_ERROR) {\n                    return null;\n                }\n                if (self.CODE_PATTERN[bestMatch.code]) {\n                    bestMatch.correction.bar = calculateCorrection(self.CODE_PATTERN[bestMatch.code], counter, this.MODULE_INDICES.bar);\n                    bestMatch.correction.space = calculateCorrection(self.CODE_PATTERN[bestMatch.code], counter, this.MODULE_INDICES.space);\n                }\n                return bestMatch;\n            } else {\n                counterPos++;\n            }\n            counter[counterPos] = 1;\n            isWhite = !isWhite;\n        }\n    }\n    return null;\n};\n\nCode128Reader.prototype._correct = function (counter, correction) {\n    this._correctBars(counter, correction.bar, this.MODULE_INDICES.bar);\n    this._correctBars(counter, correction.space, this.MODULE_INDICES.space);\n};\n\nCode128Reader.prototype._findStart = function () {\n    var counter = [0, 0, 0, 0, 0, 0],\n        i,\n        self = this,\n        offset = self._nextSet(self._row),\n        isWhite = false,\n        counterPos = 0,\n        bestMatch = {\n        error: Number.MAX_VALUE,\n        code: -1,\n        start: 0,\n        end: 0,\n        correction: {\n            bar: 1,\n            space: 1\n        }\n    },\n        code,\n        error,\n        j,\n        sum;\n\n    for (i = offset; i < self._row.length; i++) {\n        if (self._row[i] ^ isWhite) {\n            counter[counterPos]++;\n        } else {\n            if (counterPos === counter.length - 1) {\n                sum = 0;\n                for (j = 0; j < counter.length; j++) {\n                    sum += counter[j];\n                }\n                for (code = self.START_CODE_A; code <= self.START_CODE_C; code++) {\n                    error = self._matchPattern(counter, self.CODE_PATTERN[code]);\n                    if (error < bestMatch.error) {\n                        bestMatch.code = code;\n                        bestMatch.error = error;\n                    }\n                }\n                if (bestMatch.error < self.AVG_CODE_ERROR) {\n                    bestMatch.start = i - sum;\n                    bestMatch.end = i;\n                    bestMatch.correction.bar = calculateCorrection(self.CODE_PATTERN[bestMatch.code], counter, this.MODULE_INDICES.bar);\n                    bestMatch.correction.space = calculateCorrection(self.CODE_PATTERN[bestMatch.code], counter, this.MODULE_INDICES.space);\n                    return bestMatch;\n                }\n\n                for (j = 0; j < 4; j++) {\n                    counter[j] = counter[j + 2];\n                }\n                counter[4] = 0;\n                counter[5] = 0;\n                counterPos--;\n            } else {\n                counterPos++;\n            }\n            counter[counterPos] = 1;\n            isWhite = !isWhite;\n        }\n    }\n    return null;\n};\n\nCode128Reader.prototype._decode = function () {\n    var self = this,\n        startInfo = self._findStart(),\n        code = null,\n        done = false,\n        result = [],\n        multiplier = 0,\n        checksum = 0,\n        codeset,\n        rawResult = [],\n        decodedCodes = [],\n        shiftNext = false,\n        unshift,\n        removeLastCharacter = true;\n\n    if (startInfo === null) {\n        return null;\n    }\n    code = {\n        code: startInfo.code,\n        start: startInfo.start,\n        end: startInfo.end,\n        correction: {\n            bar: startInfo.correction.bar,\n            space: startInfo.correction.space\n        }\n    };\n    decodedCodes.push(code);\n    checksum = code.code;\n    switch (code.code) {\n        case self.START_CODE_A:\n            codeset = self.CODE_A;\n            break;\n        case self.START_CODE_B:\n            codeset = self.CODE_B;\n            break;\n        case self.START_CODE_C:\n            codeset = self.CODE_C;\n            break;\n        default:\n            return null;\n    }\n\n    while (!done) {\n        unshift = shiftNext;\n        shiftNext = false;\n        code = self._decodeCode(code.end, code.correction);\n        if (code !== null) {\n            if (code.code !== self.STOP_CODE) {\n                removeLastCharacter = true;\n            }\n\n            if (code.code !== self.STOP_CODE) {\n                rawResult.push(code.code);\n                multiplier++;\n                checksum += multiplier * code.code;\n            }\n            decodedCodes.push(code);\n\n            switch (codeset) {\n                case self.CODE_A:\n                    if (code.code < 64) {\n                        result.push(String.fromCharCode(32 + code.code));\n                    } else if (code.code < 96) {\n                        result.push(String.fromCharCode(code.code - 64));\n                    } else {\n                        if (code.code !== self.STOP_CODE) {\n                            removeLastCharacter = false;\n                        }\n                        switch (code.code) {\n                            case self.CODE_SHIFT:\n                                shiftNext = true;\n                                codeset = self.CODE_B;\n                                break;\n                            case self.CODE_B:\n                                codeset = self.CODE_B;\n                                break;\n                            case self.CODE_C:\n                                codeset = self.CODE_C;\n                                break;\n                            case self.STOP_CODE:\n                                done = true;\n                                break;\n                        }\n                    }\n                    break;\n                case self.CODE_B:\n                    if (code.code < 96) {\n                        result.push(String.fromCharCode(32 + code.code));\n                    } else {\n                        if (code.code !== self.STOP_CODE) {\n                            removeLastCharacter = false;\n                        }\n                        switch (code.code) {\n                            case self.CODE_SHIFT:\n                                shiftNext = true;\n                                codeset = self.CODE_A;\n                                break;\n                            case self.CODE_A:\n                                codeset = self.CODE_A;\n                                break;\n                            case self.CODE_C:\n                                codeset = self.CODE_C;\n                                break;\n                            case self.STOP_CODE:\n                                done = true;\n                                break;\n                        }\n                    }\n                    break;\n                case self.CODE_C:\n                    if (code.code < 100) {\n                        result.push(code.code < 10 ? \"0\" + code.code : code.code);\n                    } else {\n                        if (code.code !== self.STOP_CODE) {\n                            removeLastCharacter = false;\n                        }\n                        switch (code.code) {\n                            case self.CODE_A:\n                                codeset = self.CODE_A;\n                                break;\n                            case self.CODE_B:\n                                codeset = self.CODE_B;\n                                break;\n                            case self.STOP_CODE:\n                                done = true;\n                                break;\n                        }\n                    }\n                    break;\n            }\n        } else {\n            done = true;\n        }\n        if (unshift) {\n            codeset = codeset === self.CODE_A ? self.CODE_B : self.CODE_A;\n        }\n    }\n\n    if (code === null) {\n        return null;\n    }\n\n    code.end = self._nextUnset(self._row, code.end);\n    if (!self._verifyTrailingWhitespace(code)) {\n        return null;\n    }\n\n    checksum -= multiplier * rawResult[rawResult.length - 1];\n    if (checksum % 103 !== rawResult[rawResult.length - 1]) {\n        return null;\n    }\n\n    if (!result.length) {\n        return null;\n    }\n\n    // remove last code from result (checksum)\n    if (removeLastCharacter) {\n        result.splice(result.length - 1, 1);\n    }\n\n    return {\n        code: result.join(\"\"),\n        start: startInfo.start,\n        end: code.end,\n        codeset: codeset,\n        startInfo: startInfo,\n        decodedCodes: decodedCodes,\n        endInfo: code\n    };\n};\n\n_barcode_reader2.default.prototype._verifyTrailingWhitespace = function (endInfo) {\n    var self = this,\n        trailingWhitespaceEnd;\n\n    trailingWhitespaceEnd = endInfo.end + (endInfo.end - endInfo.start) / 2;\n    if (trailingWhitespaceEnd < self._row.length) {\n        if (self._matchRange(endInfo.end, trailingWhitespaceEnd, 0)) {\n            return endInfo;\n        }\n    }\n    return null;\n};\n\nfunction calculateCorrection(expected, normalized, indices) {\n    var length = indices.length,\n        sumNormalized = 0,\n        sumExpected = 0;\n\n    while (length--) {\n        sumExpected += expected[indices[length]];\n        sumNormalized += normalized[indices[length]];\n    }\n    return sumExpected / sumNormalized;\n}\n\nexports.default = Code128Reader;\n\n/***/ }),\n/* 68 */\n/***/ (function(module, exports, __nested_webpack_require_216342__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _code_39_reader = __nested_webpack_require_216342__(31);\n\nvar _code_39_reader2 = _interopRequireDefault(_code_39_reader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction Code39VINReader() {\n    _code_39_reader2.default.call(this);\n}\n\nvar patterns = {\n    IOQ: /[IOQ]/g,\n    AZ09: /[A-Z0-9]{17}/\n};\n\nCode39VINReader.prototype = Object.create(_code_39_reader2.default.prototype);\nCode39VINReader.prototype.constructor = Code39VINReader;\n\n// Cribbed from:\n// https://github.com/zxing/zxing/blob/master/core/src/main/java/com/google/zxing/client/result/VINResultParser.java\nCode39VINReader.prototype._decode = function () {\n    var result = _code_39_reader2.default.prototype._decode.apply(this);\n    if (!result) {\n        return null;\n    }\n\n    var code = result.code;\n\n    if (!code) {\n        return null;\n    }\n\n    code = code.replace(patterns.IOQ, '');\n\n    if (!code.match(patterns.AZ09)) {\n        if (false) {}\n        return null;\n    }\n\n    if (!this._checkChecksum(code)) {\n        return null;\n    }\n\n    result.code = code;\n    return result;\n};\n\nCode39VINReader.prototype._checkChecksum = function (code) {\n    // TODO\n    return !!code;\n};\n\nexports.default = Code39VINReader;\n\n/***/ }),\n/* 69 */\n/***/ (function(module, exports, __nested_webpack_require_217771__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _barcode_reader = __nested_webpack_require_217771__(1);\n\nvar _barcode_reader2 = _interopRequireDefault(_barcode_reader);\n\nvar _array_helper = __nested_webpack_require_217771__(3);\n\nvar _array_helper2 = _interopRequireDefault(_array_helper);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction Code93Reader() {\n    _barcode_reader2.default.call(this);\n}\n\nvar ALPHABETH_STRING = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ-. $/+%abcd*\";\n\nvar properties = {\n    ALPHABETH_STRING: { value: ALPHABETH_STRING },\n    ALPHABET: { value: ALPHABETH_STRING.split('').map(function (char) {\n            return char.charCodeAt(0);\n        }) },\n    CHARACTER_ENCODINGS: { value: [0x114, 0x148, 0x144, 0x142, 0x128, 0x124, 0x122, 0x150, 0x112, 0x10A, 0x1A8, 0x1A4, 0x1A2, 0x194, 0x192, 0x18A, 0x168, 0x164, 0x162, 0x134, 0x11A, 0x158, 0x14C, 0x146, 0x12C, 0x116, 0x1B4, 0x1B2, 0x1AC, 0x1A6, 0x196, 0x19A, 0x16C, 0x166, 0x136, 0x13A, 0x12E, 0x1D4, 0x1D2, 0x1CA, 0x16E, 0x176, 0x1AE, 0x126, 0x1DA, 0x1D6, 0x132, 0x15E] },\n    ASTERISK: { value: 0x15E },\n    FORMAT: { value: \"code_93\", writeable: false }\n};\n\nCode93Reader.prototype = Object.create(_barcode_reader2.default.prototype, properties);\nCode93Reader.prototype.constructor = Code93Reader;\n\nCode93Reader.prototype._decode = function () {\n    var self = this,\n        counters = [0, 0, 0, 0, 0, 0],\n        result = [],\n        start = self._findStart(),\n        decodedChar,\n        lastStart,\n        pattern,\n        nextStart;\n\n    if (!start) {\n        return null;\n    }\n    nextStart = self._nextSet(self._row, start.end);\n\n    do {\n        counters = self._toCounters(nextStart, counters);\n        pattern = self._toPattern(counters);\n        if (pattern < 0) {\n            return null;\n        }\n        decodedChar = self._patternToChar(pattern);\n        if (decodedChar < 0) {\n            return null;\n        }\n        result.push(decodedChar);\n        lastStart = nextStart;\n        nextStart += _array_helper2.default.sum(counters);\n        nextStart = self._nextSet(self._row, nextStart);\n    } while (decodedChar !== '*');\n    result.pop();\n\n    if (!result.length) {\n        return null;\n    }\n\n    if (!self._verifyEnd(lastStart, nextStart, counters)) {\n        return null;\n    }\n\n    if (!self._verifyChecksums(result)) {\n        return null;\n    }\n\n    result = result.slice(0, result.length - 2);\n    if ((result = self._decodeExtended(result)) === null) {\n        return null;\n    };\n\n    return {\n        code: result.join(\"\"),\n        start: start.start,\n        end: nextStart,\n        startInfo: start,\n        decodedCodes: result\n    };\n};\n\nCode93Reader.prototype._verifyEnd = function (lastStart, nextStart) {\n    if (lastStart === nextStart || !this._row[nextStart]) {\n        return false;\n    }\n    return true;\n};\n\nCode93Reader.prototype._patternToChar = function (pattern) {\n    var i,\n        self = this;\n\n    for (i = 0; i < self.CHARACTER_ENCODINGS.length; i++) {\n        if (self.CHARACTER_ENCODINGS[i] === pattern) {\n            return String.fromCharCode(self.ALPHABET[i]);\n        }\n    }\n    return -1;\n};\n\nCode93Reader.prototype._toPattern = function (counters) {\n    var numCounters = counters.length;\n    var pattern = 0;\n    var sum = 0;\n    for (var i = 0; i < numCounters; i++) {\n        sum += counters[i];\n    }\n\n    for (var _i = 0; _i < numCounters; _i++) {\n        var normalized = Math.round(counters[_i] * 9 / sum);\n        if (normalized < 1 || normalized > 4) {\n            return -1;\n        }\n        if ((_i & 1) === 0) {\n            for (var j = 0; j < normalized; j++) {\n                pattern = pattern << 1 | 1;\n            }\n        } else {\n            pattern <<= normalized;\n        }\n    }\n\n    return pattern;\n};\n\nCode93Reader.prototype._findStart = function () {\n    var self = this,\n        offset = self._nextSet(self._row),\n        patternStart = offset,\n        counter = [0, 0, 0, 0, 0, 0],\n        counterPos = 0,\n        isWhite = false,\n        i,\n        j,\n        whiteSpaceMustStart;\n\n    for (i = offset; i < self._row.length; i++) {\n        if (self._row[i] ^ isWhite) {\n            counter[counterPos]++;\n        } else {\n            if (counterPos === counter.length - 1) {\n                // find start pattern\n                if (self._toPattern(counter) === self.ASTERISK) {\n                    whiteSpaceMustStart = Math.floor(Math.max(0, patternStart - (i - patternStart) / 4));\n                    if (self._matchRange(whiteSpaceMustStart, patternStart, 0)) {\n                        return {\n                            start: patternStart,\n                            end: i\n                        };\n                    }\n                }\n\n                patternStart += counter[0] + counter[1];\n                for (j = 0; j < 4; j++) {\n                    counter[j] = counter[j + 2];\n                }\n                counter[4] = 0;\n                counter[5] = 0;\n                counterPos--;\n            } else {\n                counterPos++;\n            }\n            counter[counterPos] = 1;\n            isWhite = !isWhite;\n        }\n    }\n    return null;\n};\n\nCode93Reader.prototype._decodeExtended = function (charArray) {\n    var length = charArray.length;\n    var result = [];\n    for (var i = 0; i < length; i++) {\n        var char = charArray[i];\n        if (char >= 'a' && char <= 'd') {\n            if (i > length - 2) {\n                return null;\n            }\n            var nextChar = charArray[++i];\n            var nextCharCode = nextChar.charCodeAt(0);\n            var decodedChar = void 0;\n            switch (char) {\n                case 'a':\n                    if (nextChar >= 'A' && nextChar <= 'Z') {\n                        decodedChar = String.fromCharCode(nextCharCode - 64);\n                    } else {\n                        return null;\n                    }\n                    break;\n                case 'b':\n                    if (nextChar >= 'A' && nextChar <= 'E') {\n                        decodedChar = String.fromCharCode(nextCharCode - 38);\n                    } else if (nextChar >= 'F' && nextChar <= 'J') {\n                        decodedChar = String.fromCharCode(nextCharCode - 11);\n                    } else if (nextChar >= 'K' && nextChar <= 'O') {\n                        decodedChar = String.fromCharCode(nextCharCode + 16);\n                    } else if (nextChar >= 'P' && nextChar <= 'S') {\n                        decodedChar = String.fromCharCode(nextCharCode + 43);\n                    } else if (nextChar >= 'T' && nextChar <= 'Z') {\n                        decodedChar = String.fromCharCode(127);\n                    } else {\n                        return null;\n                    }\n                    break;\n                case 'c':\n                    if (nextChar >= 'A' && nextChar <= 'O') {\n                        decodedChar = String.fromCharCode(nextCharCode - 32);\n                    } else if (nextChar === 'Z') {\n                        decodedChar = ':';\n                    } else {\n                        return null;\n                    }\n                    break;\n                case 'd':\n                    if (nextChar >= 'A' && nextChar <= 'Z') {\n                        decodedChar = String.fromCharCode(nextCharCode + 32);\n                    } else {\n                        return null;\n                    }\n                    break;\n            }\n            result.push(decodedChar);\n        } else {\n            result.push(char);\n        }\n    }\n    return result;\n};\n\nCode93Reader.prototype._verifyChecksums = function (charArray) {\n    return this._matchCheckChar(charArray, charArray.length - 2, 20) && this._matchCheckChar(charArray, charArray.length - 1, 15);\n};\n\nCode93Reader.prototype._matchCheckChar = function (charArray, index, maxWeight) {\n    var _this = this;\n\n    var arrayToCheck = charArray.slice(0, index);\n    var length = arrayToCheck.length;\n    var weightedSums = arrayToCheck.reduce(function (sum, char, i) {\n        var weight = (i * -1 + (length - 1)) % maxWeight + 1;\n        var value = _this.ALPHABET.indexOf(char.charCodeAt(0));\n        return sum + weight * value;\n    }, 0);\n\n    var checkChar = this.ALPHABET[weightedSums % 47];\n    return checkChar === charArray[index].charCodeAt(0);\n};\n\nexports.default = Code93Reader;\n\n/***/ }),\n/* 70 */\n/***/ (function(module, exports, __nested_webpack_require_226219__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _ean_reader = __nested_webpack_require_226219__(4);\n\nvar _ean_reader2 = _interopRequireDefault(_ean_reader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction EAN2Reader() {\n    _ean_reader2.default.call(this);\n}\n\nvar properties = {\n    FORMAT: { value: \"ean_2\", writeable: false }\n};\n\nEAN2Reader.prototype = Object.create(_ean_reader2.default.prototype, properties);\nEAN2Reader.prototype.constructor = EAN2Reader;\n\nEAN2Reader.prototype.decode = function (row, start) {\n    this._row = row;\n    var counters = [0, 0, 0, 0],\n        codeFrequency = 0,\n        i = 0,\n        offset = start,\n        end = this._row.length,\n        code,\n        result = [],\n        decodedCodes = [];\n\n    for (i = 0; i < 2 && offset < end; i++) {\n        code = this._decodeCode(offset);\n        if (!code) {\n            return null;\n        }\n        decodedCodes.push(code);\n        result.push(code.code % 10);\n        if (code.code >= this.CODE_G_START) {\n            codeFrequency |= 1 << 1 - i;\n        }\n        if (i != 1) {\n            offset = this._nextSet(this._row, code.end);\n            offset = this._nextUnset(this._row, offset);\n        }\n    }\n\n    if (result.length != 2 || parseInt(result.join(\"\")) % 4 !== codeFrequency) {\n        return null;\n    }\n    return {\n        code: result.join(\"\"),\n        decodedCodes: decodedCodes,\n        end: code.end\n    };\n};\n\nexports.default = EAN2Reader;\n\n/***/ }),\n/* 71 */\n/***/ (function(module, exports, __nested_webpack_require_227786__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _ean_reader = __nested_webpack_require_227786__(4);\n\nvar _ean_reader2 = _interopRequireDefault(_ean_reader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction EAN5Reader() {\n    _ean_reader2.default.call(this);\n}\n\nvar properties = {\n    FORMAT: { value: \"ean_5\", writeable: false }\n};\n\nvar CHECK_DIGIT_ENCODINGS = [24, 20, 18, 17, 12, 6, 3, 10, 9, 5];\n\nEAN5Reader.prototype = Object.create(_ean_reader2.default.prototype, properties);\nEAN5Reader.prototype.constructor = EAN5Reader;\n\nEAN5Reader.prototype.decode = function (row, start) {\n    this._row = row;\n    var counters = [0, 0, 0, 0],\n        codeFrequency = 0,\n        i = 0,\n        offset = start,\n        end = this._row.length,\n        code,\n        result = [],\n        decodedCodes = [];\n\n    for (i = 0; i < 5 && offset < end; i++) {\n        code = this._decodeCode(offset);\n        if (!code) {\n            return null;\n        }\n        decodedCodes.push(code);\n        result.push(code.code % 10);\n        if (code.code >= this.CODE_G_START) {\n            codeFrequency |= 1 << 4 - i;\n        }\n        if (i != 4) {\n            offset = this._nextSet(this._row, code.end);\n            offset = this._nextUnset(this._row, offset);\n        }\n    }\n\n    if (result.length != 5) {\n        return null;\n    }\n\n    if (extensionChecksum(result) !== determineCheckDigit(codeFrequency)) {\n        return null;\n    }\n    return {\n        code: result.join(\"\"),\n        decodedCodes: decodedCodes,\n        end: code.end\n    };\n};\n\nfunction determineCheckDigit(codeFrequency) {\n    var i;\n    for (i = 0; i < 10; i++) {\n        if (codeFrequency === CHECK_DIGIT_ENCODINGS[i]) {\n            return i;\n        }\n    }\n    return null;\n}\n\nfunction extensionChecksum(result) {\n    var length = result.length,\n        sum = 0,\n        i;\n\n    for (i = length - 2; i >= 0; i -= 2) {\n        sum += result[i];\n    }\n    sum *= 3;\n    for (i = length - 1; i >= 0; i -= 2) {\n        sum += result[i];\n    }\n    sum *= 3;\n    return sum % 10;\n}\n\nexports.default = EAN5Reader;\n\n/***/ }),\n/* 72 */\n/***/ (function(module, exports, __nested_webpack_require_229977__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _ean_reader = __nested_webpack_require_229977__(4);\n\nvar _ean_reader2 = _interopRequireDefault(_ean_reader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction EAN8Reader(opts, supplements) {\n    _ean_reader2.default.call(this, opts, supplements);\n}\n\nvar properties = {\n    FORMAT: { value: \"ean_8\", writeable: false }\n};\n\nEAN8Reader.prototype = Object.create(_ean_reader2.default.prototype, properties);\nEAN8Reader.prototype.constructor = EAN8Reader;\n\nEAN8Reader.prototype._decodePayload = function (code, result, decodedCodes) {\n    var i,\n        self = this;\n\n    for (i = 0; i < 4; i++) {\n        code = self._decodeCode(code.end, self.CODE_G_START);\n        if (!code) {\n            return null;\n        }\n        result.push(code.code);\n        decodedCodes.push(code);\n    }\n\n    code = self._findPattern(self.MIDDLE_PATTERN, code.end, true, false);\n    if (code === null) {\n        return null;\n    }\n    decodedCodes.push(code);\n\n    for (i = 0; i < 4; i++) {\n        code = self._decodeCode(code.end, self.CODE_G_START);\n        if (!code) {\n            return null;\n        }\n        decodedCodes.push(code);\n        result.push(code.code);\n    }\n\n    return code;\n};\n\nexports.default = EAN8Reader;\n\n/***/ }),\n/* 73 */\n/***/ (function(module, exports, __nested_webpack_require_231355__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _merge2 = __nested_webpack_require_231355__(28);\n\nvar _merge3 = _interopRequireDefault(_merge2);\n\nvar _barcode_reader = __nested_webpack_require_231355__(1);\n\nvar _barcode_reader2 = _interopRequireDefault(_barcode_reader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction I2of5Reader(opts) {\n    opts = (0, _merge3.default)(getDefaulConfig(), opts);\n    _barcode_reader2.default.call(this, opts);\n    this.barSpaceRatio = [1, 1];\n    if (opts.normalizeBarSpaceWidth) {\n        this.SINGLE_CODE_ERROR = 0.38;\n        this.AVG_CODE_ERROR = 0.09;\n    }\n}\n\nfunction getDefaulConfig() {\n    var config = {};\n\n    Object.keys(I2of5Reader.CONFIG_KEYS).forEach(function (key) {\n        config[key] = I2of5Reader.CONFIG_KEYS[key].default;\n    });\n    return config;\n}\n\nvar N = 1,\n    W = 3,\n    properties = {\n    START_PATTERN: { value: [N, N, N, N] },\n    STOP_PATTERN: { value: [N, N, W] },\n    CODE_PATTERN: { value: [[N, N, W, W, N], [W, N, N, N, W], [N, W, N, N, W], [W, W, N, N, N], [N, N, W, N, W], [W, N, W, N, N], [N, W, W, N, N], [N, N, N, W, W], [W, N, N, W, N], [N, W, N, W, N]] },\n    SINGLE_CODE_ERROR: { value: 0.78, writable: true },\n    AVG_CODE_ERROR: { value: 0.38, writable: true },\n    MAX_CORRECTION_FACTOR: { value: 5 },\n    FORMAT: { value: \"i2of5\" }\n};\n\nI2of5Reader.prototype = Object.create(_barcode_reader2.default.prototype, properties);\nI2of5Reader.prototype.constructor = I2of5Reader;\n\nI2of5Reader.prototype._matchPattern = function (counter, code) {\n    if (this.config.normalizeBarSpaceWidth) {\n        var i,\n            counterSum = [0, 0],\n            codeSum = [0, 0],\n            correction = [0, 0],\n            correctionRatio = this.MAX_CORRECTION_FACTOR,\n            correctionRatioInverse = 1 / correctionRatio;\n\n        for (i = 0; i < counter.length; i++) {\n            counterSum[i % 2] += counter[i];\n            codeSum[i % 2] += code[i];\n        }\n        correction[0] = codeSum[0] / counterSum[0];\n        correction[1] = codeSum[1] / counterSum[1];\n\n        correction[0] = Math.max(Math.min(correction[0], correctionRatio), correctionRatioInverse);\n        correction[1] = Math.max(Math.min(correction[1], correctionRatio), correctionRatioInverse);\n        this.barSpaceRatio = correction;\n        for (i = 0; i < counter.length; i++) {\n            counter[i] *= this.barSpaceRatio[i % 2];\n        }\n    }\n    return _barcode_reader2.default.prototype._matchPattern.call(this, counter, code);\n};\n\nI2of5Reader.prototype._findPattern = function (pattern, offset, isWhite, tryHarder) {\n    var counter = [],\n        self = this,\n        i,\n        counterPos = 0,\n        bestMatch = {\n        error: Number.MAX_VALUE,\n        code: -1,\n        start: 0,\n        end: 0\n    },\n        error,\n        j,\n        sum,\n        normalized,\n        epsilon = self.AVG_CODE_ERROR;\n\n    isWhite = isWhite || false;\n    tryHarder = tryHarder || false;\n\n    if (!offset) {\n        offset = self._nextSet(self._row);\n    }\n\n    for (i = 0; i < pattern.length; i++) {\n        counter[i] = 0;\n    }\n\n    for (i = offset; i < self._row.length; i++) {\n        if (self._row[i] ^ isWhite) {\n            counter[counterPos]++;\n        } else {\n            if (counterPos === counter.length - 1) {\n                sum = 0;\n                for (j = 0; j < counter.length; j++) {\n                    sum += counter[j];\n                }\n                error = self._matchPattern(counter, pattern);\n                if (error < epsilon) {\n                    bestMatch.error = error;\n                    bestMatch.start = i - sum;\n                    bestMatch.end = i;\n                    return bestMatch;\n                }\n                if (tryHarder) {\n                    for (j = 0; j < counter.length - 2; j++) {\n                        counter[j] = counter[j + 2];\n                    }\n                    counter[counter.length - 2] = 0;\n                    counter[counter.length - 1] = 0;\n                    counterPos--;\n                } else {\n                    return null;\n                }\n            } else {\n                counterPos++;\n            }\n            counter[counterPos] = 1;\n            isWhite = !isWhite;\n        }\n    }\n    return null;\n};\n\nI2of5Reader.prototype._findStart = function () {\n    var self = this,\n        leadingWhitespaceStart,\n        offset = self._nextSet(self._row),\n        startInfo,\n        narrowBarWidth = 1;\n\n    while (!startInfo) {\n        startInfo = self._findPattern(self.START_PATTERN, offset, false, true);\n        if (!startInfo) {\n            return null;\n        }\n        narrowBarWidth = Math.floor((startInfo.end - startInfo.start) / 4);\n        leadingWhitespaceStart = startInfo.start - narrowBarWidth * 10;\n        if (leadingWhitespaceStart >= 0) {\n            if (self._matchRange(leadingWhitespaceStart, startInfo.start, 0)) {\n                return startInfo;\n            }\n        }\n        offset = startInfo.end;\n        startInfo = null;\n    }\n};\n\nI2of5Reader.prototype._verifyTrailingWhitespace = function (endInfo) {\n    var self = this,\n        trailingWhitespaceEnd;\n\n    trailingWhitespaceEnd = endInfo.end + (endInfo.end - endInfo.start) / 2;\n    if (trailingWhitespaceEnd < self._row.length) {\n        if (self._matchRange(endInfo.end, trailingWhitespaceEnd, 0)) {\n            return endInfo;\n        }\n    }\n    return null;\n};\n\nI2of5Reader.prototype._findEnd = function () {\n    var self = this,\n        endInfo,\n        tmp;\n\n    self._row.reverse();\n    endInfo = self._findPattern(self.STOP_PATTERN);\n    self._row.reverse();\n\n    if (endInfo === null) {\n        return null;\n    }\n\n    // reverse numbers\n    tmp = endInfo.start;\n    endInfo.start = self._row.length - endInfo.end;\n    endInfo.end = self._row.length - tmp;\n\n    return endInfo !== null ? self._verifyTrailingWhitespace(endInfo) : null;\n};\n\nI2of5Reader.prototype._decodePair = function (counterPair) {\n    var i,\n        code,\n        codes = [],\n        self = this;\n\n    for (i = 0; i < counterPair.length; i++) {\n        code = self._decodeCode(counterPair[i]);\n        if (!code) {\n            return null;\n        }\n        codes.push(code);\n    }\n    return codes;\n};\n\nI2of5Reader.prototype._decodeCode = function (counter) {\n    var j,\n        self = this,\n        sum = 0,\n        normalized,\n        error,\n        epsilon = self.AVG_CODE_ERROR,\n        code,\n        bestMatch = {\n        error: Number.MAX_VALUE,\n        code: -1,\n        start: 0,\n        end: 0\n    };\n\n    for (j = 0; j < counter.length; j++) {\n        sum += counter[j];\n    }\n    for (code = 0; code < self.CODE_PATTERN.length; code++) {\n        error = self._matchPattern(counter, self.CODE_PATTERN[code]);\n        if (error < bestMatch.error) {\n            bestMatch.code = code;\n            bestMatch.error = error;\n        }\n    }\n    if (bestMatch.error < epsilon) {\n        return bestMatch;\n    }\n};\n\nI2of5Reader.prototype._decodePayload = function (counters, result, decodedCodes) {\n    var i,\n        self = this,\n        pos = 0,\n        counterLength = counters.length,\n        counterPair = [[0, 0, 0, 0, 0], [0, 0, 0, 0, 0]],\n        codes;\n\n    while (pos < counterLength) {\n        for (i = 0; i < 5; i++) {\n            counterPair[0][i] = counters[pos] * this.barSpaceRatio[0];\n            counterPair[1][i] = counters[pos + 1] * this.barSpaceRatio[1];\n            pos += 2;\n        }\n        codes = self._decodePair(counterPair);\n        if (!codes) {\n            return null;\n        }\n        for (i = 0; i < codes.length; i++) {\n            result.push(codes[i].code + \"\");\n            decodedCodes.push(codes[i]);\n        }\n    }\n    return codes;\n};\n\nI2of5Reader.prototype._verifyCounterLength = function (counters) {\n    return counters.length % 10 === 0;\n};\n\nI2of5Reader.prototype._decode = function () {\n    var startInfo,\n        endInfo,\n        self = this,\n        code,\n        result = [],\n        decodedCodes = [],\n        counters;\n\n    startInfo = self._findStart();\n    if (!startInfo) {\n        return null;\n    }\n    decodedCodes.push(startInfo);\n\n    endInfo = self._findEnd();\n    if (!endInfo) {\n        return null;\n    }\n\n    counters = self._fillCounters(startInfo.end, endInfo.start, false);\n    if (!self._verifyCounterLength(counters)) {\n        return null;\n    }\n    code = self._decodePayload(counters, result, decodedCodes);\n    if (!code) {\n        return null;\n    }\n    if (result.length % 2 !== 0 || result.length < 6) {\n        return null;\n    }\n\n    decodedCodes.push(endInfo);\n    return {\n        code: result.join(\"\"),\n        start: startInfo.start,\n        end: endInfo.end,\n        startInfo: startInfo,\n        decodedCodes: decodedCodes\n    };\n};\n\nI2of5Reader.CONFIG_KEYS = {\n    normalizeBarSpaceWidth: {\n        'type': 'boolean',\n        'default': false,\n        'description': 'If true, the reader tries to normalize the' + 'width-difference between bars and spaces'\n    }\n};\n\nexports.default = I2of5Reader;\n\n/***/ }),\n/* 74 */\n/***/ (function(module, exports, __nested_webpack_require_240465__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _ean_reader = __nested_webpack_require_240465__(4);\n\nvar _ean_reader2 = _interopRequireDefault(_ean_reader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction UPCEReader(opts, supplements) {\n    _ean_reader2.default.call(this, opts, supplements);\n}\n\nvar properties = {\n    CODE_FREQUENCY: { value: [[56, 52, 50, 49, 44, 38, 35, 42, 41, 37], [7, 11, 13, 14, 19, 25, 28, 21, 22, 26]] },\n    STOP_PATTERN: { value: [1 / 6 * 7, 1 / 6 * 7, 1 / 6 * 7, 1 / 6 * 7, 1 / 6 * 7, 1 / 6 * 7] },\n    FORMAT: { value: \"upc_e\", writeable: false }\n};\n\nUPCEReader.prototype = Object.create(_ean_reader2.default.prototype, properties);\nUPCEReader.prototype.constructor = UPCEReader;\n\nUPCEReader.prototype._decodePayload = function (code, result, decodedCodes) {\n    var i,\n        self = this,\n        codeFrequency = 0x0;\n\n    for (i = 0; i < 6; i++) {\n        code = self._decodeCode(code.end);\n        if (!code) {\n            return null;\n        }\n        if (code.code >= self.CODE_G_START) {\n            code.code = code.code - self.CODE_G_START;\n            codeFrequency |= 1 << 5 - i;\n        }\n        result.push(code.code);\n        decodedCodes.push(code);\n    }\n    if (!self._determineParity(codeFrequency, result)) {\n        return null;\n    }\n\n    return code;\n};\n\nUPCEReader.prototype._determineParity = function (codeFrequency, result) {\n    var i, nrSystem;\n\n    for (nrSystem = 0; nrSystem < this.CODE_FREQUENCY.length; nrSystem++) {\n        for (i = 0; i < this.CODE_FREQUENCY[nrSystem].length; i++) {\n            if (codeFrequency === this.CODE_FREQUENCY[nrSystem][i]) {\n                result.unshift(nrSystem);\n                result.push(i);\n                return true;\n            }\n        }\n    }\n    return false;\n};\n\nUPCEReader.prototype._convertToUPCA = function (result) {\n    var upca = [result[0]],\n        lastDigit = result[result.length - 2];\n\n    if (lastDigit <= 2) {\n        upca = upca.concat(result.slice(1, 3)).concat([lastDigit, 0, 0, 0, 0]).concat(result.slice(3, 6));\n    } else if (lastDigit === 3) {\n        upca = upca.concat(result.slice(1, 4)).concat([0, 0, 0, 0, 0]).concat(result.slice(4, 6));\n    } else if (lastDigit === 4) {\n        upca = upca.concat(result.slice(1, 5)).concat([0, 0, 0, 0, 0, result[5]]);\n    } else {\n        upca = upca.concat(result.slice(1, 6)).concat([0, 0, 0, 0, lastDigit]);\n    }\n\n    upca.push(result[result.length - 1]);\n    return upca;\n};\n\nUPCEReader.prototype._checksum = function (result) {\n    return _ean_reader2.default.prototype._checksum.call(this, this._convertToUPCA(result));\n};\n\nUPCEReader.prototype._findEnd = function (offset, isWhite) {\n    isWhite = true;\n    return _ean_reader2.default.prototype._findEnd.call(this, offset, isWhite);\n};\n\nUPCEReader.prototype._verifyTrailingWhitespace = function (endInfo) {\n    var self = this,\n        trailingWhitespaceEnd;\n\n    trailingWhitespaceEnd = endInfo.end + (endInfo.end - endInfo.start) / 2;\n    if (trailingWhitespaceEnd < self._row.length) {\n        if (self._matchRange(endInfo.end, trailingWhitespaceEnd, 0)) {\n            return endInfo;\n        }\n    }\n};\n\nexports.default = UPCEReader;\n\n/***/ }),\n/* 75 */\n/***/ (function(module, exports, __nested_webpack_require_243759__) {\n\n\"use strict\";\n\n\nexports.__esModule = true;\n\nvar _ean_reader = __nested_webpack_require_243759__(4);\n\nvar _ean_reader2 = _interopRequireDefault(_ean_reader);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction UPCReader(opts, supplements) {\n    _ean_reader2.default.call(this, opts, supplements);\n}\n\nvar properties = {\n    FORMAT: { value: \"upc_a\", writeable: false }\n};\n\nUPCReader.prototype = Object.create(_ean_reader2.default.prototype, properties);\nUPCReader.prototype.constructor = UPCReader;\n\nUPCReader.prototype._decode = function () {\n    var result = _ean_reader2.default.prototype._decode.call(this);\n\n    if (result && result.code && result.code.length === 13 && result.code.charAt(0) === \"0\") {\n        result.code = result.code.substring(1);\n        return result;\n    }\n    return null;\n};\n\nexports.default = UPCReader;\n\n/***/ }),\n/* 76 */\n/***/ (function(module, exports) {\n\nmodule.exports = copy\n\n/**\n * Copy the values from one mat2 to another\n *\n * @alias mat2.copy\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nfunction copy(out, a) {\n  out[0] = a[0]\n  out[1] = a[1]\n  out[2] = a[2]\n  out[3] = a[3]\n  return out\n}\n\n\n/***/ }),\n/* 77 */\n/***/ (function(module, exports) {\n\nmodule.exports = create\n\n/**\n * Creates a new identity mat2\n *\n * @alias mat2.create\n * @returns {mat2} a new 2x2 matrix\n */\nfunction create() {\n  var out = new Float32Array(4)\n  out[0] = 1\n  out[1] = 0\n  out[2] = 0\n  out[3] = 1\n  return out\n}\n\n\n/***/ }),\n/* 78 */\n/***/ (function(module, exports) {\n\nmodule.exports = invert\n\n/**\n * Inverts a mat2\n *\n * @alias mat2.invert\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nfunction invert(out, a) {\n  var a0 = a[0]\n  var a1 = a[1]\n  var a2 = a[2]\n  var a3 = a[3]\n  var det = a0 * a3 - a2 * a1\n\n  if (!det) return null\n  det = 1.0 / det\n\n  out[0] =  a3 * det\n  out[1] = -a1 * det\n  out[2] = -a2 * det\n  out[3] =  a0 * det\n\n  return out\n}\n\n\n/***/ }),\n/* 79 */\n/***/ (function(module, exports) {\n\nmodule.exports = scale\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nfunction scale(out, a, b) {\n    out[0] = a[0] * b\n    out[1] = a[1] * b\n    return out\n}\n\n/***/ }),\n/* 80 */\n/***/ (function(module, exports) {\n\nmodule.exports = transformMat2\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nfunction transformMat2(out, a, m) {\n    var x = a[0],\n        y = a[1]\n    out[0] = m[0] * x + m[2] * y\n    out[1] = m[1] * x + m[3] * y\n    return out\n}\n\n/***/ }),\n/* 81 */\n/***/ (function(module, exports) {\n\nmodule.exports = clone;\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nfunction clone(a) {\n    var out = new Float32Array(3)\n    out[0] = a[0]\n    out[1] = a[1]\n    out[2] = a[2]\n    return out\n}\n\n/***/ }),\n/* 82 */\n/***/ (function(module, exports, __nested_webpack_require_247038__) {\n\nvar hashClear = __nested_webpack_require_247038__(120),\n    hashDelete = __nested_webpack_require_247038__(121),\n    hashGet = __nested_webpack_require_247038__(122),\n    hashHas = __nested_webpack_require_247038__(123),\n    hashSet = __nested_webpack_require_247038__(124);\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nmodule.exports = Hash;\n\n\n/***/ }),\n/* 83 */\n/***/ (function(module, exports, __nested_webpack_require_247873__) {\n\nvar ListCache = __nested_webpack_require_247873__(10),\n    stackClear = __nested_webpack_require_247873__(147),\n    stackDelete = __nested_webpack_require_247873__(148),\n    stackGet = __nested_webpack_require_247873__(149),\n    stackHas = __nested_webpack_require_247873__(150),\n    stackSet = __nested_webpack_require_247873__(151);\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\nmodule.exports = Stack;\n\n\n/***/ }),\n/* 84 */\n/***/ (function(module, exports, __nested_webpack_require_248690__) {\n\nvar root = __nested_webpack_require_248690__(5);\n\n/** Built-in value references. */\nvar Uint8Array = root.Uint8Array;\n\nmodule.exports = Uint8Array;\n\n\n/***/ }),\n/* 85 */\n/***/ (function(module, exports) {\n\n/**\n * A faster alternative to `Function#apply`, this function invokes `func`\n * with the `this` binding of `thisArg` and the arguments of `args`.\n *\n * @private\n * @param {Function} func The function to invoke.\n * @param {*} thisArg The `this` binding of `func`.\n * @param {Array} args The arguments to invoke `func` with.\n * @returns {*} Returns the result of `func`.\n */\nfunction apply(func, thisArg, args) {\n  switch (args.length) {\n    case 0: return func.call(thisArg);\n    case 1: return func.call(thisArg, args[0]);\n    case 2: return func.call(thisArg, args[0], args[1]);\n    case 3: return func.call(thisArg, args[0], args[1], args[2]);\n  }\n  return func.apply(thisArg, args);\n}\n\nmodule.exports = apply;\n\n\n/***/ }),\n/* 86 */\n/***/ (function(module, exports, __nested_webpack_require_249673__) {\n\nvar baseTimes = __nested_webpack_require_249673__(105),\n    isArguments = __nested_webpack_require_249673__(18),\n    isArray = __nested_webpack_require_249673__(2),\n    isBuffer = __nested_webpack_require_249673__(44),\n    isIndex = __nested_webpack_require_249673__(15),\n    isTypedArray = __nested_webpack_require_249673__(45);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Creates an array of the enumerable property names of the array-like `value`.\n *\n * @private\n * @param {*} value The value to query.\n * @param {boolean} inherited Specify returning inherited property names.\n * @returns {Array} Returns the array of property names.\n */\nfunction arrayLikeKeys(value, inherited) {\n  var isArr = isArray(value),\n      isArg = !isArr && isArguments(value),\n      isBuff = !isArr && !isArg && isBuffer(value),\n      isType = !isArr && !isArg && !isBuff && isTypedArray(value),\n      skipIndexes = isArr || isArg || isBuff || isType,\n      result = skipIndexes ? baseTimes(value.length, String) : [],\n      length = result.length;\n\n  for (var key in value) {\n    if ((inherited || hasOwnProperty.call(value, key)) &&\n        !(skipIndexes && (\n           // Safari 9 has enumerable `arguments.length` in strict mode.\n           key == 'length' ||\n           // Node.js 0.10 has enumerable non-index properties on buffers.\n           (isBuff && (key == 'offset' || key == 'parent')) ||\n           // PhantomJS 2 has enumerable non-index properties on typed arrays.\n           (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||\n           // Skip index properties.\n           isIndex(key, length)\n        ))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = arrayLikeKeys;\n\n\n/***/ }),\n/* 87 */\n/***/ (function(module, exports) {\n\n/**\n * A specialized version of `_.map` for arrays without support for iteratee\n * shorthands.\n *\n * @private\n * @param {Array} [array] The array to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the new mapped array.\n */\nfunction arrayMap(array, iteratee) {\n  var index = -1,\n      length = array == null ? 0 : array.length,\n      result = Array(length);\n\n  while (++index < length) {\n    result[index] = iteratee(array[index], index, array);\n  }\n  return result;\n}\n\nmodule.exports = arrayMap;\n\n\n/***/ }),\n/* 88 */\n/***/ (function(module, exports) {\n\n/**\n * Appends the elements of `values` to `array`.\n *\n * @private\n * @param {Array} array The array to modify.\n * @param {Array} values The values to append.\n * @returns {Array} Returns `array`.\n */\nfunction arrayPush(array, values) {\n  var index = -1,\n      length = values.length,\n      offset = array.length;\n\n  while (++index < length) {\n    array[offset + index] = values[index];\n  }\n  return array;\n}\n\nmodule.exports = arrayPush;\n\n\n/***/ }),\n/* 89 */\n/***/ (function(module, exports, __nested_webpack_require_252640__) {\n\nvar isObject = __nested_webpack_require_252640__(0);\n\n/** Built-in value references. */\nvar objectCreate = Object.create;\n\n/**\n * The base implementation of `_.create` without support for assigning\n * properties to the created object.\n *\n * @private\n * @param {Object} proto The object to inherit from.\n * @returns {Object} Returns the new object.\n */\nvar baseCreate = (function() {\n  function object() {}\n  return function(proto) {\n    if (!isObject(proto)) {\n      return {};\n    }\n    if (objectCreate) {\n      return objectCreate(proto);\n    }\n    object.prototype = proto;\n    var result = new object;\n    object.prototype = undefined;\n    return result;\n  };\n}());\n\nmodule.exports = baseCreate;\n\n\n/***/ }),\n/* 90 */\n/***/ (function(module, exports, __nested_webpack_require_253405__) {\n\nvar arrayPush = __nested_webpack_require_253405__(88),\n    isFlattenable = __nested_webpack_require_253405__(126);\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n\n\n/***/ }),\n/* 91 */\n/***/ (function(module, exports, __nested_webpack_require_254681__) {\n\nvar createBaseFor = __nested_webpack_require_254681__(115);\n\n/**\n * The base implementation of `baseForOwn` which iterates over `object`\n * properties returned by `keysFunc` and invokes `iteratee` for each property.\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @private\n * @param {Object} object The object to iterate over.\n * @param {Function} iteratee The function invoked per iteration.\n * @param {Function} keysFunc The function to get the keys of `object`.\n * @returns {Object} Returns `object`.\n */\nvar baseFor = createBaseFor();\n\nmodule.exports = baseFor;\n\n\n/***/ }),\n/* 92 */\n/***/ (function(module, exports, __nested_webpack_require_255349__) {\n\nvar castPath = __nested_webpack_require_255349__(13),\n    toKey = __nested_webpack_require_255349__(23);\n\n/**\n * The base implementation of `_.get` without support for default values.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path of the property to get.\n * @returns {*} Returns the resolved value.\n */\nfunction baseGet(object, path) {\n  path = castPath(path, object);\n\n  var index = 0,\n      length = path.length;\n\n  while (object != null && index < length) {\n    object = object[toKey(path[index++])];\n  }\n  return (index && index == length) ? object : undefined;\n}\n\nmodule.exports = baseGet;\n\n\n/***/ }),\n/* 93 */\n/***/ (function(module, exports) {\n\n/**\n * The base implementation of `_.hasIn` without support for deep paths.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {Array|string} key The key to check.\n * @returns {boolean} Returns `true` if `key` exists, else `false`.\n */\nfunction baseHasIn(object, key) {\n  return object != null && key in Object(object);\n}\n\nmodule.exports = baseHasIn;\n\n\n/***/ }),\n/* 94 */\n/***/ (function(module, exports, __nested_webpack_require_256479__) {\n\nvar baseGetTag = __nested_webpack_require_256479__(8),\n    isObjectLike = __nested_webpack_require_256479__(6);\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]';\n\n/**\n * The base implementation of `_.isArguments`.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an `arguments` object,\n */\nfunction baseIsArguments(value) {\n  return isObjectLike(value) && baseGetTag(value) == argsTag;\n}\n\nmodule.exports = baseIsArguments;\n\n\n/***/ }),\n/* 95 */\n/***/ (function(module, exports, __nested_webpack_require_257040__) {\n\nvar isFunction = __nested_webpack_require_257040__(25),\n    isMasked = __nested_webpack_require_257040__(130),\n    isObject = __nested_webpack_require_257040__(0),\n    toSource = __nested_webpack_require_257040__(153);\n\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n\n/** Used to detect host constructors (Safari). */\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to detect if a method is native. */\nvar reIsNative = RegExp('^' +\n  funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\\\$&')\n  .replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$'\n);\n\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\nfunction baseIsNative(value) {\n  if (!isObject(value) || isMasked(value)) {\n    return false;\n  }\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nmodule.exports = baseIsNative;\n\n\n/***/ }),\n/* 96 */\n/***/ (function(module, exports, __nested_webpack_require_258540__) {\n\nvar baseGetTag = __nested_webpack_require_258540__(8),\n    isLength = __nested_webpack_require_258540__(26),\n    isObjectLike = __nested_webpack_require_258540__(6);\n\n/** `Object#toString` result references. */\nvar argsTag = '[object Arguments]',\n    arrayTag = '[object Array]',\n    boolTag = '[object Boolean]',\n    dateTag = '[object Date]',\n    errorTag = '[object Error]',\n    funcTag = '[object Function]',\n    mapTag = '[object Map]',\n    numberTag = '[object Number]',\n    objectTag = '[object Object]',\n    regexpTag = '[object RegExp]',\n    setTag = '[object Set]',\n    stringTag = '[object String]',\n    weakMapTag = '[object WeakMap]';\n\nvar arrayBufferTag = '[object ArrayBuffer]',\n    dataViewTag = '[object DataView]',\n    float32Tag = '[object Float32Array]',\n    float64Tag = '[object Float64Array]',\n    int8Tag = '[object Int8Array]',\n    int16Tag = '[object Int16Array]',\n    int32Tag = '[object Int32Array]',\n    uint8Tag = '[object Uint8Array]',\n    uint8ClampedTag = '[object Uint8ClampedArray]',\n    uint16Tag = '[object Uint16Array]',\n    uint32Tag = '[object Uint32Array]';\n\n/** Used to identify `toStringTag` values of typed arrays. */\nvar typedArrayTags = {};\ntypedArrayTags[float32Tag] = typedArrayTags[float64Tag] =\ntypedArrayTags[int8Tag] = typedArrayTags[int16Tag] =\ntypedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =\ntypedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =\ntypedArrayTags[uint32Tag] = true;\ntypedArrayTags[argsTag] = typedArrayTags[arrayTag] =\ntypedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =\ntypedArrayTags[dataViewTag] = typedArrayTags[dateTag] =\ntypedArrayTags[errorTag] = typedArrayTags[funcTag] =\ntypedArrayTags[mapTag] = typedArrayTags[numberTag] =\ntypedArrayTags[objectTag] = typedArrayTags[regexpTag] =\ntypedArrayTags[setTag] = typedArrayTags[stringTag] =\ntypedArrayTags[weakMapTag] = false;\n\n/**\n * The base implementation of `_.isTypedArray` without Node.js optimizations.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.\n */\nfunction baseIsTypedArray(value) {\n  return isObjectLike(value) &&\n    isLength(value.length) && !!typedArrayTags[baseGetTag(value)];\n}\n\nmodule.exports = baseIsTypedArray;\n\n\n/***/ }),\n/* 97 */\n/***/ (function(module, exports, __nested_webpack_require_260837__) {\n\nvar isObject = __nested_webpack_require_260837__(0),\n    isPrototype = __nested_webpack_require_260837__(40),\n    nativeKeysIn = __nested_webpack_require_260837__(142);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction baseKeysIn(object) {\n  if (!isObject(object)) {\n    return nativeKeysIn(object);\n  }\n  var isProto = isPrototype(object),\n      result = [];\n\n  for (var key in object) {\n    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseKeysIn;\n\n\n/***/ }),\n/* 98 */\n/***/ (function(module, exports, __nested_webpack_require_261782__) {\n\nvar Stack = __nested_webpack_require_261782__(83),\n    assignMergeValue = __nested_webpack_require_261782__(35),\n    baseFor = __nested_webpack_require_261782__(91),\n    baseMergeDeep = __nested_webpack_require_261782__(99),\n    isObject = __nested_webpack_require_261782__(0),\n    keysIn = __nested_webpack_require_261782__(46);\n\n/**\n * The base implementation of `_.merge` without support for multiple sources.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} [customizer] The function to customize merged values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMerge(object, source, srcIndex, customizer, stack) {\n  if (object === source) {\n    return;\n  }\n  baseFor(source, function(srcValue, key) {\n    if (isObject(srcValue)) {\n      stack || (stack = new Stack);\n      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);\n    }\n    else {\n      var newValue = customizer\n        ? customizer(object[key], srcValue, (key + ''), object, source, stack)\n        : undefined;\n\n      if (newValue === undefined) {\n        newValue = srcValue;\n      }\n      assignMergeValue(object, key, newValue);\n    }\n  }, keysIn);\n}\n\nmodule.exports = baseMerge;\n\n\n/***/ }),\n/* 99 */\n/***/ (function(module, exports, __nested_webpack_require_263144__) {\n\nvar assignMergeValue = __nested_webpack_require_263144__(35),\n    cloneBuffer = __nested_webpack_require_263144__(109),\n    cloneTypedArray = __nested_webpack_require_263144__(110),\n    copyArray = __nested_webpack_require_263144__(111),\n    initCloneObject = __nested_webpack_require_263144__(125),\n    isArguments = __nested_webpack_require_263144__(18),\n    isArray = __nested_webpack_require_263144__(2),\n    isArrayLikeObject = __nested_webpack_require_263144__(157),\n    isBuffer = __nested_webpack_require_263144__(44),\n    isFunction = __nested_webpack_require_263144__(25),\n    isObject = __nested_webpack_require_263144__(0),\n    isPlainObject = __nested_webpack_require_263144__(158),\n    isTypedArray = __nested_webpack_require_263144__(45),\n    toPlainObject = __nested_webpack_require_263144__(162);\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = object[key],\n      srcValue = source[key],\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer\n    ? customizer(objValue, srcValue, (key + ''), object, source, stack)\n    : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      }\n      else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      }\n      else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      }\n      else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      }\n      else {\n        newValue = [];\n      }\n    }\n    else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      }\n      else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {\n        newValue = initCloneObject(srcValue);\n      }\n    }\n    else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\nmodule.exports = baseMergeDeep;\n\n\n/***/ }),\n/* 100 */\n/***/ (function(module, exports, __nested_webpack_require_266226__) {\n\nvar basePickBy = __nested_webpack_require_266226__(101),\n    hasIn = __nested_webpack_require_266226__(156);\n\n/**\n * The base implementation of `_.pick` without support for individual\n * property identifiers.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @returns {Object} Returns the new object.\n */\nfunction basePick(object, paths) {\n  return basePickBy(object, paths, function(value, path) {\n    return hasIn(object, path);\n  });\n}\n\nmodule.exports = basePick;\n\n\n/***/ }),\n/* 101 */\n/***/ (function(module, exports, __nested_webpack_require_266812__) {\n\nvar baseGet = __nested_webpack_require_266812__(92),\n    baseSet = __nested_webpack_require_266812__(103),\n    castPath = __nested_webpack_require_266812__(13);\n\n/**\n * The base implementation of  `_.pickBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The source object.\n * @param {string[]} paths The property paths to pick.\n * @param {Function} predicate The function invoked per property.\n * @returns {Object} Returns the new object.\n */\nfunction basePickBy(object, paths, predicate) {\n  var index = -1,\n      length = paths.length,\n      result = {};\n\n  while (++index < length) {\n    var path = paths[index],\n        value = baseGet(object, path);\n\n    if (predicate(value, path)) {\n      baseSet(result, castPath(path, object), value);\n    }\n  }\n  return result;\n}\n\nmodule.exports = basePickBy;\n\n\n/***/ }),\n/* 102 */\n/***/ (function(module, exports, __nested_webpack_require_267688__) {\n\nvar identity = __nested_webpack_require_267688__(43),\n    overRest = __nested_webpack_require_267688__(41),\n    setToString = __nested_webpack_require_267688__(42);\n\n/**\n * The base implementation of `_.rest` which doesn't validate or coerce arguments.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @param {number} [start=func.length-1] The start position of the rest parameter.\n * @returns {Function} Returns the new function.\n */\nfunction baseRest(func, start) {\n  return setToString(overRest(func, start, identity), func + '');\n}\n\nmodule.exports = baseRest;\n\n\n/***/ }),\n/* 103 */\n/***/ (function(module, exports, __nested_webpack_require_268327__) {\n\nvar assignValue = __nested_webpack_require_268327__(36),\n    castPath = __nested_webpack_require_268327__(13),\n    isIndex = __nested_webpack_require_268327__(15),\n    isObject = __nested_webpack_require_268327__(0),\n    toKey = __nested_webpack_require_268327__(23);\n\n/**\n * The base implementation of `_.set`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to set.\n * @param {*} value The value to set.\n * @param {Function} [customizer] The function to customize path creation.\n * @returns {Object} Returns `object`.\n */\nfunction baseSet(object, path, value, customizer) {\n  if (!isObject(object)) {\n    return object;\n  }\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      lastIndex = length - 1,\n      nested = object;\n\n  while (nested != null && ++index < length) {\n    var key = toKey(path[index]),\n        newValue = value;\n\n    if (index != lastIndex) {\n      var objValue = nested[key];\n      newValue = customizer ? customizer(objValue, key, nested) : undefined;\n      if (newValue === undefined) {\n        newValue = isObject(objValue)\n          ? objValue\n          : (isIndex(path[index + 1]) ? [] : {});\n      }\n    }\n    assignValue(nested, key, newValue);\n    nested = nested[key];\n  }\n  return object;\n}\n\nmodule.exports = baseSet;\n\n\n/***/ }),\n/* 104 */\n/***/ (function(module, exports, __nested_webpack_require_269690__) {\n\nvar constant = __nested_webpack_require_269690__(154),\n    defineProperty = __nested_webpack_require_269690__(37),\n    identity = __nested_webpack_require_269690__(43);\n\n/**\n * The base implementation of `setToString` without support for hot loop shorting.\n *\n * @private\n * @param {Function} func The function to modify.\n * @param {Function} string The `toString` result.\n * @returns {Function} Returns `func`.\n */\nvar baseSetToString = !defineProperty ? identity : function(func, string) {\n  return defineProperty(func, 'toString', {\n    'configurable': true,\n    'enumerable': false,\n    'value': constant(string),\n    'writable': true\n  });\n};\n\nmodule.exports = baseSetToString;\n\n\n/***/ }),\n/* 105 */\n/***/ (function(module, exports) {\n\n/**\n * The base implementation of `_.times` without support for iteratee shorthands\n * or max array length checks.\n *\n * @private\n * @param {number} n The number of times to invoke `iteratee`.\n * @param {Function} iteratee The function invoked per iteration.\n * @returns {Array} Returns the array of results.\n */\nfunction baseTimes(n, iteratee) {\n  var index = -1,\n      result = Array(n);\n\n  while (++index < n) {\n    result[index] = iteratee(index);\n  }\n  return result;\n}\n\nmodule.exports = baseTimes;\n\n\n/***/ }),\n/* 106 */\n/***/ (function(module, exports, __nested_webpack_require_270972__) {\n\nvar Symbol = __nested_webpack_require_270972__(11),\n    arrayMap = __nested_webpack_require_270972__(87),\n    isArray = __nested_webpack_require_270972__(2),\n    isSymbol = __nested_webpack_require_270972__(27);\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = baseToString;\n\n\n/***/ }),\n/* 107 */\n/***/ (function(module, exports) {\n\n/**\n * The base implementation of `_.unary` without support for storing metadata.\n *\n * @private\n * @param {Function} func The function to cap arguments for.\n * @returns {Function} Returns the new capped function.\n */\nfunction baseUnary(func) {\n  return function(value) {\n    return func(value);\n  };\n}\n\nmodule.exports = baseUnary;\n\n\n/***/ }),\n/* 108 */\n/***/ (function(module, exports, __nested_webpack_require_272603__) {\n\nvar Uint8Array = __nested_webpack_require_272603__(84);\n\n/**\n * Creates a clone of `arrayBuffer`.\n *\n * @private\n * @param {ArrayBuffer} arrayBuffer The array buffer to clone.\n * @returns {ArrayBuffer} Returns the cloned array buffer.\n */\nfunction cloneArrayBuffer(arrayBuffer) {\n  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);\n  new Uint8Array(result).set(new Uint8Array(arrayBuffer));\n  return result;\n}\n\nmodule.exports = cloneArrayBuffer;\n\n\n/***/ }),\n/* 109 */\n/***/ (function(module, exports, __nested_webpack_require_273130__) {\n\n/* WEBPACK VAR INJECTION */(function(module) {var root = __nested_webpack_require_273130__(5);\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Built-in value references. */\nvar Buffer = moduleExports ? root.Buffer : undefined,\n    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;\n\n/**\n * Creates a clone of  `buffer`.\n *\n * @private\n * @param {Buffer} buffer The buffer to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Buffer} Returns the cloned buffer.\n */\nfunction cloneBuffer(buffer, isDeep) {\n  if (isDeep) {\n    return buffer.slice();\n  }\n  var length = buffer.length,\n      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);\n\n  buffer.copy(result);\n  return result;\n}\n\nmodule.exports = cloneBuffer;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __nested_webpack_require_273130__(29)(module)))\n\n/***/ }),\n/* 110 */\n/***/ (function(module, exports, __nested_webpack_require_274392__) {\n\nvar cloneArrayBuffer = __nested_webpack_require_274392__(108);\n\n/**\n * Creates a clone of `typedArray`.\n *\n * @private\n * @param {Object} typedArray The typed array to clone.\n * @param {boolean} [isDeep] Specify a deep clone.\n * @returns {Object} Returns the cloned typed array.\n */\nfunction cloneTypedArray(typedArray, isDeep) {\n  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\n  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\n}\n\nmodule.exports = cloneTypedArray;\n\n\n/***/ }),\n/* 111 */\n/***/ (function(module, exports) {\n\n/**\n * Copies the values of `source` to `array`.\n *\n * @private\n * @param {Array} source The array to copy values from.\n * @param {Array} [array=[]] The array to copy values to.\n * @returns {Array} Returns `array`.\n */\nfunction copyArray(source, array) {\n  var index = -1,\n      length = source.length;\n\n  array || (array = Array(length));\n  while (++index < length) {\n    array[index] = source[index];\n  }\n  return array;\n}\n\nmodule.exports = copyArray;\n\n\n/***/ }),\n/* 112 */\n/***/ (function(module, exports, __nested_webpack_require_275504__) {\n\nvar assignValue = __nested_webpack_require_275504__(36),\n    baseAssignValue = __nested_webpack_require_275504__(21);\n\n/**\n * Copies properties of `source` to `object`.\n *\n * @private\n * @param {Object} source The object to copy properties from.\n * @param {Array} props The property identifiers to copy.\n * @param {Object} [object={}] The object to copy properties to.\n * @param {Function} [customizer] The function to customize copied values.\n * @returns {Object} Returns `object`.\n */\nfunction copyObject(source, props, object, customizer) {\n  var isNew = !object;\n  object || (object = {});\n\n  var index = -1,\n      length = props.length;\n\n  while (++index < length) {\n    var key = props[index];\n\n    var newValue = customizer\n      ? customizer(object[key], source[key], key, object, source)\n      : undefined;\n\n    if (newValue === undefined) {\n      newValue = source[key];\n    }\n    if (isNew) {\n      baseAssignValue(object, key, newValue);\n    } else {\n      assignValue(object, key, newValue);\n    }\n  }\n  return object;\n}\n\nmodule.exports = copyObject;\n\n\n/***/ }),\n/* 113 */\n/***/ (function(module, exports, __nested_webpack_require_276619__) {\n\nvar root = __nested_webpack_require_276619__(5);\n\n/** Used to detect overreaching core-js shims. */\nvar coreJsData = root['__core-js_shared__'];\n\nmodule.exports = coreJsData;\n\n\n/***/ }),\n/* 114 */\n/***/ (function(module, exports, __nested_webpack_require_276859__) {\n\nvar baseRest = __nested_webpack_require_276859__(102),\n    isIterateeCall = __nested_webpack_require_276859__(127);\n\n/**\n * Creates a function like `_.assign`.\n *\n * @private\n * @param {Function} assigner The function to assign values.\n * @returns {Function} Returns the new assigner function.\n */\nfunction createAssigner(assigner) {\n  return baseRest(function(object, sources) {\n    var index = -1,\n        length = sources.length,\n        customizer = length > 1 ? sources[length - 1] : undefined,\n        guard = length > 2 ? sources[2] : undefined;\n\n    customizer = (assigner.length > 3 && typeof customizer == 'function')\n      ? (length--, customizer)\n      : undefined;\n\n    if (guard && isIterateeCall(sources[0], sources[1], guard)) {\n      customizer = length < 3 ? undefined : customizer;\n      length = 1;\n    }\n    object = Object(object);\n    while (++index < length) {\n      var source = sources[index];\n      if (source) {\n        assigner(object, source, index, customizer);\n      }\n    }\n    return object;\n  });\n}\n\nmodule.exports = createAssigner;\n\n\n/***/ }),\n/* 115 */\n/***/ (function(module, exports) {\n\n/**\n * Creates a base function for methods like `_.forIn` and `_.forOwn`.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new base function.\n */\nfunction createBaseFor(fromRight) {\n  return function(object, iteratee, keysFunc) {\n    var index = -1,\n        iterable = Object(object),\n        props = keysFunc(object),\n        length = props.length;\n\n    while (length--) {\n      var key = props[fromRight ? length : ++index];\n      if (iteratee(iterable[key], key, iterable) === false) {\n        break;\n      }\n    }\n    return object;\n  };\n}\n\nmodule.exports = createBaseFor;\n\n\n/***/ }),\n/* 116 */\n/***/ (function(module, exports, __nested_webpack_require_278684__) {\n\nvar flatten = __nested_webpack_require_278684__(155),\n    overRest = __nested_webpack_require_278684__(41),\n    setToString = __nested_webpack_require_278684__(42);\n\n/**\n * A specialized version of `baseRest` which flattens the rest array.\n *\n * @private\n * @param {Function} func The function to apply a rest parameter to.\n * @returns {Function} Returns the new function.\n */\nfunction flatRest(func) {\n  return setToString(overRest(func, undefined, flatten), func + '');\n}\n\nmodule.exports = flatRest;\n\n\n/***/ }),\n/* 117 */\n/***/ (function(module, exports, __nested_webpack_require_279223__) {\n\nvar Symbol = __nested_webpack_require_279223__(11);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/** Built-in value references. */\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n  var isOwn = hasOwnProperty.call(value, symToStringTag),\n      tag = value[symToStringTag];\n\n  try {\n    value[symToStringTag] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString.call(value);\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag] = tag;\n    } else {\n      delete value[symToStringTag];\n    }\n  }\n  return result;\n}\n\nmodule.exports = getRawTag;\n\n\n/***/ }),\n/* 118 */\n/***/ (function(module, exports) {\n\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\nfunction getValue(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nmodule.exports = getValue;\n\n\n/***/ }),\n/* 119 */\n/***/ (function(module, exports, __nested_webpack_require_280827__) {\n\nvar castPath = __nested_webpack_require_280827__(13),\n    isArguments = __nested_webpack_require_280827__(18),\n    isArray = __nested_webpack_require_280827__(2),\n    isIndex = __nested_webpack_require_280827__(15),\n    isLength = __nested_webpack_require_280827__(26),\n    toKey = __nested_webpack_require_280827__(23);\n\n/**\n * Checks if `path` exists on `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @param {Function} hasFunc The function to check properties.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n */\nfunction hasPath(object, path, hasFunc) {\n  path = castPath(path, object);\n\n  var index = -1,\n      length = path.length,\n      result = false;\n\n  while (++index < length) {\n    var key = toKey(path[index]);\n    if (!(result = object != null && hasFunc(object, key))) {\n      break;\n    }\n    object = object[key];\n  }\n  if (result || ++index != length) {\n    return result;\n  }\n  length = object == null ? 0 : object.length;\n  return !!length && isLength(length) && isIndex(key, length) &&\n    (isArray(object) || isArguments(object));\n}\n\nmodule.exports = hasPath;\n\n\n/***/ }),\n/* 120 */\n/***/ (function(module, exports, __nested_webpack_require_282001__) {\n\nvar nativeCreate = __nested_webpack_require_282001__(16);\n\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\nfunction hashClear() {\n  this.__data__ = nativeCreate ? nativeCreate(null) : {};\n  this.size = 0;\n}\n\nmodule.exports = hashClear;\n\n\n/***/ }),\n/* 121 */\n/***/ (function(module, exports) {\n\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction hashDelete(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = hashDelete;\n\n\n/***/ }),\n/* 122 */\n/***/ (function(module, exports, __nested_webpack_require_282861__) {\n\nvar nativeCreate = __nested_webpack_require_282861__(16);\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction hashGet(key) {\n  var data = this.__data__;\n  if (nativeCreate) {\n    var result = data[key];\n    return result === HASH_UNDEFINED ? undefined : result;\n  }\n  return hasOwnProperty.call(data, key) ? data[key] : undefined;\n}\n\nmodule.exports = hashGet;\n\n\n/***/ }),\n/* 123 */\n/***/ (function(module, exports, __nested_webpack_require_283709__) {\n\nvar nativeCreate = __nested_webpack_require_283709__(16);\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction hashHas(key) {\n  var data = this.__data__;\n  return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);\n}\n\nmodule.exports = hashHas;\n\n\n/***/ }),\n/* 124 */\n/***/ (function(module, exports, __nested_webpack_require_284411__) {\n\nvar nativeCreate = __nested_webpack_require_284411__(16);\n\n/** Used to stand-in for `undefined` hash values. */\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\nfunction hashSet(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;\n  return this;\n}\n\nmodule.exports = hashSet;\n\n\n/***/ }),\n/* 125 */\n/***/ (function(module, exports, __nested_webpack_require_285085__) {\n\nvar baseCreate = __nested_webpack_require_285085__(89),\n    getPrototype = __nested_webpack_require_285085__(39),\n    isPrototype = __nested_webpack_require_285085__(40);\n\n/**\n * Initializes an object clone.\n *\n * @private\n * @param {Object} object The object to clone.\n * @returns {Object} Returns the initialized clone.\n */\nfunction initCloneObject(object) {\n  return (typeof object.constructor == 'function' && !isPrototype(object))\n    ? baseCreate(getPrototype(object))\n    : {};\n}\n\nmodule.exports = initCloneObject;\n\n\n/***/ }),\n/* 126 */\n/***/ (function(module, exports, __nested_webpack_require_285644__) {\n\nvar Symbol = __nested_webpack_require_285644__(11),\n    isArguments = __nested_webpack_require_285644__(18),\n    isArray = __nested_webpack_require_285644__(2);\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\nmodule.exports = isFlattenable;\n\n\n/***/ }),\n/* 127 */\n/***/ (function(module, exports, __nested_webpack_require_286335__) {\n\nvar eq = __nested_webpack_require_286335__(17),\n    isArrayLike = __nested_webpack_require_286335__(24),\n    isIndex = __nested_webpack_require_286335__(15),\n    isObject = __nested_webpack_require_286335__(0);\n\n/**\n * Checks if the given arguments are from an iteratee call.\n *\n * @private\n * @param {*} value The potential iteratee value argument.\n * @param {*} index The potential iteratee index or key argument.\n * @param {*} object The potential iteratee object argument.\n * @returns {boolean} Returns `true` if the arguments are from an iteratee call,\n *  else `false`.\n */\nfunction isIterateeCall(value, index, object) {\n  if (!isObject(object)) {\n    return false;\n  }\n  var type = typeof index;\n  if (type == 'number'\n        ? (isArrayLike(object) && isIndex(index, object.length))\n        : (type == 'string' && index in object)\n      ) {\n    return eq(object[index], value);\n  }\n  return false;\n}\n\nmodule.exports = isIterateeCall;\n\n\n/***/ }),\n/* 128 */\n/***/ (function(module, exports, __nested_webpack_require_287301__) {\n\nvar isArray = __nested_webpack_require_287301__(2),\n    isSymbol = __nested_webpack_require_287301__(27);\n\n/** Used to match property names within property paths. */\nvar reIsDeepProp = /\\.|\\[(?:[^[\\]]*|([\"'])(?:(?!\\1)[^\\\\]|\\\\.)*?\\1)\\]/,\n    reIsPlainProp = /^\\w*$/;\n\n/**\n * Checks if `value` is a property name and not a property path.\n *\n * @private\n * @param {*} value The value to check.\n * @param {Object} [object] The object to query keys on.\n * @returns {boolean} Returns `true` if `value` is a property name, else `false`.\n */\nfunction isKey(value, object) {\n  if (isArray(value)) {\n    return false;\n  }\n  var type = typeof value;\n  if (type == 'number' || type == 'symbol' || type == 'boolean' ||\n      value == null || isSymbol(value)) {\n    return true;\n  }\n  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||\n    (object != null && value in Object(object));\n}\n\nmodule.exports = isKey;\n\n\n/***/ }),\n/* 129 */\n/***/ (function(module, exports) {\n\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\nfunction isKeyable(value) {\n  var type = typeof value;\n  return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')\n    ? (value !== '__proto__')\n    : (value === null);\n}\n\nmodule.exports = isKeyable;\n\n\n/***/ }),\n/* 130 */\n/***/ (function(module, exports, __nested_webpack_require_288752__) {\n\nvar coreJsData = __nested_webpack_require_288752__(113);\n\n/** Used to detect methods masquerading as native. */\nvar maskSrcKey = (function() {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? ('Symbol(src)_1.' + uid) : '';\n}());\n\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\nfunction isMasked(func) {\n  return !!maskSrcKey && (maskSrcKey in func);\n}\n\nmodule.exports = isMasked;\n\n\n/***/ }),\n/* 131 */\n/***/ (function(module, exports) {\n\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\nfunction listCacheClear() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nmodule.exports = listCacheClear;\n\n\n/***/ }),\n/* 132 */\n/***/ (function(module, exports, __nested_webpack_require_289671__) {\n\nvar assocIndexOf = __nested_webpack_require_289671__(12);\n\n/** Used for built-in method references. */\nvar arrayProto = Array.prototype;\n\n/** Built-in value references. */\nvar splice = arrayProto.splice;\n\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction listCacheDelete(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n  var lastIndex = data.length - 1;\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n  --this.size;\n  return true;\n}\n\nmodule.exports = listCacheDelete;\n\n\n/***/ }),\n/* 133 */\n/***/ (function(module, exports, __nested_webpack_require_290522__) {\n\nvar assocIndexOf = __nested_webpack_require_290522__(12);\n\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction listCacheGet(key) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  return index < 0 ? undefined : data[index][1];\n}\n\nmodule.exports = listCacheGet;\n\n\n/***/ }),\n/* 134 */\n/***/ (function(module, exports, __nested_webpack_require_291018__) {\n\nvar assocIndexOf = __nested_webpack_require_291018__(12);\n\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction listCacheHas(key) {\n  return assocIndexOf(this.__data__, key) > -1;\n}\n\nmodule.exports = listCacheHas;\n\n\n/***/ }),\n/* 135 */\n/***/ (function(module, exports, __nested_webpack_require_291497__) {\n\nvar assocIndexOf = __nested_webpack_require_291497__(12);\n\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\nfunction listCacheSet(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n  return this;\n}\n\nmodule.exports = listCacheSet;\n\n\n/***/ }),\n/* 136 */\n/***/ (function(module, exports, __nested_webpack_require_292126__) {\n\nvar Hash = __nested_webpack_require_292126__(82),\n    ListCache = __nested_webpack_require_292126__(10),\n    Map = __nested_webpack_require_292126__(33);\n\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\nfunction mapCacheClear() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash,\n    'map': new (Map || ListCache),\n    'string': new Hash\n  };\n}\n\nmodule.exports = mapCacheClear;\n\n\n/***/ }),\n/* 137 */\n/***/ (function(module, exports, __nested_webpack_require_292609__) {\n\nvar getMapData = __nested_webpack_require_292609__(14);\n\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction mapCacheDelete(key) {\n  var result = getMapData(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nmodule.exports = mapCacheDelete;\n\n\n/***/ }),\n/* 138 */\n/***/ (function(module, exports, __nested_webpack_require_293137__) {\n\nvar getMapData = __nested_webpack_require_293137__(14);\n\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction mapCacheGet(key) {\n  return getMapData(this, key).get(key);\n}\n\nmodule.exports = mapCacheGet;\n\n\n/***/ }),\n/* 139 */\n/***/ (function(module, exports, __nested_webpack_require_293545__) {\n\nvar getMapData = __nested_webpack_require_293545__(14);\n\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction mapCacheHas(key) {\n  return getMapData(this, key).has(key);\n}\n\nmodule.exports = mapCacheHas;\n\n\n/***/ }),\n/* 140 */\n/***/ (function(module, exports, __nested_webpack_require_294005__) {\n\nvar getMapData = __nested_webpack_require_294005__(14);\n\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\nfunction mapCacheSet(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nmodule.exports = mapCacheSet;\n\n\n/***/ }),\n/* 141 */\n/***/ (function(module, exports, __nested_webpack_require_294572__) {\n\nvar memoize = __nested_webpack_require_294572__(159);\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n\n\n/***/ }),\n/* 142 */\n/***/ (function(module, exports) {\n\n/**\n * This function is like\n * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)\n * except that it includes inherited enumerable properties.\n *\n * @private\n * @param {Object} object The object to query.\n * @returns {Array} Returns the array of property names.\n */\nfunction nativeKeysIn(object) {\n  var result = [];\n  if (object != null) {\n    for (var key in Object(object)) {\n      result.push(key);\n    }\n  }\n  return result;\n}\n\nmodule.exports = nativeKeysIn;\n\n\n/***/ }),\n/* 143 */\n/***/ (function(module, exports, __nested_webpack_require_295836__) {\n\n/* WEBPACK VAR INJECTION */(function(module) {var freeGlobal = __nested_webpack_require_295836__(38);\n\n/** Detect free variable `exports`. */\nvar freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;\n\n/** Detect free variable `module`. */\nvar freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;\n\n/** Detect the popular CommonJS extension `module.exports`. */\nvar moduleExports = freeModule && freeModule.exports === freeExports;\n\n/** Detect free variable `process` from Node.js. */\nvar freeProcess = moduleExports && freeGlobal.process;\n\n/** Used to access faster Node.js helpers. */\nvar nodeUtil = (function() {\n  try {\n    return freeProcess && freeProcess.binding && freeProcess.binding('util');\n  } catch (e) {}\n}());\n\nmodule.exports = nodeUtil;\n\n/* WEBPACK VAR INJECTION */}.call(exports, __nested_webpack_require_295836__(29)(module)))\n\n/***/ }),\n/* 144 */\n/***/ (function(module, exports) {\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar nativeObjectToString = objectProto.toString;\n\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n  return nativeObjectToString.call(value);\n}\n\nmodule.exports = objectToString;\n\n\n/***/ }),\n/* 145 */\n/***/ (function(module, exports) {\n\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n  return function(arg) {\n    return func(transform(arg));\n  };\n}\n\nmodule.exports = overArg;\n\n\n/***/ }),\n/* 146 */\n/***/ (function(module, exports) {\n\n/** Used to detect hot functions by number of calls within a span of milliseconds. */\nvar HOT_COUNT = 800,\n    HOT_SPAN = 16;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeNow = Date.now;\n\n/**\n * Creates a function that'll short out and invoke `identity` instead\n * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`\n * milliseconds.\n *\n * @private\n * @param {Function} func The function to restrict.\n * @returns {Function} Returns the new shortable function.\n */\nfunction shortOut(func) {\n  var count = 0,\n      lastCalled = 0;\n\n  return function() {\n    var stamp = nativeNow(),\n        remaining = HOT_SPAN - (stamp - lastCalled);\n\n    lastCalled = stamp;\n    if (remaining > 0) {\n      if (++count >= HOT_COUNT) {\n        return arguments[0];\n      }\n    } else {\n      count = 0;\n    }\n    return func.apply(undefined, arguments);\n  };\n}\n\nmodule.exports = shortOut;\n\n\n/***/ }),\n/* 147 */\n/***/ (function(module, exports, __nested_webpack_require_298864__) {\n\nvar ListCache = __nested_webpack_require_298864__(10);\n\n/**\n * Removes all key-value entries from the stack.\n *\n * @private\n * @name clear\n * @memberOf Stack\n */\nfunction stackClear() {\n  this.__data__ = new ListCache;\n  this.size = 0;\n}\n\nmodule.exports = stackClear;\n\n\n/***/ }),\n/* 148 */\n/***/ (function(module, exports) {\n\n/**\n * Removes `key` and its value from the stack.\n *\n * @private\n * @name delete\n * @memberOf Stack\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\nfunction stackDelete(key) {\n  var data = this.__data__,\n      result = data['delete'](key);\n\n  this.size = data.size;\n  return result;\n}\n\nmodule.exports = stackDelete;\n\n\n/***/ }),\n/* 149 */\n/***/ (function(module, exports) {\n\n/**\n * Gets the stack value for `key`.\n *\n * @private\n * @name get\n * @memberOf Stack\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\nfunction stackGet(key) {\n  return this.__data__.get(key);\n}\n\nmodule.exports = stackGet;\n\n\n/***/ }),\n/* 150 */\n/***/ (function(module, exports) {\n\n/**\n * Checks if a stack value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Stack\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\nfunction stackHas(key) {\n  return this.__data__.has(key);\n}\n\nmodule.exports = stackHas;\n\n\n/***/ }),\n/* 151 */\n/***/ (function(module, exports, __nested_webpack_require_300370__) {\n\nvar ListCache = __nested_webpack_require_300370__(10),\n    Map = __nested_webpack_require_300370__(33),\n    MapCache = __nested_webpack_require_300370__(34);\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/**\n * Sets the stack `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Stack\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the stack cache instance.\n */\nfunction stackSet(key, value) {\n  var data = this.__data__;\n  if (data instanceof ListCache) {\n    var pairs = data.__data__;\n    if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {\n      pairs.push([key, value]);\n      this.size = ++data.size;\n      return this;\n    }\n    data = this.__data__ = new MapCache(pairs);\n  }\n  data.set(key, value);\n  this.size = data.size;\n  return this;\n}\n\nmodule.exports = stackSet;\n\n\n/***/ }),\n/* 152 */\n/***/ (function(module, exports, __nested_webpack_require_301309__) {\n\nvar memoizeCapped = __nested_webpack_require_301309__(141);\n\n/** Used to match property names within property paths. */\nvar reLeadingDot = /^\\./,\n    rePropName = /[^.[\\]]+|\\[(?:(-?\\d+(?:\\.\\d+)?)|([\"'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2)\\]|(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))/g;\n\n/** Used to match backslashes in property paths. */\nvar reEscapeChar = /\\\\(\\\\)?/g;\n\n/**\n * Converts `string` to a property path array.\n *\n * @private\n * @param {string} string The string to convert.\n * @returns {Array} Returns the property path array.\n */\nvar stringToPath = memoizeCapped(function(string) {\n  var result = [];\n  if (reLeadingDot.test(string)) {\n    result.push('');\n  }\n  string.replace(rePropName, function(match, number, quote, string) {\n    result.push(quote ? string.replace(reEscapeChar, '$1') : (number || match));\n  });\n  return result;\n});\n\nmodule.exports = stringToPath;\n\n\n/***/ }),\n/* 153 */\n/***/ (function(module, exports) {\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\nfunction toSource(func) {\n  if (func != null) {\n    try {\n      return funcToString.call(func);\n    } catch (e) {}\n    try {\n      return (func + '');\n    } catch (e) {}\n  }\n  return '';\n}\n\nmodule.exports = toSource;\n\n\n/***/ }),\n/* 154 */\n/***/ (function(module, exports) {\n\n/**\n * Creates a function that returns `value`.\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Util\n * @param {*} value The value to return from the new function.\n * @returns {Function} Returns the new constant function.\n * @example\n *\n * var objects = _.times(2, _.constant({ 'a': 1 }));\n *\n * console.log(objects);\n * // => [{ 'a': 1 }, { 'a': 1 }]\n *\n * console.log(objects[0] === objects[1]);\n * // => true\n */\nfunction constant(value) {\n  return function() {\n    return value;\n  };\n}\n\nmodule.exports = constant;\n\n\n/***/ }),\n/* 155 */\n/***/ (function(module, exports, __nested_webpack_require_303435__) {\n\nvar baseFlatten = __nested_webpack_require_303435__(90);\n\n/**\n * Flattens `array` a single level deep.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to flatten.\n * @returns {Array} Returns the new flattened array.\n * @example\n *\n * _.flatten([1, [2, [3, [4]], 5]]);\n * // => [1, 2, [3, [4]], 5]\n */\nfunction flatten(array) {\n  var length = array == null ? 0 : array.length;\n  return length ? baseFlatten(array, 1) : [];\n}\n\nmodule.exports = flatten;\n\n\n/***/ }),\n/* 156 */\n/***/ (function(module, exports, __nested_webpack_require_304001__) {\n\nvar baseHasIn = __nested_webpack_require_304001__(93),\n    hasPath = __nested_webpack_require_304001__(119);\n\n/**\n * Checks if `path` is a direct or inherited property of `object`.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Object\n * @param {Object} object The object to query.\n * @param {Array|string} path The path to check.\n * @returns {boolean} Returns `true` if `path` exists, else `false`.\n * @example\n *\n * var object = _.create({ 'a': _.create({ 'b': 2 }) });\n *\n * _.hasIn(object, 'a');\n * // => true\n *\n * _.hasIn(object, 'a.b');\n * // => true\n *\n * _.hasIn(object, ['a', 'b']);\n * // => true\n *\n * _.hasIn(object, 'b');\n * // => false\n */\nfunction hasIn(object, path) {\n  return object != null && hasPath(object, path, baseHasIn);\n}\n\nmodule.exports = hasIn;\n\n\n/***/ }),\n/* 157 */\n/***/ (function(module, exports, __nested_webpack_require_304836__) {\n\nvar isArrayLike = __nested_webpack_require_304836__(24),\n    isObjectLike = __nested_webpack_require_304836__(6);\n\n/**\n * This method is like `_.isArrayLike` except that it also checks if `value`\n * is an object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an array-like object,\n *  else `false`.\n * @example\n *\n * _.isArrayLikeObject([1, 2, 3]);\n * // => true\n *\n * _.isArrayLikeObject(document.body.children);\n * // => true\n *\n * _.isArrayLikeObject('abc');\n * // => false\n *\n * _.isArrayLikeObject(_.noop);\n * // => false\n */\nfunction isArrayLikeObject(value) {\n  return isObjectLike(value) && isArrayLike(value);\n}\n\nmodule.exports = isArrayLikeObject;\n\n\n/***/ }),\n/* 158 */\n/***/ (function(module, exports, __nested_webpack_require_305653__) {\n\nvar baseGetTag = __nested_webpack_require_305653__(8),\n    getPrototype = __nested_webpack_require_305653__(39),\n    isObjectLike = __nested_webpack_require_305653__(6);\n\n/** `Object#toString` result references. */\nvar objectTag = '[object Object]';\n\n/** Used for built-in method references. */\nvar funcProto = Function.prototype,\n    objectProto = Object.prototype;\n\n/** Used to resolve the decompiled source of functions. */\nvar funcToString = funcProto.toString;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/** Used to infer the `Object` constructor. */\nvar objectCtorString = funcToString.call(Object);\n\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nfunction isPlainObject(value) {\n  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {\n    return false;\n  }\n  var proto = getPrototype(value);\n  if (proto === null) {\n    return true;\n  }\n  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n  return typeof Ctor == 'function' && Ctor instanceof Ctor &&\n    funcToString.call(Ctor) == objectCtorString;\n}\n\nmodule.exports = isPlainObject;\n\n\n/***/ }),\n/* 159 */\n/***/ (function(module, exports, __nested_webpack_require_307374__) {\n\nvar MapCache = __nested_webpack_require_307374__(34);\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/**\n * Creates a function that memoizes the result of `func`. If `resolver` is\n * provided, it determines the cache key for storing the result based on the\n * arguments provided to the memoized function. By default, the first argument\n * provided to the memoized function is used as the map cache key. The `func`\n * is invoked with the `this` binding of the memoized function.\n *\n * **Note:** The cache is exposed as the `cache` property on the memoized\n * function. Its creation may be customized by replacing the `_.memoize.Cache`\n * constructor with one whose instances implement the\n * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)\n * method interface of `clear`, `delete`, `get`, `has`, and `set`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to have its output memoized.\n * @param {Function} [resolver] The function to resolve the cache key.\n * @returns {Function} Returns the new memoized function.\n * @example\n *\n * var object = { 'a': 1, 'b': 2 };\n * var other = { 'c': 3, 'd': 4 };\n *\n * var values = _.memoize(_.values);\n * values(object);\n * // => [1, 2]\n *\n * values(other);\n * // => [3, 4]\n *\n * object.a = 2;\n * values(object);\n * // => [1, 2]\n *\n * // Modify the result cache.\n * values.cache.set(object, ['a', 'b']);\n * values(object);\n * // => ['a', 'b']\n *\n * // Replace `_.memoize.Cache`.\n * _.memoize.Cache = WeakMap;\n */\nfunction memoize(func, resolver) {\n  if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var memoized = function() {\n    var args = arguments,\n        key = resolver ? resolver.apply(this, args) : args[0],\n        cache = memoized.cache;\n\n    if (cache.has(key)) {\n      return cache.get(key);\n    }\n    var result = func.apply(this, args);\n    memoized.cache = cache.set(key, result) || cache;\n    return result;\n  };\n  memoized.cache = new (memoize.Cache || MapCache);\n  return memoized;\n}\n\n// Expose `MapCache`.\nmemoize.Cache = MapCache;\n\nmodule.exports = memoize;\n\n\n/***/ }),\n/* 160 */\n/***/ (function(module, exports, __nested_webpack_require_309678__) {\n\nvar basePick = __nested_webpack_require_309678__(100),\n    flatRest = __nested_webpack_require_309678__(116);\n\n/**\n * Creates an object composed of the picked `object` properties.\n *\n * @static\n * @since 0.1.0\n * @memberOf _\n * @category Object\n * @param {Object} object The source object.\n * @param {...(string|string[])} [paths] The property paths to pick.\n * @returns {Object} Returns the new object.\n * @example\n *\n * var object = { 'a': 1, 'b': '2', 'c': 3 };\n *\n * _.pick(object, ['a', 'c']);\n * // => { 'a': 1, 'c': 3 }\n */\nvar pick = flatRest(function(object, paths) {\n  return object == null ? {} : basePick(object, paths);\n});\n\nmodule.exports = pick;\n\n\n/***/ }),\n/* 161 */\n/***/ (function(module, exports) {\n\n/**\n * This method returns `false`.\n *\n * @static\n * @memberOf _\n * @since 4.13.0\n * @category Util\n * @returns {boolean} Returns `false`.\n * @example\n *\n * _.times(2, _.stubFalse);\n * // => [false, false]\n */\nfunction stubFalse() {\n  return false;\n}\n\nmodule.exports = stubFalse;\n\n\n/***/ }),\n/* 162 */\n/***/ (function(module, exports, __nested_webpack_require_310728__) {\n\nvar copyObject = __nested_webpack_require_310728__(112),\n    keysIn = __nested_webpack_require_310728__(46);\n\n/**\n * Converts `value` to a plain object flattening inherited enumerable string\n * keyed properties of `value` to own properties of the plain object.\n *\n * @static\n * @memberOf _\n * @since 3.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {Object} Returns the converted plain object.\n * @example\n *\n * function Foo() {\n *   this.b = 2;\n * }\n *\n * Foo.prototype.c = 3;\n *\n * _.assign({ 'a': 1 }, new Foo);\n * // => { 'a': 1, 'b': 2 }\n *\n * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));\n * // => { 'a': 1, 'b': 2, 'c': 3 }\n */\nfunction toPlainObject(value) {\n  return copyObject(value, keysIn(value));\n}\n\nmodule.exports = toPlainObject;\n\n\n/***/ }),\n/* 163 */\n/***/ (function(module, exports, __nested_webpack_require_311555__) {\n\nvar baseToString = __nested_webpack_require_311555__(106);\n\n/**\n * Converts `value` to a string. An empty string is returned for `null`\n * and `undefined` values. The sign of `-0` is preserved.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n * @example\n *\n * _.toString(null);\n * // => ''\n *\n * _.toString(-0);\n * // => '-0'\n *\n * _.toString([1, 2, 3]);\n * // => '1,2,3'\n */\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nmodule.exports = toString;\n\n\n/***/ }),\n/* 164 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_164__;\n\n/***/ }),\n/* 165 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_165__;\n\n/***/ }),\n/* 166 */\n/***/ (function(module, exports) {\n\nmodule.exports = __WEBPACK_EXTERNAL_MODULE_166__;\n\n/***/ }),\n/* 167 */\n/***/ (function(module, exports, __nested_webpack_require_312533__) {\n\nmodule.exports = __nested_webpack_require_312533__(48);\n\n\n/***/ })\n/******/ ]);\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/quagga/lib/quagga.js\n");

/***/ })

};
;